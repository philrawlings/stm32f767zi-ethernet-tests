
stm32f767zi-ethernet-tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012284  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003008  08012484  08012484  00022484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801548c  0801548c  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  0801548c  0801548c  0002548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015494  08015494  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015494  08015494  00025494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015498  08015498  00025498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801549c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006dc8  2000007c  08015518  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006e44  08015518  00036e44  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038aef  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000691a  00000000  00000000  00068b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c38  00000000  00000000  0006f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b48  00000000  00000000  000710f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000352c4  00000000  00000000  00072c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e641  00000000  00000000  000a7efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111704  00000000  00000000  000d653d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e7c41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e04  00000000  00000000  001e7c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	0801246c 	.word	0x0801246c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	0801246c 	.word	0x0801246c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
}
 80005f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f2:	f3bf 8f6f 	isb	sy
}
 80005f6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <SCB_EnableICache+0x48>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000600:	f3bf 8f4f 	dsb	sy
}
 8000604:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000606:	f3bf 8f6f 	isb	sy
}
 800060a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <SCB_EnableICache+0x48>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <SCB_EnableICache+0x48>)
 8000612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000616:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000618:	f3bf 8f4f 	dsb	sy
}
 800061c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061e:	f3bf 8f6f 	isb	sy
}
 8000622:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SCB_EnableDCache+0x84>)
 800063c:	2200      	movs	r2, #0
 800063e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000642:	f3bf 8f4f 	dsb	sy
}
 8000646:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <SCB_EnableDCache+0x84>)
 800064a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800064e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	0b5b      	lsrs	r3, r3, #13
 8000654:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000658:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	08db      	lsrs	r3, r3, #3
 800065e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000662:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	015a      	lsls	r2, r3, #5
 8000668:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800066c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000672:	4911      	ldr	r1, [pc, #68]	; (80006b8 <SCB_EnableDCache+0x84>)
 8000674:	4313      	orrs	r3, r2
 8000676:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	1e5a      	subs	r2, r3, #1
 800067e:	60ba      	str	r2, [r7, #8]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1ef      	bne.n	8000664 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	1e5a      	subs	r2, r3, #1
 8000688:	60fa      	str	r2, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1e5      	bne.n	800065a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800068e:	f3bf 8f4f 	dsb	sy
}
 8000692:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <SCB_EnableDCache+0x84>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <SCB_EnableDCache+0x84>)
 800069a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006a0:	f3bf 8f4f 	dsb	sy
}
 80006a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a6:	f3bf 8f6f 	isb	sy
}
 80006aa:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006c0:	f7ff ff92 	bl	80005e8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006c4:	f7ff ffb6 	bl	8000634 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 fcd2 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f81a 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f98c 	bl	80009ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006d4:	f000 f92c 	bl	8000930 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d8:	f000 f95a 	bl	8000990 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80006dc:	f000 f8aa 	bl	8000834 <MX_I2C1_Init>
  MX_LWIP_Init();
 80006e0:	f004 fc14 	bl	8004f0c <MX_LWIP_Init>
  MX_SPI1_Init();
 80006e4:	f000 f8e6 	bl	80008b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  netif_set_hostname(&gnetif, "MyBoard");
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <main+0x40>)
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <main+0x44>)
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 80006ee:	4803      	ldr	r0, [pc, #12]	; (80006fc <main+0x40>)
 80006f0:	f004 ff0a 	bl	8005508 <ethernetif_input>
	  sys_check_timeouts();
 80006f4:	f00b ffa4 	bl	800c640 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80006f8:	e7f9      	b.n	80006ee <main+0x32>
 80006fa:	bf00      	nop
 80006fc:	2000075c 	.word	0x2000075c
 8000700:	08012484 	.word	0x08012484

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b0b8      	sub	sp, #224	; 0xe0
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800070e:	2234      	movs	r2, #52	; 0x34
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f010 fe88 	bl	8011428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2290      	movs	r2, #144	; 0x90
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f010 fe79 	bl	8011428 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b3c      	ldr	r3, [pc, #240]	; (8000828 <SystemClock_Config+0x124>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a3b      	ldr	r2, [pc, #236]	; (8000828 <SystemClock_Config+0x124>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b39      	ldr	r3, [pc, #228]	; (8000828 <SystemClock_Config+0x124>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <SystemClock_Config+0x128>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a36      	ldr	r2, [pc, #216]	; (800082c <SystemClock_Config+0x128>)
 8000754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	4b34      	ldr	r3, [pc, #208]	; (800082c <SystemClock_Config+0x128>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000766:	2301      	movs	r3, #1
 8000768:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000782:	2304      	movs	r3, #4
 8000784:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000788:	23d8      	movs	r3, #216	; 0xd8
 800078a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000794:	2309      	movs	r3, #9
 8000796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 fb5d 	bl	8002e64 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007b0:	f000 f9be 	bl	8000b30 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b4:	f002 fb06 	bl	8002dc4 <HAL_PWREx_EnableOverDrive>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007be:	f000 f9b7 	bl	8000b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007e8:	2107      	movs	r1, #7
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fde8 	bl	80033c0 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80007f6:	f000 f99b 	bl	8000b30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <SystemClock_Config+0x12c>)
 80007fc:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007fe:	2300      	movs	r3, #0
 8000800:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000802:	2300      	movs	r3, #0
 8000804:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4618      	mov	r0, r3
 8000812:	f002 ffd7 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800081c:	f000 f988 	bl	8000b30 <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	37e0      	adds	r7, #224	; 0xe0
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000
 8000830:	00204100 	.word	0x00204100

08000834 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_I2C1_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <MX_I2C1_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <MX_I2C1_Init+0x7c>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_I2C1_Init+0x74>)
 800084c:	2201      	movs	r2, #1
 800084e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000870:	f002 f838 	bl	80028e4 <HAL_I2C_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800087a:	f000 f959 	bl	8000b30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000882:	f002 f8bf 	bl	8002a04 <HAL_I2CEx_ConfigAnalogFilter>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800088c:	f000 f950 	bl	8000b30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000894:	f002 f901 	bl	8002a9a <HAL_I2CEx_ConfigDigitalFilter>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 f947 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200002a4 	.word	0x200002a4
 80008ac:	40005400 	.word	0x40005400
 80008b0:	20404768 	.word	0x20404768

080008b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_SPI1_Init+0x74>)
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <MX_SPI1_Init+0x78>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_SPI1_Init+0x74>)
 80008c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_SPI1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_SPI1_Init+0x74>)
 80008ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_SPI1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_SPI1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_SPI1_Init+0x74>)
 80008e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_SPI1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_SPI1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_SPI1_Init+0x74>)
 8000902:	2207      	movs	r2, #7
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_SPI1_Init+0x74>)
 800090e:	2208      	movs	r2, #8
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_SPI1_Init+0x74>)
 8000914:	f003 fb7e 	bl	8004014 <HAL_SPI_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800091e:	f000 f907 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200006f4 	.word	0x200006f4
 800092c:	40013000 	.word	0x40013000

08000930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <MX_USART3_UART_Init+0x5c>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000974:	f003 fbf9 	bl	800416a <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f8d7 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000220 	.word	0x20000220
 800098c:	40004800 	.word	0x40004800

08000990 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800099a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	2206      	movs	r2, #6
 80009a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d4:	f002 f8ad 	bl	8002b32 <HAL_PCD_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 f8a7 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200002f0 	.word	0x200002f0

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b46      	ldr	r3, [pc, #280]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a45      	ldr	r2, [pc, #276]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b43      	ldr	r3, [pc, #268]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	61bb      	str	r3, [r7, #24]
 8000a18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	4b40      	ldr	r3, [pc, #256]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a3f      	ldr	r2, [pc, #252]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b3d      	ldr	r3, [pc, #244]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b3a      	ldr	r3, [pc, #232]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a39      	ldr	r2, [pc, #228]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a33      	ldr	r2, [pc, #204]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7a:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_GPIO_Init+0x130>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a98:	4821      	ldr	r0, [pc, #132]	; (8000b20 <MX_GPIO_Init+0x134>)
 8000a9a:	f001 ff09 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2140      	movs	r1, #64	; 0x40
 8000aa2:	4820      	ldr	r0, [pc, #128]	; (8000b24 <MX_GPIO_Init+0x138>)
 8000aa4:	f001 ff04 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	481b      	ldr	r0, [pc, #108]	; (8000b2c <MX_GPIO_Init+0x140>)
 8000abe:	f001 fd4b 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ac2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_GPIO_Init+0x134>)
 8000adc:	f001 fd3c 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ae0:	2340      	movs	r3, #64	; 0x40
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	480b      	ldr	r0, [pc, #44]	; (8000b24 <MX_GPIO_Init+0x138>)
 8000af8:	f001 fd2e 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_GPIO_Init+0x138>)
 8000b10:	f001 fd22 	bl	8002558 <HAL_GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3730      	adds	r7, #48	; 0x30
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020400 	.word	0x40020400
 8000b24:	40021800 	.word	0x40021800
 8000b28:	10110000 	.word	0x10110000
 8000b2c:	40020800 	.word	0x40020800

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>
	...

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x44>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_MspInit+0x44>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_MspInit+0x44>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x44>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x44>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x44>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <HAL_I2C_MspInit+0x7c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d128      	bne.n	8000bf8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_I2C_MspInit+0x80>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a16      	ldr	r2, [pc, #88]	; (8000c04 <HAL_I2C_MspInit+0x80>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_I2C_MspInit+0x80>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc4:	2312      	movs	r3, #18
 8000bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480b      	ldr	r0, [pc, #44]	; (8000c08 <HAL_I2C_MspInit+0x84>)
 8000bdc:	f001 fcbc 	bl	8002558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_I2C_MspInit+0x80>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_I2C_MspInit+0x80>)
 8000be6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_I2C_MspInit+0x80>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40005400 	.word	0x40005400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400

08000c0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a25      	ldr	r2, [pc, #148]	; (8000cc0 <HAL_SPI_MspInit+0xb4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d143      	bne.n	8000cb6 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <HAL_SPI_MspInit+0xb8>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <HAL_SPI_MspInit+0xb8>)
 8000c34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <HAL_SPI_MspInit+0xb8>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <HAL_SPI_MspInit+0xb8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <HAL_SPI_MspInit+0xb8>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <HAL_SPI_MspInit+0xb8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <HAL_SPI_MspInit+0xb8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <HAL_SPI_MspInit+0xb8>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_SPI_MspInit+0xb8>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c76:	2360      	movs	r3, #96	; 0x60
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c86:	2305      	movs	r3, #5
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <HAL_SPI_MspInit+0xbc>)
 8000c92:	f001 fc61 	bl	8002558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4806      	ldr	r0, [pc, #24]	; (8000ccc <HAL_SPI_MspInit+0xc0>)
 8000cb2:	f001 fc51 	bl	8002558 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013000 	.word	0x40013000
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_UART_MspInit+0x7c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d128      	bne.n	8000d44 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0x80>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <HAL_UART_MspInit+0x80>)
 8000cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_UART_MspInit+0x80>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_UART_MspInit+0x80>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_UART_MspInit+0x80>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_UART_MspInit+0x80>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d34:	2307      	movs	r3, #7
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_UART_MspInit+0x84>)
 8000d40:	f001 fc0a 	bl	8002558 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020c00 	.word	0x40020c00

08000d58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d78:	d141      	bne.n	8000dfe <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d92:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000da4:	230a      	movs	r3, #10
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4817      	ldr	r0, [pc, #92]	; (8000e0c <HAL_PCD_MspInit+0xb4>)
 8000db0:	f001 fbd2 	bl	8002558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4810      	ldr	r0, [pc, #64]	; (8000e0c <HAL_PCD_MspInit+0xb4>)
 8000dca:	f001 fbc5 	bl	8002558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd2:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd8:	6353      	str	r3, [r2, #52]	; 0x34
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5c:	f000 f94e 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	return 1;
 8000e68:	2301      	movs	r3, #1
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_kill>:

int _kill(int pid, int sig)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <_kill+0x20>)
 8000e80:	2216      	movs	r2, #22
 8000e82:	601a      	str	r2, [r3, #0]
	return -1;
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	20006e34 	.word	0x20006e34

08000e98 <_exit>:

void _exit (int status)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ffe5 	bl	8000e74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eaa:	e7fe      	b.n	8000eaa <_exit+0x12>

08000eac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e00a      	b.n	8000ed4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ebe:	f3af 8000 	nop.w
 8000ec2:	4601      	mov	r1, r0
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	b2ca      	uxtb	r2, r1
 8000ecc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf0      	blt.n	8000ebe <_read+0x12>
	}

return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	e009      	b.n	8000f0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dbf1      	blt.n	8000ef8 <_write+0x12>
	}
	return len;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_close>:

int _close(int file)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	return -1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f46:	605a      	str	r2, [r3, #4]
	return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <_isatty>:

int _isatty(int file)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f90:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <_sbrk+0x5c>)
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <_sbrk+0x60>)
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <_sbrk+0x64>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <_sbrk+0x68>)
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d205      	bcs.n	8000fc4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <_sbrk+0x6c>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a06      	ldr	r2, [pc, #24]	; (8000fec <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	371c      	adds	r7, #28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	20080000 	.word	0x20080000
 8000fe8:	00000400 	.word	0x00000400
 8000fec:	20000098 	.word	0x20000098
 8000ff0:	20006e48 	.word	0x20006e48
 8000ff4:	20006e34 	.word	0x20006e34

08000ff8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001038:	4c0b      	ldr	r4, [pc, #44]	; (8001068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd7 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f010 f9ad 	bl	80113a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fb35 	bl	80006bc <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001060:	0801549c 	.word	0x0801549c
  ldr r2, =_sbss
 8001064:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001068:	20006e44 	.word	0x20006e44

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x28>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x28>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f931 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f808 	bl	800109c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fd56 	bl	8000b3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x54>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x58>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f93b 	bl	8001336 <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00e      	b.n	80010e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d80a      	bhi.n	80010e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 f911 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <HAL_InitTick+0x5c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	20000758 	.word	0x20000758

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000758 	.word	0x20000758

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008

08001184 <__NVIC_SetPriorityGrouping>:
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	05fa0000 	.word	0x05fa0000

080011cc <__NVIC_GetPriorityGrouping>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_SetPriority>:
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	; (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff47 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff5c 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff8e 	bl	800123c <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5d 	bl	80011e8 <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffb0 	bl	80012a4 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001360:	4ba9      	ldr	r3, [pc, #676]	; (8001608 <HAL_ETH_Init+0x2b8>)
 8001362:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e181      	b.n	800167a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d106      	bne.n	8001390 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f003 fe04 	bl	8004f98 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001390:	4b9e      	ldr	r3, [pc, #632]	; (800160c <HAL_ETH_Init+0x2bc>)
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	4a9d      	ldr	r2, [pc, #628]	; (800160c <HAL_ETH_Init+0x2bc>)
 8001396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139a:	6453      	str	r3, [r2, #68]	; 0x44
 800139c:	4b9b      	ldr	r3, [pc, #620]	; (800160c <HAL_ETH_Init+0x2bc>)
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013a8:	4b99      	ldr	r3, [pc, #612]	; (8001610 <HAL_ETH_Init+0x2c0>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	4a98      	ldr	r2, [pc, #608]	; (8001610 <HAL_ETH_Init+0x2c0>)
 80013ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013b2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013b4:	4b96      	ldr	r3, [pc, #600]	; (8001610 <HAL_ETH_Init+0x2c0>)
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4994      	ldr	r1, [pc, #592]	; (8001610 <HAL_ETH_Init+0x2c0>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0201 	orr.w	r2, r2, #1
 80013d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013da:	f7ff fea3 	bl	8001124 <HAL_GetTick>
 80013de:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013e0:	e011      	b.n	8001406 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80013e2:	f7ff fe9f 	bl	8001124 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013f0:	d909      	bls.n	8001406 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2203      	movs	r2, #3
 80013f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e139      	b.n	800167a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e4      	bne.n	80013e2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f023 031c 	bic.w	r3, r3, #28
 8001426:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001428:	f002 f998 	bl	800375c <HAL_RCC_GetHCLKFreq>
 800142c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4a78      	ldr	r2, [pc, #480]	; (8001614 <HAL_ETH_Init+0x2c4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d908      	bls.n	8001448 <HAL_ETH_Init+0xf8>
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	4a77      	ldr	r2, [pc, #476]	; (8001618 <HAL_ETH_Init+0x2c8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d804      	bhi.n	8001448 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	e027      	b.n	8001498 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	4a73      	ldr	r2, [pc, #460]	; (8001618 <HAL_ETH_Init+0x2c8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d908      	bls.n	8001462 <HAL_ETH_Init+0x112>
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	4a6d      	ldr	r2, [pc, #436]	; (8001608 <HAL_ETH_Init+0x2b8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d204      	bcs.n	8001462 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f043 030c 	orr.w	r3, r3, #12
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	e01a      	b.n	8001498 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4a68      	ldr	r2, [pc, #416]	; (8001608 <HAL_ETH_Init+0x2b8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d303      	bcc.n	8001472 <HAL_ETH_Init+0x122>
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4a6b      	ldr	r2, [pc, #428]	; (800161c <HAL_ETH_Init+0x2cc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d911      	bls.n	8001496 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4a69      	ldr	r2, [pc, #420]	; (800161c <HAL_ETH_Init+0x2cc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d908      	bls.n	800148c <HAL_ETH_Init+0x13c>
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4a68      	ldr	r2, [pc, #416]	; (8001620 <HAL_ETH_Init+0x2d0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d804      	bhi.n	800148c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e005      	b.n	8001498 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	e000      	b.n	8001498 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001496:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014a4:	2100      	movs	r1, #0
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fb98 	bl	8001bdc <HAL_ETH_WritePHYRegister>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00b      	beq.n	80014ca <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80014b6:	6939      	ldr	r1, [r7, #16]
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fd4d 	bl	8001f58 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0d7      	b.n	800167a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80014ca:	20ff      	movs	r0, #255	; 0xff
 80014cc:	f7ff fe36 	bl	800113c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80a5 	beq.w	8001624 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014da:	f7ff fe23 	bl	8001124 <HAL_GetTick>
 80014de:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	461a      	mov	r2, r3
 80014e6:	2101      	movs	r1, #1
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fb0f 	bl	8001b0c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80014ee:	f7ff fe19 	bl	8001124 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d90f      	bls.n	8001520 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001504:	6939      	ldr	r1, [r7, #16]
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fd26 	bl	8001f58 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0ac      	b.n	800167a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0da      	beq.n	80014e0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800152a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800152e:	2100      	movs	r1, #0
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 fb53 	bl	8001bdc <HAL_ETH_WritePHYRegister>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00b      	beq.n	8001554 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001540:	6939      	ldr	r1, [r7, #16]
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fd08 	bl	8001f58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001550:	2301      	movs	r3, #1
 8001552:	e092      	b.n	800167a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001554:	f7ff fde6 	bl	8001124 <HAL_GetTick>
 8001558:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	461a      	mov	r2, r3
 8001560:	2101      	movs	r1, #1
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fad2 	bl	8001b0c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001568:	f7ff fddc 	bl	8001124 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d90f      	bls.n	800159a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800157e:	6939      	ldr	r1, [r7, #16]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fce9 	bl	8001f58 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e06f      	b.n	800167a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0da      	beq.n	800155a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	461a      	mov	r2, r3
 80015aa:	2110      	movs	r1, #16
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 faad 	bl	8001b0c <HAL_ETH_ReadPHYRegister>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00b      	beq.n	80015d0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015bc:	6939      	ldr	r1, [r7, #16]
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fcca 	bl	8001f58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015cc:	2301      	movs	r3, #1
 80015ce:	e054      	b.n	800167a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	e002      	b.n	80015ea <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	e035      	b.n	8001668 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	e030      	b.n	8001668 <HAL_ETH_Init+0x318>
 8001606:	bf00      	nop
 8001608:	03938700 	.word	0x03938700
 800160c:	40023800 	.word	0x40023800
 8001610:	40013800 	.word	0x40013800
 8001614:	01312cff 	.word	0x01312cff
 8001618:	02160ebf 	.word	0x02160ebf
 800161c:	05f5e0ff 	.word	0x05f5e0ff
 8001620:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001634:	4313      	orrs	r3, r2
 8001636:	b29b      	uxth	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	2100      	movs	r1, #0
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 facd 	bl	8001bdc <HAL_ETH_WritePHYRegister>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00b      	beq.n	8001660 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800164c:	6939      	ldr	r1, [r7, #16]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fc82 	bl	8001f58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e00c      	b.n	800167a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001660:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001664:	f7ff fd6a 	bl	800113c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001668:	6939      	ldr	r1, [r7, #16]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fc74 	bl	8001f58 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop

08001684 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_ETH_DMATxDescListInit+0x20>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e052      	b.n	800174a <HAL_ETH_DMATxDescListInit+0xc6>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e030      	b.n	8001722 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	015b      	lsls	r3, r3, #5
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	4413      	add	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016d0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	461a      	mov	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	d208      	bcs.n	8001716 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	015b      	lsls	r3, r3, #5
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	4413      	add	r3, r2
 800170e:	461a      	mov	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	e002      	b.n	800171c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d3ca      	bcc.n	80016c0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6819      	ldr	r1, [r3, #0]
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f241 0310 	movw	r3, #4112	; 0x1010
 8001734:	440b      	add	r3, r1
 8001736:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001756:	b480      	push	{r7}
 8001758:	b087      	sub	sp, #28
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_ETH_DMARxDescListInit+0x20>
 8001772:	2302      	movs	r3, #2
 8001774:	e056      	b.n	8001824 <HAL_ETH_DMARxDescListInit+0xce>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2202      	movs	r2, #2
 8001782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e034      	b.n	80017fc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	015b      	lsls	r3, r3, #5
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	4413      	add	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017a2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017aa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	461a      	mov	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d208      	bcs.n	80017f0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	015b      	lsls	r3, r3, #5
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	4413      	add	r3, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	e002      	b.n	80017f6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d3c6      	bcc.n	8001792 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6819      	ldr	r1, [r3, #0]
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	f241 030c 	movw	r3, #4108	; 0x100c
 800180e:	440b      	add	r3, r1
 8001810:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_ETH_TransmitFrame+0x24>
 8001850:	2302      	movs	r3, #2
 8001852:	e0cd      	b.n	80019f0 <HAL_ETH_TransmitFrame+0x1c0>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800187a:	2301      	movs	r3, #1
 800187c:	e0b8      	b.n	80019f0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	da09      	bge.n	800189c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2212      	movs	r2, #18
 800188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0a9      	b.n	80019f0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d915      	bls.n	80018d2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	4a54      	ldr	r2, [pc, #336]	; (80019fc <HAL_ETH_TransmitFrame+0x1cc>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0a9b      	lsrs	r3, r3, #10
 80018b0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	4b51      	ldr	r3, [pc, #324]	; (80019fc <HAL_ETH_TransmitFrame+0x1cc>)
 80018b6:	fba3 1302 	umull	r1, r3, r3, r2
 80018ba:	0a9b      	lsrs	r3, r3, #10
 80018bc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e001      	b.n	80018d6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d11c      	bne.n	8001916 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80018ea:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018f6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001906:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	62da      	str	r2, [r3, #44]	; 0x2c
 8001914:	e04b      	b.n	80019ae <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	e044      	b.n	80019a6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001926:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800192a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d107      	bne.n	8001942 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001940:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800194a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3b01      	subs	r3, #1
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	429a      	cmp	r2, r3
 8001954:	d116      	bne.n	8001984 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001964:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <HAL_ETH_TransmitFrame+0x1d0>)
 800196a:	fb02 f203 	mul.w	r2, r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	4413      	add	r3, r2
 8001972:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001976:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001982:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001992:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	3301      	adds	r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d3b6      	bcc.n	800191c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	f241 0314 	movw	r3, #4116	; 0x1014
 80019b6:	4413      	add	r3, r2
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00d      	beq.n	80019de <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	f241 0314 	movw	r3, #4116	; 0x1014
 80019ca:	4413      	add	r3, r2
 80019cc:	2204      	movs	r2, #4
 80019ce:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	f241 0304 	movw	r3, #4100	; 0x1004
 80019d8:	4413      	add	r3, r2
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	ac02b00b 	.word	0xac02b00b
 8001a00:	fffffa0c 	.word	0xfffffa0c

08001a04 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_ETH_GetReceivedFrame+0x1a>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e070      	b.n	8001b00 <HAL_ETH_GetReceivedFrame+0xfc>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db5a      	blt.n	8001aee <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d030      	beq.n	8001aa8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d103      	bne.n	8001a60 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0c1b      	lsrs	r3, r3, #16
 8001a70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a74:	3b04      	subs	r3, #4
 8001a76:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e02b      	b.n	8001b00 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d010      	beq.n	8001ad8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ad6:	e00a      	b.n	8001aee <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	460b      	mov	r3, r1
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b82      	cmp	r3, #130	; 0x82
 8001b2c:	d101      	bne.n	8001b32 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e050      	b.n	8001bd4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2282      	movs	r2, #130	; 0x82
 8001b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 031c 	and.w	r3, r3, #28
 8001b48:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8a1b      	ldrh	r3, [r3, #16]
 8001b4e:	02db      	lsls	r3, r3, #11
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001b58:	897b      	ldrh	r3, [r7, #10]
 8001b5a:	019b      	lsls	r3, r3, #6
 8001b5c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f023 0302 	bic.w	r3, r3, #2
 8001b6c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b7e:	f7ff fad1 	bl	8001124 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b84:	e015      	b.n	8001bb2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001b86:	f7ff facd 	bl	8001124 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b94:	d309      	bcc.n	8001baa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e014      	b.n	8001bd4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e4      	bne.n	8001b86 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	460b      	mov	r3, r1
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b42      	cmp	r3, #66	; 0x42
 8001bfc:	d101      	bne.n	8001c02 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e04e      	b.n	8001ca0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2242      	movs	r2, #66	; 0x42
 8001c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 031c 	and.w	r3, r3, #28
 8001c18:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8a1b      	ldrh	r3, [r3, #16]
 8001c1e:	02db      	lsls	r3, r3, #11
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001c28:	897b      	ldrh	r3, [r7, #10]
 8001c2a:	019b      	lsls	r3, r3, #6
 8001c2c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c58:	f7ff fa64 	bl	8001124 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c5e:	e015      	b.n	8001c8c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001c60:	f7ff fa60 	bl	8001124 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d309      	bcc.n	8001c84 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e00d      	b.n	8001ca0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1e4      	bne.n	8001c60 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_ETH_Start+0x16>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e01f      	b.n	8001cfe <HAL_ETH_Start+0x56>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fb44 	bl	800235c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 fb7b 	bl	80023d0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fc12 	bl	8002504 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fbaf 	bl	8002444 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fbdc 	bl	80024a4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_ETH_Stop+0x16>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e01f      	b.n	8001d5c <HAL_ETH_Stop+0x56>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fba1 	bl	8002474 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fbce 	bl	80024d4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fb66 	bl	800240a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fbe0 	bl	8002504 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fb26 	bl	8002396 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_ETH_ConfigMAC+0x1c>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e0e4      	b.n	8001f4a <HAL_ETH_ConfigMAC+0x1e6>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80b1 	beq.w	8001efa <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4b6c      	ldr	r3, [pc, #432]	; (8001f54 <HAL_ETH_ConfigMAC+0x1f0>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001db0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001db6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001dbc:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001dc2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001dc8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001dce:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001dd4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001dda:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001de0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001de6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001dec:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001df2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff f996 	bl	800113c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e20:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001e26:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001e2c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001e32:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001e38:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001e3e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001e4a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e4c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e56:	2001      	movs	r0, #1
 8001e58:	f7ff f970 	bl	800113c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e6c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e76:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e86:	4013      	ands	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e94:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001e9a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001ea0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001ea6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001eac:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff f939 	bl	800113c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eea:	2001      	movs	r0, #1
 8001eec:	f7ff f926 	bl	800113c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	61da      	str	r2, [r3, #28]
 8001ef8:	e01e      	b.n	8001f38 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f08:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f7ff f906 	bl	800113c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	ff20810f 	.word	0xff20810f

08001f58 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0b0      	sub	sp, #192	; 0xc0
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f74:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f86:	2300      	movs	r3, #0
 8001f88:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8001fa4:	e001      	b.n	8001faa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fae:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001fc4:	2340      	movs	r3, #64	; 0x40
 8001fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800202c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002030:	4bab      	ldr	r3, [pc, #684]	; (80022e0 <ETH_MACDMAConfig+0x388>)
 8002032:	4013      	ands	r3, r2
 8002034:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002038:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800203a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800203c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800203e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002040:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002044:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800204a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800204c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800204e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002052:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002058:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800205a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800205c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800205e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002060:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002064:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002068:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800206a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800206c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800206e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002080:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800208c:	2001      	movs	r0, #1
 800208e:	f7ff f855 	bl	800113c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800209a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800209c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800209e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020a0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80020a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80020a4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80020a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80020aa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80020ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80020b0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80020b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80020b6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80020b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80020bc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80020c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80020c8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020ca:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff f830 	bl	800113c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020ee:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020f8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002104:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002108:	f64f 7341 	movw	r3, #65345	; 0xff41
 800210c:	4013      	ands	r3, r2
 800210e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002116:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002118:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800211c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800211e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002122:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002124:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002128:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800212a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800212e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002130:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002134:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002136:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002148:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002154:	2001      	movs	r0, #1
 8002156:	f7fe fff1 	bl	800113c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002162:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002164:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002168:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800217e:	2001      	movs	r0, #1
 8002180:	f7fe ffdc 	bl	800113c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800218c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002196:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800219c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021a0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80021b2:	2304      	movs	r3, #4
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80021b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80021bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021c6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021cc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f241 0318 	movw	r3, #4120	; 0x1018
 80021e2:	4413      	add	r3, r2
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80021ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ee:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <ETH_MACDMAConfig+0x38c>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021f6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80021f8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021fa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80021fc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80021fe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002200:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002202:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002204:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002206:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002208:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800220a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800220c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800220e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002212:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002216:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002218:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	f241 0318 	movw	r3, #4120	; 0x1018
 800222a:	4413      	add	r3, r2
 800222c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002230:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	f241 0318 	movw	r3, #4120	; 0x1018
 800223a:	4413      	add	r3, r2
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002242:	2001      	movs	r0, #1
 8002244:	f7fe ff7a 	bl	800113c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002250:	4413      	add	r3, r2
 8002252:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002256:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800225c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800225e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002260:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002264:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002268:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800226a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800226c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800226e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002272:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800227c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002280:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002290:	2001      	movs	r0, #1
 8002292:	f7fe ff53 	bl	800113c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d10d      	bne.n	80022c8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	f241 031c 	movw	r3, #4124	; 0x101c
 80022b4:	4413      	add	r3, r2
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6811      	ldr	r1, [r2, #0]
 80022bc:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <ETH_MACDMAConfig+0x390>)
 80022be:	431a      	orrs	r2, r3
 80022c0:	f241 031c 	movw	r3, #4124	; 0x101c
 80022c4:	440b      	add	r3, r1
 80022c6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	461a      	mov	r2, r3
 80022ce:	2100      	movs	r1, #0
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f80b 	bl	80022ec <ETH_MACAddressConfig>
}
 80022d6:	bf00      	nop
 80022d8:	37c0      	adds	r7, #192	; 0xc0
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	ff20810f 	.word	0xff20810f
 80022e4:	f8de3f23 	.word	0xf8de3f23
 80022e8:	00010040 	.word	0x00010040

080022ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3305      	adds	r3, #5
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	3204      	adds	r2, #4
 8002304:	7812      	ldrb	r2, [r2, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <ETH_MACAddressConfig+0x68>)
 800230e:	4413      	add	r3, r2
 8002310:	461a      	mov	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3303      	adds	r3, #3
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	061a      	lsls	r2, r3, #24
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3302      	adds	r3, #2
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	041b      	lsls	r3, r3, #16
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3301      	adds	r3, #1
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	4313      	orrs	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	7812      	ldrb	r2, [r2, #0]
 8002336:	4313      	orrs	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <ETH_MACAddressConfig+0x6c>)
 800233e:	4413      	add	r3, r2
 8002340:	461a      	mov	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	6013      	str	r3, [r2, #0]
}
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40028040 	.word	0x40028040
 8002358:	40028044 	.word	0x40028044

0800235c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0208 	orr.w	r2, r2, #8
 8002376:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002380:	2001      	movs	r0, #1
 8002382:	f7fe fedb 	bl	800113c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	601a      	str	r2, [r3, #0]
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0208 	bic.w	r2, r2, #8
 80023b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7fe febe 	bl	800113c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	601a      	str	r2, [r3, #0]
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0204 	orr.w	r2, r2, #4
 80023ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7fe fea1 	bl	800113c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	601a      	str	r2, [r3, #0]
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0204 	bic.w	r2, r2, #4
 8002424:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800242e:	2001      	movs	r0, #1
 8002430:	f7fe fe84 	bl	800113c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	601a      	str	r2, [r3, #0]
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	f241 0318 	movw	r3, #4120	; 0x1018
 8002454:	4413      	add	r3, r2
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6811      	ldr	r1, [r2, #0]
 800245c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002460:	f241 0318 	movw	r3, #4120	; 0x1018
 8002464:	440b      	add	r3, r1
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	f241 0318 	movw	r3, #4120	; 0x1018
 8002484:	4413      	add	r3, r2
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6811      	ldr	r1, [r2, #0]
 800248c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002490:	f241 0318 	movw	r3, #4120	; 0x1018
 8002494:	440b      	add	r3, r1
 8002496:	601a      	str	r2, [r3, #0]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80024b4:	4413      	add	r3, r2
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6811      	ldr	r1, [r2, #0]
 80024bc:	f043 0202 	orr.w	r2, r3, #2
 80024c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80024c4:	440b      	add	r3, r1
 80024c6:	601a      	str	r2, [r3, #0]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80024e4:	4413      	add	r3, r2
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6811      	ldr	r1, [r2, #0]
 80024ec:	f023 0202 	bic.w	r2, r3, #2
 80024f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80024f4:	440b      	add	r3, r1
 80024f6:	601a      	str	r2, [r3, #0]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	f241 0318 	movw	r3, #4120	; 0x1018
 8002518:	4413      	add	r3, r2
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6811      	ldr	r1, [r2, #0]
 8002520:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002524:	f241 0318 	movw	r3, #4120	; 0x1018
 8002528:	440b      	add	r3, r1
 800252a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f241 0318 	movw	r3, #4120	; 0x1018
 8002534:	4413      	add	r3, r2
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800253a:	2001      	movs	r0, #1
 800253c:	f7fe fdfe 	bl	800113c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	f241 0318 	movw	r3, #4120	; 0x1018
 800254a:	440b      	add	r3, r1
 800254c:	601a      	str	r2, [r3, #0]
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	e175      	b.n	8002864 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	f040 8164 	bne.w	800285e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d00b      	beq.n	80025b6 <HAL_GPIO_Init+0x5e>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d007      	beq.n	80025b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025aa:	2b11      	cmp	r3, #17
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b12      	cmp	r3, #18
 80025b4:	d130      	bne.n	8002618 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 0201 	and.w	r2, r3, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x100>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b12      	cmp	r3, #18
 8002656:	d123      	bne.n	80026a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	08da      	lsrs	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3208      	adds	r2, #8
 8002660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	220f      	movs	r2, #15
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	08da      	lsrs	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3208      	adds	r2, #8
 800269a:	69b9      	ldr	r1, [r7, #24]
 800269c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0203 	and.w	r2, r3, #3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80be 	beq.w	800285e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e2:	4b66      	ldr	r3, [pc, #408]	; (800287c <HAL_GPIO_Init+0x324>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a65      	ldr	r2, [pc, #404]	; (800287c <HAL_GPIO_Init+0x324>)
 80026e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_GPIO_Init+0x324>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026fa:	4a61      	ldr	r2, [pc, #388]	; (8002880 <HAL_GPIO_Init+0x328>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_GPIO_Init+0x32c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d037      	beq.n	8002796 <HAL_GPIO_Init+0x23e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a57      	ldr	r2, [pc, #348]	; (8002888 <HAL_GPIO_Init+0x330>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d031      	beq.n	8002792 <HAL_GPIO_Init+0x23a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a56      	ldr	r2, [pc, #344]	; (800288c <HAL_GPIO_Init+0x334>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d02b      	beq.n	800278e <HAL_GPIO_Init+0x236>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a55      	ldr	r2, [pc, #340]	; (8002890 <HAL_GPIO_Init+0x338>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d025      	beq.n	800278a <HAL_GPIO_Init+0x232>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a54      	ldr	r2, [pc, #336]	; (8002894 <HAL_GPIO_Init+0x33c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01f      	beq.n	8002786 <HAL_GPIO_Init+0x22e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a53      	ldr	r2, [pc, #332]	; (8002898 <HAL_GPIO_Init+0x340>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d019      	beq.n	8002782 <HAL_GPIO_Init+0x22a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a52      	ldr	r2, [pc, #328]	; (800289c <HAL_GPIO_Init+0x344>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_GPIO_Init+0x226>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a51      	ldr	r2, [pc, #324]	; (80028a0 <HAL_GPIO_Init+0x348>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00d      	beq.n	800277a <HAL_GPIO_Init+0x222>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a50      	ldr	r2, [pc, #320]	; (80028a4 <HAL_GPIO_Init+0x34c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x21e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4f      	ldr	r2, [pc, #316]	; (80028a8 <HAL_GPIO_Init+0x350>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_GPIO_Init+0x21a>
 800276e:	2309      	movs	r3, #9
 8002770:	e012      	b.n	8002798 <HAL_GPIO_Init+0x240>
 8002772:	230a      	movs	r3, #10
 8002774:	e010      	b.n	8002798 <HAL_GPIO_Init+0x240>
 8002776:	2308      	movs	r3, #8
 8002778:	e00e      	b.n	8002798 <HAL_GPIO_Init+0x240>
 800277a:	2307      	movs	r3, #7
 800277c:	e00c      	b.n	8002798 <HAL_GPIO_Init+0x240>
 800277e:	2306      	movs	r3, #6
 8002780:	e00a      	b.n	8002798 <HAL_GPIO_Init+0x240>
 8002782:	2305      	movs	r3, #5
 8002784:	e008      	b.n	8002798 <HAL_GPIO_Init+0x240>
 8002786:	2304      	movs	r3, #4
 8002788:	e006      	b.n	8002798 <HAL_GPIO_Init+0x240>
 800278a:	2303      	movs	r3, #3
 800278c:	e004      	b.n	8002798 <HAL_GPIO_Init+0x240>
 800278e:	2302      	movs	r3, #2
 8002790:	e002      	b.n	8002798 <HAL_GPIO_Init+0x240>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_GPIO_Init+0x240>
 8002796:	2300      	movs	r3, #0
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	f002 0203 	and.w	r2, r2, #3
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	4093      	lsls	r3, r2
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027a8:	4935      	ldr	r1, [pc, #212]	; (8002880 <HAL_GPIO_Init+0x328>)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b6:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_GPIO_Init+0x354>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027da:	4a34      	ldr	r2, [pc, #208]	; (80028ac <HAL_GPIO_Init+0x354>)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027e0:	4b32      	ldr	r3, [pc, #200]	; (80028ac <HAL_GPIO_Init+0x354>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002804:	4a29      	ldr	r2, [pc, #164]	; (80028ac <HAL_GPIO_Init+0x354>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800280a:	4b28      	ldr	r3, [pc, #160]	; (80028ac <HAL_GPIO_Init+0x354>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800282e:	4a1f      	ldr	r2, [pc, #124]	; (80028ac <HAL_GPIO_Init+0x354>)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002834:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <HAL_GPIO_Init+0x354>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002858:	4a14      	ldr	r2, [pc, #80]	; (80028ac <HAL_GPIO_Init+0x354>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3301      	adds	r3, #1
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2b0f      	cmp	r3, #15
 8002868:	f67f ae86 	bls.w	8002578 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40013800 	.word	0x40013800
 8002884:	40020000 	.word	0x40020000
 8002888:	40020400 	.word	0x40020400
 800288c:	40020800 	.word	0x40020800
 8002890:	40020c00 	.word	0x40020c00
 8002894:	40021000 	.word	0x40021000
 8002898:	40021400 	.word	0x40021400
 800289c:	40021800 	.word	0x40021800
 80028a0:	40021c00 	.word	0x40021c00
 80028a4:	40022000 	.word	0x40022000
 80028a8:	40022400 	.word	0x40022400
 80028ac:	40013c00 	.word	0x40013c00

080028b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
 80028bc:	4613      	mov	r3, r2
 80028be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028cc:	e003      	b.n	80028d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	041a      	lsls	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	619a      	str	r2, [r3, #24]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e07f      	b.n	80029f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe f93a 	bl	8000b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002934:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002944:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d107      	bne.n	800295e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	e006      	b.n	800296c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800296a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d104      	bne.n	800297e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800297c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_I2C_Init+0x11c>)
 800298a:	430b      	orrs	r3, r1
 800298c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800299c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	ea42 0103 	orr.w	r1, r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	021a      	lsls	r2, r3, #8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69d9      	ldr	r1, [r3, #28]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1a      	ldr	r2, [r3, #32]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	02008000 	.word	0x02008000

08002a04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	d138      	bne.n	8002a8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e032      	b.n	8002a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6819      	ldr	r1, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d139      	bne.n	8002b24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e033      	b.n	8002b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2224      	movs	r2, #36	; 0x24
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002aec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e000      	b.n	8002b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
  }
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b34:	b08f      	sub	sp, #60	; 0x3c
 8002b36:	af0a      	add	r7, sp, #40	; 0x28
 8002b38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e116      	b.n	8002d72 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe f8fa 	bl	8000d58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2203      	movs	r2, #3
 8002b68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f001 ff62 	bl	8004a4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	687e      	ldr	r6, [r7, #4]
 8002b90:	466d      	mov	r5, sp
 8002b92:	f106 0410 	add.w	r4, r6, #16
 8002b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ba2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ba6:	1d33      	adds	r3, r6, #4
 8002ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002baa:	6838      	ldr	r0, [r7, #0]
 8002bac:	f001 fef6 	bl	800499c <USB_CoreInit>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0d7      	b.n	8002d72 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 ff50 	bl	8004a6e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e04a      	b.n	8002c6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	333d      	adds	r3, #61	; 0x3d
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	333c      	adds	r3, #60	; 0x3c
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	b298      	uxth	r0, r3
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3342      	adds	r3, #66	; 0x42
 8002c10:	4602      	mov	r2, r0
 8002c12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	333f      	adds	r3, #63	; 0x3f
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	3344      	adds	r3, #68	; 0x44
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	3348      	adds	r3, #72	; 0x48
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3350      	adds	r3, #80	; 0x50
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	3301      	adds	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d3af      	bcc.n	8002bd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	73fb      	strb	r3, [r7, #15]
 8002c78:	e044      	b.n	8002d04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	3301      	adds	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d3b5      	bcc.n	8002c7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	687e      	ldr	r6, [r7, #4]
 8002d16:	466d      	mov	r5, sp
 8002d18:	f106 0410 	add.w	r4, r6, #16
 8002d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d28:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d2c:	1d33      	adds	r3, r6, #4
 8002d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d30:	6838      	ldr	r0, [r7, #0]
 8002d32:	f001 fec7 	bl	8004ac4 <USB_DevInit>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e014      	b.n	8002d72 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d102      	bne.n	8002d66 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f80b 	bl	8002d7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 f879 	bl	8004e62 <USB_DevDisconnect>

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	10000003 	.word	0x10000003

08002dc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dce:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a22      	ldr	r2, [pc, #136]	; (8002e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df2:	f7fe f997 	bl	8001124 <HAL_GetTick>
 8002df6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002df8:	e009      	b.n	8002e0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dfa:	f7fe f993 	bl	8001124 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e08:	d901      	bls.n	8002e0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e022      	b.n	8002e54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1a:	d1ee      	bne.n	8002dfa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e28:	f7fe f97c 	bl	8001124 <HAL_GetTick>
 8002e2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e2e:	e009      	b.n	8002e44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e30:	f7fe f978 	bl	8001124 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e3e:	d901      	bls.n	8002e44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e007      	b.n	8002e54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e50:	d1ee      	bne.n	8002e30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40007000 	.word	0x40007000

08002e64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e29b      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8087 	beq.w	8002f96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e88:	4b96      	ldr	r3, [pc, #600]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d00c      	beq.n	8002eae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e94:	4b93      	ldr	r3, [pc, #588]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d112      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x62>
 8002ea0:	4b90      	ldr	r3, [pc, #576]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eac:	d10b      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eae:	4b8d      	ldr	r3, [pc, #564]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d06c      	beq.n	8002f94 <HAL_RCC_OscConfig+0x130>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d168      	bne.n	8002f94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e275      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_OscConfig+0x7a>
 8002ed0:	4b84      	ldr	r3, [pc, #528]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a83      	ldr	r2, [pc, #524]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	e02e      	b.n	8002f3c <HAL_RCC_OscConfig+0xd8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x9c>
 8002ee6:	4b7f      	ldr	r3, [pc, #508]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7e      	ldr	r2, [pc, #504]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b7c      	ldr	r3, [pc, #496]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a7b      	ldr	r2, [pc, #492]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e01d      	b.n	8002f3c <HAL_RCC_OscConfig+0xd8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0xc0>
 8002f0a:	4b76      	ldr	r3, [pc, #472]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a75      	ldr	r2, [pc, #468]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	4b73      	ldr	r3, [pc, #460]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a72      	ldr	r2, [pc, #456]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e00b      	b.n	8002f3c <HAL_RCC_OscConfig+0xd8>
 8002f24:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6b      	ldr	r2, [pc, #428]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe f8ee 	bl	8001124 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7fe f8ea 	bl	8001124 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e229      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0xe8>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe f8da 	bl	8001124 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe f8d6 	bl	8001124 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e215      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	4b57      	ldr	r3, [pc, #348]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x110>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d069      	beq.n	8003076 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa2:	4b50      	ldr	r3, [pc, #320]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b4d      	ldr	r3, [pc, #308]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d11c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x190>
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d116      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_RCC_OscConfig+0x17a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d001      	beq.n	8002fde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e1e9      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fde:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	493d      	ldr	r1, [pc, #244]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	e040      	b.n	8003076 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d023      	beq.n	8003044 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ffc:	4b39      	ldr	r3, [pc, #228]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a38      	ldr	r2, [pc, #224]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe f88c 	bl	8001124 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003010:	f7fe f888 	bl	8001124 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1c7      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4929      	ldr	r1, [pc, #164]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
 8003042:	e018      	b.n	8003076 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe f868 	bl	8001124 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003058:	f7fe f864 	bl	8001124 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1a3      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d038      	beq.n	80030f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d019      	beq.n	80030be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308a:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 800308c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308e:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003096:	f7fe f845 	bl	8001124 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe f841 	bl	8001124 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e180      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 80030b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x23a>
 80030bc:	e01a      	b.n	80030f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fe f82b 	bl	8001124 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d2:	f7fe f827 	bl	8001124 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d903      	bls.n	80030e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e166      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
 80030e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b92      	ldr	r3, [pc, #584]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1ee      	bne.n	80030d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a4 	beq.w	800324a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	4b8c      	ldr	r3, [pc, #560]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10d      	bne.n	800312a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	4b89      	ldr	r3, [pc, #548]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a88      	ldr	r2, [pc, #544]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b86      	ldr	r3, [pc, #536]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003126:	2301      	movs	r3, #1
 8003128:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312a:	4b83      	ldr	r3, [pc, #524]	; (8003338 <HAL_RCC_OscConfig+0x4d4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d118      	bne.n	8003168 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003136:	4b80      	ldr	r3, [pc, #512]	; (8003338 <HAL_RCC_OscConfig+0x4d4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7f      	ldr	r2, [pc, #508]	; (8003338 <HAL_RCC_OscConfig+0x4d4>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003142:	f7fd ffef 	bl	8001124 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7fd ffeb 	bl	8001124 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e12a      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315c:	4b76      	ldr	r3, [pc, #472]	; (8003338 <HAL_RCC_OscConfig+0x4d4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x31a>
 8003170:	4b70      	ldr	r3, [pc, #448]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a6f      	ldr	r2, [pc, #444]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	e02d      	b.n	80031da <HAL_RCC_OscConfig+0x376>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x33c>
 8003186:	4b6b      	ldr	r3, [pc, #428]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a6a      	ldr	r2, [pc, #424]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	4b68      	ldr	r3, [pc, #416]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a67      	ldr	r2, [pc, #412]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003198:	f023 0304 	bic.w	r3, r3, #4
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
 800319e:	e01c      	b.n	80031da <HAL_RCC_OscConfig+0x376>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d10c      	bne.n	80031c2 <HAL_RCC_OscConfig+0x35e>
 80031a8:	4b62      	ldr	r3, [pc, #392]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	4a61      	ldr	r2, [pc, #388]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6713      	str	r3, [r2, #112]	; 0x70
 80031b4:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a5e      	ldr	r2, [pc, #376]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	e00b      	b.n	80031da <HAL_RCC_OscConfig+0x376>
 80031c2:	4b5c      	ldr	r3, [pc, #368]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a5b      	ldr	r2, [pc, #364]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	4b59      	ldr	r3, [pc, #356]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d015      	beq.n	800320e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fd ff9f 	bl	8001124 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fd ff9b 	bl	8001124 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0d8      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ee      	beq.n	80031ea <HAL_RCC_OscConfig+0x386>
 800320c:	e014      	b.n	8003238 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320e:	f7fd ff89 	bl	8001124 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003214:	e00a      	b.n	800322c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fd ff85 	bl	8001124 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f241 3288 	movw	r2, #5000	; 0x1388
 8003224:	4293      	cmp	r3, r2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e0c2      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322c:	4b41      	ldr	r3, [pc, #260]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1ee      	bne.n	8003216 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d105      	bne.n	800324a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a3c      	ldr	r2, [pc, #240]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80ae 	beq.w	80033b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003254:	4b37      	ldr	r3, [pc, #220]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b08      	cmp	r3, #8
 800325e:	d06d      	beq.n	800333c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d14b      	bne.n	8003300 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a31      	ldr	r2, [pc, #196]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800326e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd ff56 	bl	8001124 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fd ff52 	bl	8001124 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e091      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	019b      	lsls	r3, r3, #6
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	3b01      	subs	r3, #1
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	061b      	lsls	r3, r3, #24
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	071b      	lsls	r3, r3, #28
 80032c6:	491b      	ldr	r1, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd ff24 	bl	8001124 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fd ff20 	bl	8001124 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e05f      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x47c>
 80032fe:	e057      	b.n	80033b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fd ff0a 	bl	8001124 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fd ff06 	bl	8001124 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e045      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x4b0>
 8003332:	e03d      	b.n	80033b0 <HAL_RCC_OscConfig+0x54c>
 8003334:	40023800 	.word	0x40023800
 8003338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800333c:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <HAL_RCC_OscConfig+0x558>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d030      	beq.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d129      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d122      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800336c:	4013      	ands	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003372:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003374:	4293      	cmp	r3, r2
 8003376:	d119      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	3b01      	subs	r3, #1
 8003386:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d10f      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d107      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0d0      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d8:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d910      	bls.n	8003408 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b67      	ldr	r3, [pc, #412]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 020f 	bic.w	r2, r3, #15
 80033ee:	4965      	ldr	r1, [pc, #404]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b63      	ldr	r3, [pc, #396]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0b8      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a58      	ldr	r2, [pc, #352]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003442:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003444:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	494d      	ldr	r1, [pc, #308]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d040      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d115      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d107      	bne.n	8003492 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e073      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003492:	4b3d      	ldr	r3, [pc, #244]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e06b      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a2:	4b39      	ldr	r3, [pc, #228]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f023 0203 	bic.w	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4936      	ldr	r1, [pc, #216]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b4:	f7fd fe36 	bl	8001124 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034bc:	f7fd fe32 	bl	8001124 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e053      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 020c 	and.w	r2, r3, #12
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d1eb      	bne.n	80034bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e4:	4b27      	ldr	r3, [pc, #156]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d210      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 020f 	bic.w	r2, r3, #15
 80034fa:	4922      	ldr	r1, [pc, #136]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e032      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4916      	ldr	r1, [pc, #88]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	490e      	ldr	r1, [pc, #56]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003552:	f000 f821 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003556:	4602      	mov	r2, r0
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	490a      	ldr	r1, [pc, #40]	; (800358c <HAL_RCC_ClockConfig+0x1cc>)
 8003564:	5ccb      	ldrb	r3, [r1, r3]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <HAL_RCC_ClockConfig+0x1d0>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1d4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd fd92 	bl	800109c <HAL_InitTick>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023c00 	.word	0x40023c00
 8003588:	40023800 	.word	0x40023800
 800358c:	08015230 	.word	0x08015230
 8003590:	20000000 	.word	0x20000000
 8003594:	20000004 	.word	0x20000004

08003598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003598:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	2300      	movs	r3, #0
 80035aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b0:	4b67      	ldr	r3, [pc, #412]	; (8003750 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d00d      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x40>
 80035bc:	2b08      	cmp	r3, #8
 80035be:	f200 80bd 	bhi.w	800373c <HAL_RCC_GetSysClockFreq+0x1a4>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x34>
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d003      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ca:	e0b7      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b61      	ldr	r3, [pc, #388]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035ce:	60bb      	str	r3, [r7, #8]
      break;
 80035d0:	e0b7      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d2:	4b61      	ldr	r3, [pc, #388]	; (8003758 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80035d4:	60bb      	str	r3, [r7, #8]
      break;
 80035d6:	e0b4      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d8:	4b5d      	ldr	r3, [pc, #372]	; (8003750 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035e2:	4b5b      	ldr	r3, [pc, #364]	; (8003750 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d04d      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ee:	4b58      	ldr	r3, [pc, #352]	; (8003750 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	099b      	lsrs	r3, r3, #6
 80035f4:	461a      	mov	r2, r3
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	ea02 0800 	and.w	r8, r2, r0
 8003606:	ea03 0901 	and.w	r9, r3, r1
 800360a:	4640      	mov	r0, r8
 800360c:	4649      	mov	r1, r9
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	014b      	lsls	r3, r1, #5
 8003618:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800361c:	0142      	lsls	r2, r0, #5
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	ebb0 0008 	subs.w	r0, r0, r8
 8003626:	eb61 0109 	sbc.w	r1, r1, r9
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	018b      	lsls	r3, r1, #6
 8003634:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003638:	0182      	lsls	r2, r0, #6
 800363a:	1a12      	subs	r2, r2, r0
 800363c:	eb63 0301 	sbc.w	r3, r3, r1
 8003640:	f04f 0000 	mov.w	r0, #0
 8003644:	f04f 0100 	mov.w	r1, #0
 8003648:	00d9      	lsls	r1, r3, #3
 800364a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800364e:	00d0      	lsls	r0, r2, #3
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	eb12 0208 	adds.w	r2, r2, r8
 8003658:	eb43 0309 	adc.w	r3, r3, r9
 800365c:	f04f 0000 	mov.w	r0, #0
 8003660:	f04f 0100 	mov.w	r1, #0
 8003664:	0259      	lsls	r1, r3, #9
 8003666:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800366a:	0250      	lsls	r0, r2, #9
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	461a      	mov	r2, r3
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	f7fc fe38 	bl	80002f0 <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4613      	mov	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e04a      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368a:	4b31      	ldr	r3, [pc, #196]	; (8003750 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	099b      	lsrs	r3, r3, #6
 8003690:	461a      	mov	r2, r3
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	f240 10ff 	movw	r0, #511	; 0x1ff
 800369a:	f04f 0100 	mov.w	r1, #0
 800369e:	ea02 0400 	and.w	r4, r2, r0
 80036a2:	ea03 0501 	and.w	r5, r3, r1
 80036a6:	4620      	mov	r0, r4
 80036a8:	4629      	mov	r1, r5
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	014b      	lsls	r3, r1, #5
 80036b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036b8:	0142      	lsls	r2, r0, #5
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	1b00      	subs	r0, r0, r4
 80036c0:	eb61 0105 	sbc.w	r1, r1, r5
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	018b      	lsls	r3, r1, #6
 80036ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036d2:	0182      	lsls	r2, r0, #6
 80036d4:	1a12      	subs	r2, r2, r0
 80036d6:	eb63 0301 	sbc.w	r3, r3, r1
 80036da:	f04f 0000 	mov.w	r0, #0
 80036de:	f04f 0100 	mov.w	r1, #0
 80036e2:	00d9      	lsls	r1, r3, #3
 80036e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036e8:	00d0      	lsls	r0, r2, #3
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	1912      	adds	r2, r2, r4
 80036f0:	eb45 0303 	adc.w	r3, r5, r3
 80036f4:	f04f 0000 	mov.w	r0, #0
 80036f8:	f04f 0100 	mov.w	r1, #0
 80036fc:	0299      	lsls	r1, r3, #10
 80036fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003702:	0290      	lsls	r0, r2, #10
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	461a      	mov	r2, r3
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	f7fc fdec 	bl	80002f0 <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4613      	mov	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	3301      	adds	r3, #1
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	60bb      	str	r3, [r7, #8]
      break;
 800373a:	e002      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800373e:	60bb      	str	r3, [r7, #8]
      break;
 8003740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003742:	68bb      	ldr	r3, [r7, #8]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	00f42400 	.word	0x00f42400
 8003758:	007a1200 	.word	0x007a1200

0800375c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_RCC_GetHCLKFreq+0x14>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000000 	.word	0x20000000

08003774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003778:	f7ff fff0 	bl	800375c <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0a9b      	lsrs	r3, r3, #10
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4903      	ldr	r1, [pc, #12]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	08015240 	.word	0x08015240

0800379c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037a0:	f7ff ffdc 	bl	800375c <HAL_RCC_GetHCLKFreq>
 80037a4:	4602      	mov	r2, r0
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	0b5b      	lsrs	r3, r3, #13
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	4903      	ldr	r1, [pc, #12]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b2:	5ccb      	ldrb	r3, [r1, r3]
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40023800 	.word	0x40023800
 80037c0:	08015240 	.word	0x08015240

080037c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d012      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037ec:	4b69      	ldr	r3, [pc, #420]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a68      	ldr	r2, [pc, #416]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037f6:	6093      	str	r3, [r2, #8]
 80037f8:	4b66      	ldr	r3, [pc, #408]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	4964      	ldr	r1, [pc, #400]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800380e:	2301      	movs	r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d017      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800381e:	4b5d      	ldr	r3, [pc, #372]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003824:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	4959      	ldr	r1, [pc, #356]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800383c:	d101      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800383e:	2301      	movs	r3, #1
 8003840:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800384a:	2301      	movs	r3, #1
 800384c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d017      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800385a:	4b4e      	ldr	r3, [pc, #312]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003860:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	494a      	ldr	r1, [pc, #296]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003878:	d101      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003886:	2301      	movs	r3, #1
 8003888:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003896:	2301      	movs	r3, #1
 8003898:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 808b 	beq.w	80039be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a8:	4b3a      	ldr	r3, [pc, #232]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	4a39      	ldr	r2, [pc, #228]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b2:	6413      	str	r3, [r2, #64]	; 0x40
 80038b4:	4b37      	ldr	r3, [pc, #220]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038c0:	4b35      	ldr	r3, [pc, #212]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a34      	ldr	r2, [pc, #208]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038cc:	f7fd fc2a 	bl	8001124 <HAL_GetTick>
 80038d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d4:	f7fd fc26 	bl	8001124 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e38f      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038e6:	4b2c      	ldr	r3, [pc, #176]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038f2:	4b28      	ldr	r3, [pc, #160]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d035      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	429a      	cmp	r2, r3
 800390e:	d02e      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003910:	4b20      	ldr	r3, [pc, #128]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003918:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800391a:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003924:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	4a1a      	ldr	r2, [pc, #104]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003930:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003932:	4a18      	ldr	r2, [pc, #96]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d114      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fd fbee 	bl	8001124 <HAL_GetTick>
 8003948:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394a:	e00a      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394c:	f7fd fbea 	bl	8001124 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e351      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003962:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0ee      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397a:	d111      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800398a:	400b      	ands	r3, r1
 800398c:	4901      	ldr	r1, [pc, #4]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
 8003992:	e00b      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003994:	40023800 	.word	0x40023800
 8003998:	40007000 	.word	0x40007000
 800399c:	0ffffcff 	.word	0x0ffffcff
 80039a0:	4bb3      	ldr	r3, [pc, #716]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4ab2      	ldr	r2, [pc, #712]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039aa:	6093      	str	r3, [r2, #8]
 80039ac:	4bb0      	ldr	r3, [pc, #704]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b8:	49ad      	ldr	r1, [pc, #692]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d010      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039ca:	4ba9      	ldr	r3, [pc, #676]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d0:	4aa7      	ldr	r2, [pc, #668]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039da:	4ba5      	ldr	r3, [pc, #660]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	49a2      	ldr	r1, [pc, #648]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f8:	4b9d      	ldr	r3, [pc, #628]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a06:	499a      	ldr	r1, [pc, #616]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a1a:	4b95      	ldr	r3, [pc, #596]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a28:	4991      	ldr	r1, [pc, #580]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a3c:	4b8c      	ldr	r3, [pc, #560]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4a:	4989      	ldr	r1, [pc, #548]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a5e:	4b84      	ldr	r3, [pc, #528]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	4980      	ldr	r1, [pc, #512]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a80:	4b7b      	ldr	r3, [pc, #492]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f023 0203 	bic.w	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	4978      	ldr	r1, [pc, #480]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aa2:	4b73      	ldr	r3, [pc, #460]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa8:	f023 020c 	bic.w	r2, r3, #12
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab0:	496f      	ldr	r1, [pc, #444]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ac4:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	4967      	ldr	r1, [pc, #412]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ae6:	4b62      	ldr	r3, [pc, #392]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af4:	495e      	ldr	r1, [pc, #376]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b08:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	4956      	ldr	r1, [pc, #344]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b2a:	4b51      	ldr	r3, [pc, #324]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	494d      	ldr	r1, [pc, #308]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b4c:	4b48      	ldr	r3, [pc, #288]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	4945      	ldr	r1, [pc, #276]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b6e:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7c:	493c      	ldr	r1, [pc, #240]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b90:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9e:	4934      	ldr	r1, [pc, #208]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d011      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bb2:	4b2f      	ldr	r3, [pc, #188]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc0:	492b      	ldr	r1, [pc, #172]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003be2:	2301      	movs	r3, #1
 8003be4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c00:	491b      	ldr	r1, [pc, #108]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00b      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c14:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c24:	4912      	ldr	r1, [pc, #72]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c48:	4909      	ldr	r1, [pc, #36]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00f      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c5c:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003c6e:	bf00      	nop
 8003c70:	40023800 	.word	0x40023800
 8003c74:	4986      	ldr	r1, [pc, #536]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c88:	4b81      	ldr	r3, [pc, #516]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c98:	497d      	ldr	r1, [pc, #500]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d006      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80d6 	beq.w	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cb4:	4b76      	ldr	r3, [pc, #472]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a75      	ldr	r2, [pc, #468]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc0:	f7fd fa30 	bl	8001124 <HAL_GetTick>
 8003cc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cc8:	f7fd fa2c 	bl	8001124 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e195      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cda:	4b6d      	ldr	r3, [pc, #436]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d021      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d11d      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cfa:	4b65      	ldr	r3, [pc, #404]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d08:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0e:	0e1b      	lsrs	r3, r3, #24
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	019a      	lsls	r2, r3, #6
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	431a      	orrs	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	071b      	lsls	r3, r3, #28
 8003d2e:	4958      	ldr	r1, [pc, #352]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d02e      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d60:	d129      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d62:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d70:	4b47      	ldr	r3, [pc, #284]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d76:	0f1b      	lsrs	r3, r3, #28
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	019a      	lsls	r2, r3, #6
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	041b      	lsls	r3, r3, #16
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	061b      	lsls	r3, r3, #24
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	071b      	lsls	r3, r3, #28
 8003d96:	493e      	ldr	r1, [pc, #248]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d9e:	4b3c      	ldr	r3, [pc, #240]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da4:	f023 021f 	bic.w	r2, r3, #31
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	3b01      	subs	r3, #1
 8003dae:	4938      	ldr	r1, [pc, #224]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01d      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dc2:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc8:	0e1b      	lsrs	r3, r3, #24
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dd0:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd6:	0f1b      	lsrs	r3, r3, #28
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	019a      	lsls	r2, r3, #6
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	041b      	lsls	r3, r3, #16
 8003dea:	431a      	orrs	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	061b      	lsls	r3, r3, #24
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	071b      	lsls	r3, r3, #28
 8003df6:	4926      	ldr	r1, [pc, #152]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d011      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	019a      	lsls	r2, r3, #6
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	061b      	lsls	r3, r3, #24
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	071b      	lsls	r3, r3, #28
 8003e26:	491a      	ldr	r1, [pc, #104]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3a:	f7fd f973 	bl	8001124 <HAL_GetTick>
 8003e3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e42:	f7fd f96f 	bl	8001124 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	; 0x64
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e0d8      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	f040 80ce 	bne.w	8004004 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e74:	f7fd f956 	bl	8001124 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e7c:	f7fd f952 	bl	8001124 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d904      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0bb      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e94:	4b5e      	ldr	r3, [pc, #376]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea0:	d0ec      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d02e      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d12a      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eca:	4b51      	ldr	r3, [pc, #324]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ed8:	4b4d      	ldr	r3, [pc, #308]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	0f1b      	lsrs	r3, r3, #28
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	019a      	lsls	r2, r3, #6
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	071b      	lsls	r3, r3, #28
 8003efe:	4944      	ldr	r1, [pc, #272]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f06:	4b42      	ldr	r3, [pc, #264]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	3b01      	subs	r3, #1
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	493d      	ldr	r1, [pc, #244]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d022      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f34:	d11d      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f36:	4b36      	ldr	r3, [pc, #216]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3c:	0e1b      	lsrs	r3, r3, #24
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f44:	4b32      	ldr	r3, [pc, #200]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	0f1b      	lsrs	r3, r3, #28
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	019a      	lsls	r2, r3, #6
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	061b      	lsls	r3, r3, #24
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	071b      	lsls	r3, r3, #28
 8003f6a:	4929      	ldr	r1, [pc, #164]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d028      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f7e:	4b24      	ldr	r3, [pc, #144]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f84:	0e1b      	lsrs	r3, r3, #24
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f8c:	4b20      	ldr	r3, [pc, #128]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	0c1b      	lsrs	r3, r3, #16
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	019a      	lsls	r2, r3, #6
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	061b      	lsls	r3, r3, #24
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	071b      	lsls	r3, r3, #28
 8003fb2:	4917      	ldr	r1, [pc, #92]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	4911      	ldr	r1, [pc, #68]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fdc:	f7fd f8a2 	bl	8001124 <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fe4:	f7fd f89e 	bl	8001124 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e007      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004002:	d1ef      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3720      	adds	r7, #32
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800

08004014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e09d      	b.n	8004162 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b00      	cmp	r3, #0
 800402c:	d108      	bne.n	8004040 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004036:	d009      	beq.n	800404c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	61da      	str	r2, [r3, #28]
 800403e:	e005      	b.n	800404c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fc fdd0 	bl	8000c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004082:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800408c:	d902      	bls.n	8004094 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e002      	b.n	800409a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004098:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040a2:	d007      	beq.n	80040b4 <HAL_SPI_Init+0xa0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040ac:	d002      	beq.n	80040b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	ea42 0103 	orr.w	r1, r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	f003 0204 	and.w	r2, r3, #4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004130:	ea42 0103 	orr.w	r1, r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004150:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e040      	b.n	80041fe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fc fd9f 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2224      	movs	r2, #36	; 0x24
 8004196:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0201 	bic.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f82d 	bl	8004208 <UART_SetConfig>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e022      	b.n	80041fe <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fa83 	bl	80046cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fb0a 	bl	8004810 <UART_CheckIdleState>
 80041fc:	4603      	mov	r3, r0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4ba7      	ldr	r3, [pc, #668]	; (80044d0 <UART_SetConfig+0x2c8>)
 8004234:	4013      	ands	r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	6979      	ldr	r1, [r7, #20]
 800423c:	430b      	orrs	r3, r1
 800423e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	430a      	orrs	r2, r1
 8004278:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a95      	ldr	r2, [pc, #596]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d120      	bne.n	80042c6 <UART_SetConfig+0xbe>
 8004284:	4b94      	ldr	r3, [pc, #592]	; (80044d8 <UART_SetConfig+0x2d0>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b03      	cmp	r3, #3
 8004290:	d816      	bhi.n	80042c0 <UART_SetConfig+0xb8>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0x90>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042b5 	.word	0x080042b5
 80042a0:	080042af 	.word	0x080042af
 80042a4:	080042bb 	.word	0x080042bb
 80042a8:	2301      	movs	r3, #1
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e14f      	b.n	800454e <UART_SetConfig+0x346>
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e14c      	b.n	800454e <UART_SetConfig+0x346>
 80042b4:	2304      	movs	r3, #4
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e149      	b.n	800454e <UART_SetConfig+0x346>
 80042ba:	2308      	movs	r3, #8
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e146      	b.n	800454e <UART_SetConfig+0x346>
 80042c0:	2310      	movs	r3, #16
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e143      	b.n	800454e <UART_SetConfig+0x346>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a84      	ldr	r2, [pc, #528]	; (80044dc <UART_SetConfig+0x2d4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d132      	bne.n	8004336 <UART_SetConfig+0x12e>
 80042d0:	4b81      	ldr	r3, [pc, #516]	; (80044d8 <UART_SetConfig+0x2d0>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b0c      	cmp	r3, #12
 80042dc:	d828      	bhi.n	8004330 <UART_SetConfig+0x128>
 80042de:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <UART_SetConfig+0xdc>)
 80042e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e4:	08004319 	.word	0x08004319
 80042e8:	08004331 	.word	0x08004331
 80042ec:	08004331 	.word	0x08004331
 80042f0:	08004331 	.word	0x08004331
 80042f4:	08004325 	.word	0x08004325
 80042f8:	08004331 	.word	0x08004331
 80042fc:	08004331 	.word	0x08004331
 8004300:	08004331 	.word	0x08004331
 8004304:	0800431f 	.word	0x0800431f
 8004308:	08004331 	.word	0x08004331
 800430c:	08004331 	.word	0x08004331
 8004310:	08004331 	.word	0x08004331
 8004314:	0800432b 	.word	0x0800432b
 8004318:	2300      	movs	r3, #0
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e117      	b.n	800454e <UART_SetConfig+0x346>
 800431e:	2302      	movs	r3, #2
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e114      	b.n	800454e <UART_SetConfig+0x346>
 8004324:	2304      	movs	r3, #4
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e111      	b.n	800454e <UART_SetConfig+0x346>
 800432a:	2308      	movs	r3, #8
 800432c:	77fb      	strb	r3, [r7, #31]
 800432e:	e10e      	b.n	800454e <UART_SetConfig+0x346>
 8004330:	2310      	movs	r3, #16
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e10b      	b.n	800454e <UART_SetConfig+0x346>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a69      	ldr	r2, [pc, #420]	; (80044e0 <UART_SetConfig+0x2d8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d120      	bne.n	8004382 <UART_SetConfig+0x17a>
 8004340:	4b65      	ldr	r3, [pc, #404]	; (80044d8 <UART_SetConfig+0x2d0>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800434a:	2b30      	cmp	r3, #48	; 0x30
 800434c:	d013      	beq.n	8004376 <UART_SetConfig+0x16e>
 800434e:	2b30      	cmp	r3, #48	; 0x30
 8004350:	d814      	bhi.n	800437c <UART_SetConfig+0x174>
 8004352:	2b20      	cmp	r3, #32
 8004354:	d009      	beq.n	800436a <UART_SetConfig+0x162>
 8004356:	2b20      	cmp	r3, #32
 8004358:	d810      	bhi.n	800437c <UART_SetConfig+0x174>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <UART_SetConfig+0x15c>
 800435e:	2b10      	cmp	r3, #16
 8004360:	d006      	beq.n	8004370 <UART_SetConfig+0x168>
 8004362:	e00b      	b.n	800437c <UART_SetConfig+0x174>
 8004364:	2300      	movs	r3, #0
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e0f1      	b.n	800454e <UART_SetConfig+0x346>
 800436a:	2302      	movs	r3, #2
 800436c:	77fb      	strb	r3, [r7, #31]
 800436e:	e0ee      	b.n	800454e <UART_SetConfig+0x346>
 8004370:	2304      	movs	r3, #4
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e0eb      	b.n	800454e <UART_SetConfig+0x346>
 8004376:	2308      	movs	r3, #8
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e0e8      	b.n	800454e <UART_SetConfig+0x346>
 800437c:	2310      	movs	r3, #16
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e0e5      	b.n	800454e <UART_SetConfig+0x346>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a57      	ldr	r2, [pc, #348]	; (80044e4 <UART_SetConfig+0x2dc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d120      	bne.n	80043ce <UART_SetConfig+0x1c6>
 800438c:	4b52      	ldr	r3, [pc, #328]	; (80044d8 <UART_SetConfig+0x2d0>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004396:	2bc0      	cmp	r3, #192	; 0xc0
 8004398:	d013      	beq.n	80043c2 <UART_SetConfig+0x1ba>
 800439a:	2bc0      	cmp	r3, #192	; 0xc0
 800439c:	d814      	bhi.n	80043c8 <UART_SetConfig+0x1c0>
 800439e:	2b80      	cmp	r3, #128	; 0x80
 80043a0:	d009      	beq.n	80043b6 <UART_SetConfig+0x1ae>
 80043a2:	2b80      	cmp	r3, #128	; 0x80
 80043a4:	d810      	bhi.n	80043c8 <UART_SetConfig+0x1c0>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <UART_SetConfig+0x1a8>
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d006      	beq.n	80043bc <UART_SetConfig+0x1b4>
 80043ae:	e00b      	b.n	80043c8 <UART_SetConfig+0x1c0>
 80043b0:	2300      	movs	r3, #0
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e0cb      	b.n	800454e <UART_SetConfig+0x346>
 80043b6:	2302      	movs	r3, #2
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e0c8      	b.n	800454e <UART_SetConfig+0x346>
 80043bc:	2304      	movs	r3, #4
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e0c5      	b.n	800454e <UART_SetConfig+0x346>
 80043c2:	2308      	movs	r3, #8
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e0c2      	b.n	800454e <UART_SetConfig+0x346>
 80043c8:	2310      	movs	r3, #16
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e0bf      	b.n	800454e <UART_SetConfig+0x346>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a45      	ldr	r2, [pc, #276]	; (80044e8 <UART_SetConfig+0x2e0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d125      	bne.n	8004424 <UART_SetConfig+0x21c>
 80043d8:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <UART_SetConfig+0x2d0>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e6:	d017      	beq.n	8004418 <UART_SetConfig+0x210>
 80043e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ec:	d817      	bhi.n	800441e <UART_SetConfig+0x216>
 80043ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f2:	d00b      	beq.n	800440c <UART_SetConfig+0x204>
 80043f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f8:	d811      	bhi.n	800441e <UART_SetConfig+0x216>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <UART_SetConfig+0x1fe>
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004402:	d006      	beq.n	8004412 <UART_SetConfig+0x20a>
 8004404:	e00b      	b.n	800441e <UART_SetConfig+0x216>
 8004406:	2300      	movs	r3, #0
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e0a0      	b.n	800454e <UART_SetConfig+0x346>
 800440c:	2302      	movs	r3, #2
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e09d      	b.n	800454e <UART_SetConfig+0x346>
 8004412:	2304      	movs	r3, #4
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e09a      	b.n	800454e <UART_SetConfig+0x346>
 8004418:	2308      	movs	r3, #8
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e097      	b.n	800454e <UART_SetConfig+0x346>
 800441e:	2310      	movs	r3, #16
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e094      	b.n	800454e <UART_SetConfig+0x346>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a30      	ldr	r2, [pc, #192]	; (80044ec <UART_SetConfig+0x2e4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d125      	bne.n	800447a <UART_SetConfig+0x272>
 800442e:	4b2a      	ldr	r3, [pc, #168]	; (80044d8 <UART_SetConfig+0x2d0>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800443c:	d017      	beq.n	800446e <UART_SetConfig+0x266>
 800443e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004442:	d817      	bhi.n	8004474 <UART_SetConfig+0x26c>
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004448:	d00b      	beq.n	8004462 <UART_SetConfig+0x25a>
 800444a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444e:	d811      	bhi.n	8004474 <UART_SetConfig+0x26c>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <UART_SetConfig+0x254>
 8004454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004458:	d006      	beq.n	8004468 <UART_SetConfig+0x260>
 800445a:	e00b      	b.n	8004474 <UART_SetConfig+0x26c>
 800445c:	2301      	movs	r3, #1
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e075      	b.n	800454e <UART_SetConfig+0x346>
 8004462:	2302      	movs	r3, #2
 8004464:	77fb      	strb	r3, [r7, #31]
 8004466:	e072      	b.n	800454e <UART_SetConfig+0x346>
 8004468:	2304      	movs	r3, #4
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e06f      	b.n	800454e <UART_SetConfig+0x346>
 800446e:	2308      	movs	r3, #8
 8004470:	77fb      	strb	r3, [r7, #31]
 8004472:	e06c      	b.n	800454e <UART_SetConfig+0x346>
 8004474:	2310      	movs	r3, #16
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e069      	b.n	800454e <UART_SetConfig+0x346>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <UART_SetConfig+0x2e8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d137      	bne.n	80044f4 <UART_SetConfig+0x2ec>
 8004484:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <UART_SetConfig+0x2d0>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800448e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004492:	d017      	beq.n	80044c4 <UART_SetConfig+0x2bc>
 8004494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004498:	d817      	bhi.n	80044ca <UART_SetConfig+0x2c2>
 800449a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449e:	d00b      	beq.n	80044b8 <UART_SetConfig+0x2b0>
 80044a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a4:	d811      	bhi.n	80044ca <UART_SetConfig+0x2c2>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <UART_SetConfig+0x2aa>
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ae:	d006      	beq.n	80044be <UART_SetConfig+0x2b6>
 80044b0:	e00b      	b.n	80044ca <UART_SetConfig+0x2c2>
 80044b2:	2300      	movs	r3, #0
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e04a      	b.n	800454e <UART_SetConfig+0x346>
 80044b8:	2302      	movs	r3, #2
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e047      	b.n	800454e <UART_SetConfig+0x346>
 80044be:	2304      	movs	r3, #4
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e044      	b.n	800454e <UART_SetConfig+0x346>
 80044c4:	2308      	movs	r3, #8
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e041      	b.n	800454e <UART_SetConfig+0x346>
 80044ca:	2310      	movs	r3, #16
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	e03e      	b.n	800454e <UART_SetConfig+0x346>
 80044d0:	efff69f3 	.word	0xefff69f3
 80044d4:	40011000 	.word	0x40011000
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40004400 	.word	0x40004400
 80044e0:	40004800 	.word	0x40004800
 80044e4:	40004c00 	.word	0x40004c00
 80044e8:	40005000 	.word	0x40005000
 80044ec:	40011400 	.word	0x40011400
 80044f0:	40007800 	.word	0x40007800
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a71      	ldr	r2, [pc, #452]	; (80046c0 <UART_SetConfig+0x4b8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d125      	bne.n	800454a <UART_SetConfig+0x342>
 80044fe:	4b71      	ldr	r3, [pc, #452]	; (80046c4 <UART_SetConfig+0x4bc>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004508:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800450c:	d017      	beq.n	800453e <UART_SetConfig+0x336>
 800450e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004512:	d817      	bhi.n	8004544 <UART_SetConfig+0x33c>
 8004514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004518:	d00b      	beq.n	8004532 <UART_SetConfig+0x32a>
 800451a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451e:	d811      	bhi.n	8004544 <UART_SetConfig+0x33c>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <UART_SetConfig+0x324>
 8004524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004528:	d006      	beq.n	8004538 <UART_SetConfig+0x330>
 800452a:	e00b      	b.n	8004544 <UART_SetConfig+0x33c>
 800452c:	2300      	movs	r3, #0
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e00d      	b.n	800454e <UART_SetConfig+0x346>
 8004532:	2302      	movs	r3, #2
 8004534:	77fb      	strb	r3, [r7, #31]
 8004536:	e00a      	b.n	800454e <UART_SetConfig+0x346>
 8004538:	2304      	movs	r3, #4
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e007      	b.n	800454e <UART_SetConfig+0x346>
 800453e:	2308      	movs	r3, #8
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e004      	b.n	800454e <UART_SetConfig+0x346>
 8004544:	2310      	movs	r3, #16
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e001      	b.n	800454e <UART_SetConfig+0x346>
 800454a:	2310      	movs	r3, #16
 800454c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004556:	d15b      	bne.n	8004610 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004558:	7ffb      	ldrb	r3, [r7, #31]
 800455a:	2b08      	cmp	r3, #8
 800455c:	d827      	bhi.n	80045ae <UART_SetConfig+0x3a6>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x35c>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004589 	.word	0x08004589
 8004568:	08004591 	.word	0x08004591
 800456c:	08004599 	.word	0x08004599
 8004570:	080045af 	.word	0x080045af
 8004574:	0800459f 	.word	0x0800459f
 8004578:	080045af 	.word	0x080045af
 800457c:	080045af 	.word	0x080045af
 8004580:	080045af 	.word	0x080045af
 8004584:	080045a7 	.word	0x080045a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7ff f8f4 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 800458c:	61b8      	str	r0, [r7, #24]
        break;
 800458e:	e013      	b.n	80045b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004590:	f7ff f904 	bl	800379c <HAL_RCC_GetPCLK2Freq>
 8004594:	61b8      	str	r0, [r7, #24]
        break;
 8004596:	e00f      	b.n	80045b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004598:	4b4b      	ldr	r3, [pc, #300]	; (80046c8 <UART_SetConfig+0x4c0>)
 800459a:	61bb      	str	r3, [r7, #24]
        break;
 800459c:	e00c      	b.n	80045b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459e:	f7fe fffb 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 80045a2:	61b8      	str	r0, [r7, #24]
        break;
 80045a4:	e008      	b.n	80045b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045aa:	61bb      	str	r3, [r7, #24]
        break;
 80045ac:	e004      	b.n	80045b8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	77bb      	strb	r3, [r7, #30]
        break;
 80045b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d074      	beq.n	80046a8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	005a      	lsls	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	085b      	lsrs	r3, r3, #1
 80045c8:	441a      	add	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b0f      	cmp	r3, #15
 80045da:	d916      	bls.n	800460a <UART_SetConfig+0x402>
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e2:	d212      	bcs.n	800460a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f023 030f 	bic.w	r3, r3, #15
 80045ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	89fb      	ldrh	r3, [r7, #14]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	89fa      	ldrh	r2, [r7, #14]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	e04e      	b.n	80046a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	77bb      	strb	r3, [r7, #30]
 800460e:	e04b      	b.n	80046a8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004610:	7ffb      	ldrb	r3, [r7, #31]
 8004612:	2b08      	cmp	r3, #8
 8004614:	d827      	bhi.n	8004666 <UART_SetConfig+0x45e>
 8004616:	a201      	add	r2, pc, #4	; (adr r2, 800461c <UART_SetConfig+0x414>)
 8004618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461c:	08004641 	.word	0x08004641
 8004620:	08004649 	.word	0x08004649
 8004624:	08004651 	.word	0x08004651
 8004628:	08004667 	.word	0x08004667
 800462c:	08004657 	.word	0x08004657
 8004630:	08004667 	.word	0x08004667
 8004634:	08004667 	.word	0x08004667
 8004638:	08004667 	.word	0x08004667
 800463c:	0800465f 	.word	0x0800465f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004640:	f7ff f898 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 8004644:	61b8      	str	r0, [r7, #24]
        break;
 8004646:	e013      	b.n	8004670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004648:	f7ff f8a8 	bl	800379c <HAL_RCC_GetPCLK2Freq>
 800464c:	61b8      	str	r0, [r7, #24]
        break;
 800464e:	e00f      	b.n	8004670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004650:	4b1d      	ldr	r3, [pc, #116]	; (80046c8 <UART_SetConfig+0x4c0>)
 8004652:	61bb      	str	r3, [r7, #24]
        break;
 8004654:	e00c      	b.n	8004670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004656:	f7fe ff9f 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 800465a:	61b8      	str	r0, [r7, #24]
        break;
 800465c:	e008      	b.n	8004670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004662:	61bb      	str	r3, [r7, #24]
        break;
 8004664:	e004      	b.n	8004670 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	77bb      	strb	r3, [r7, #30]
        break;
 800466e:	bf00      	nop
    }

    if (pclk != 0U)
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d018      	beq.n	80046a8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	085a      	lsrs	r2, r3, #1
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	441a      	add	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	b29b      	uxth	r3, r3
 800468a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b0f      	cmp	r3, #15
 8004690:	d908      	bls.n	80046a4 <UART_SetConfig+0x49c>
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004698:	d204      	bcs.n	80046a4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	e001      	b.n	80046a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40007c00 	.word	0x40007c00
 80046c4:	40023800 	.word	0x40023800
 80046c8:	00f42400 	.word	0x00f42400

080046cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01a      	beq.n	80047e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ca:	d10a      	bne.n	80047e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	605a      	str	r2, [r3, #4]
  }
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af02      	add	r7, sp, #8
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004820:	f7fc fc80 	bl	8001124 <HAL_GetTick>
 8004824:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b08      	cmp	r3, #8
 8004832:	d10e      	bne.n	8004852 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f82d 	bl	80048a2 <UART_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e023      	b.n	800489a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b04      	cmp	r3, #4
 800485e:	d10e      	bne.n	800487e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f817 	bl	80048a2 <UART_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e00d      	b.n	800489a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	4613      	mov	r3, r2
 80048b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b2:	e05e      	b.n	8004972 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ba:	d05a      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048bc:	f7fc fc32 	bl	8001124 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d302      	bcc.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d11b      	bne.n	800490a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0201 	bic.w	r2, r2, #1
 80048f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2220      	movs	r2, #32
 80048f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e043      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d02c      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004926:	d124      	bne.n	8004972 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004930:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004940:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e00f      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	429a      	cmp	r2, r3
 8004980:	bf0c      	ite	eq
 8004982:	2301      	moveq	r3, #1
 8004984:	2300      	movne	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	429a      	cmp	r2, r3
 800498e:	d091      	beq.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800499c:	b084      	sub	sp, #16
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	f107 001c 	add.w	r0, r7, #28
 80049aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d120      	bne.n	80049f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <USB_CoreInit+0xac>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d105      	bne.n	80049ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa5a 	bl	8004ea4 <USB_CoreReset>
 80049f0:	4603      	mov	r3, r0
 80049f2:	73fb      	strb	r3, [r7, #15]
 80049f4:	e010      	b.n	8004a18 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fa4e 	bl	8004ea4 <USB_CoreReset>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d10b      	bne.n	8004a36 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f043 0206 	orr.w	r2, r3, #6
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f043 0220 	orr.w	r2, r3, #32
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a42:	b004      	add	sp, #16
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	ffbdffbf 	.word	0xffbdffbf

08004a4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f023 0201 	bic.w	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]
 8004a98:	e00b      	b.n	8004ab2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60da      	str	r2, [r3, #12]
 8004aac:	e001      	b.n	8004ab2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e003      	b.n	8004aba <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004ab2:	2032      	movs	r0, #50	; 0x32
 8004ab4:	f7fc fb42 	bl	800113c <HAL_Delay>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b086      	sub	sp, #24
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	e009      	b.n	8004af8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	3340      	adds	r3, #64	; 0x40
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	2200      	movs	r2, #0
 8004af0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	3301      	adds	r3, #1
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	2b0e      	cmp	r3, #14
 8004afc:	d9f2      	bls.n	8004ae4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d11c      	bne.n	8004b3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b12:	f043 0302 	orr.w	r3, r3, #2
 8004b16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e005      	b.n	8004b4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b64:	461a      	mov	r2, r3
 8004b66:	680b      	ldr	r3, [r1, #0]
 8004b68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10c      	bne.n	8004b8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b76:	2100      	movs	r1, #0
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f959 	bl	8004e30 <USB_SetDevSpeed>
 8004b7e:	e018      	b.n	8004bb2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b80:	2101      	movs	r1, #1
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f954 	bl	8004e30 <USB_SetDevSpeed>
 8004b88:	e013      	b.n	8004bb2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d10c      	bne.n	8004baa <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d104      	bne.n	8004ba0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b96:	2100      	movs	r1, #0
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f949 	bl	8004e30 <USB_SetDevSpeed>
 8004b9e:	e008      	b.n	8004bb2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f944 	bl	8004e30 <USB_SetDevSpeed>
 8004ba8:	e003      	b.n	8004bb2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004baa:	2103      	movs	r1, #3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f93f 	bl	8004e30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bb2:	2110      	movs	r1, #16
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8f3 	bl	8004da0 <USB_FlushTxFifo>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f911 	bl	8004dec <USB_FlushRxFifo>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2300      	movs	r3, #0
 8004bde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be6:	461a      	mov	r2, r3
 8004be8:	2300      	movs	r3, #0
 8004bea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	e043      	b.n	8004c86 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c14:	d118      	bne.n	8004c48 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	e013      	b.n	8004c5a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e008      	b.n	8004c5a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	461a      	mov	r2, r3
 8004c56:	2300      	movs	r3, #0
 8004c58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	461a      	mov	r2, r3
 8004c68:	2300      	movs	r3, #0
 8004c6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	3301      	adds	r3, #1
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d3b7      	bcc.n	8004bfe <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c8e:	2300      	movs	r3, #0
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	e043      	b.n	8004d1c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004caa:	d118      	bne.n	8004cde <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e013      	b.n	8004cf0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	e008      	b.n	8004cf0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	461a      	mov	r2, r3
 8004cec:	2300      	movs	r3, #0
 8004cee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2300      	movs	r3, #0
 8004d00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d3b7      	bcc.n	8004c94 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f043 0210 	orr.w	r2, r3, #16
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699a      	ldr	r2, [r3, #24]
 8004d5c:	4b0e      	ldr	r3, [pc, #56]	; (8004d98 <USB_DevInit+0x2d4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f043 0208 	orr.w	r2, r3, #8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <USB_DevInit+0x2d8>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d94:	b004      	add	sp, #16
 8004d96:	4770      	bx	lr
 8004d98:	803c3800 	.word	0x803c3800
 8004d9c:	40000004 	.word	0x40000004

08004da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	f043 0220 	orr.w	r2, r3, #32
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <USB_FlushTxFifo+0x48>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e006      	b.n	8004dda <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d0f0      	beq.n	8004dba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	00030d40 	.word	0x00030d40

08004dec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3301      	adds	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <USB_FlushRxFifo+0x40>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e006      	b.n	8004e1e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d0f0      	beq.n	8004dfe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	00030d40 	.word	0x00030d40

08004e30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e7c:	f023 0303 	bic.w	r3, r3, #3
 8004e80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e90:	f043 0302 	orr.w	r3, r3, #2
 8004e94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a13      	ldr	r2, [pc, #76]	; (8004f08 <USB_CoreReset+0x64>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e01b      	b.n	8004efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	daf2      	bge.n	8004eb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f043 0201 	orr.w	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3301      	adds	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <USB_CoreReset+0x64>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d901      	bls.n	8004eec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e006      	b.n	8004efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d0f0      	beq.n	8004eda <USB_CoreReset+0x36>

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	00030d40 	.word	0x00030d40

08004f0c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004f12:	f000 fc09 	bl	8005728 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004f16:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <MX_LWIP_Init+0x70>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004f1c:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <MX_LWIP_Init+0x74>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004f22:	4b18      	ldr	r3, [pc, #96]	; (8004f84 <MX_LWIP_Init+0x78>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004f28:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <MX_LWIP_Init+0x7c>)
 8004f2a:	9302      	str	r3, [sp, #8]
 8004f2c:	4b17      	ldr	r3, [pc, #92]	; (8004f8c <MX_LWIP_Init+0x80>)
 8004f2e:	9301      	str	r3, [sp, #4]
 8004f30:	2300      	movs	r3, #0
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <MX_LWIP_Init+0x78>)
 8004f36:	4a12      	ldr	r2, [pc, #72]	; (8004f80 <MX_LWIP_Init+0x74>)
 8004f38:	4910      	ldr	r1, [pc, #64]	; (8004f7c <MX_LWIP_Init+0x70>)
 8004f3a:	4815      	ldr	r0, [pc, #84]	; (8004f90 <MX_LWIP_Init+0x84>)
 8004f3c:	f001 f89a 	bl	8006074 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004f40:	4813      	ldr	r0, [pc, #76]	; (8004f90 <MX_LWIP_Init+0x84>)
 8004f42:	f001 fa51 	bl	80063e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004f46:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <MX_LWIP_Init+0x84>)
 8004f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004f58:	480d      	ldr	r0, [pc, #52]	; (8004f90 <MX_LWIP_Init+0x84>)
 8004f5a:	f001 fa55 	bl	8006408 <netif_set_up>
 8004f5e:	e002      	b.n	8004f66 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004f60:	480b      	ldr	r0, [pc, #44]	; (8004f90 <MX_LWIP_Init+0x84>)
 8004f62:	f001 fabd 	bl	80064e0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004f66:	490b      	ldr	r1, [pc, #44]	; (8004f94 <MX_LWIP_Init+0x88>)
 8004f68:	4809      	ldr	r0, [pc, #36]	; (8004f90 <MX_LWIP_Init+0x84>)
 8004f6a:	f001 faeb 	bl	8006544 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004f6e:	4808      	ldr	r0, [pc, #32]	; (8004f90 <MX_LWIP_Init+0x84>)
 8004f70:	f008 fbea 	bl	800d748 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000798 	.word	0x20000798
 8004f80:	2000079c 	.word	0x2000079c
 8004f84:	200007a0 	.word	0x200007a0
 8004f88:	080111fd 	.word	0x080111fd
 8004f8c:	08005549 	.word	0x08005549
 8004f90:	2000075c 	.word	0x2000075c
 8004f94:	080055c1 	.word	0x080055c1

08004f98 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08e      	sub	sp, #56	; 0x38
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a4e      	ldr	r2, [pc, #312]	; (80050f0 <HAL_ETH_MspInit+0x158>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	f040 8096 	bne.w	80050e8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004fbc:	4b4d      	ldr	r3, [pc, #308]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	4a4c      	ldr	r2, [pc, #304]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8004fc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc8:	4b4a      	ldr	r3, [pc, #296]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	4b47      	ldr	r3, [pc, #284]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	4a46      	ldr	r2, [pc, #280]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8004fda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fde:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe0:	4b44      	ldr	r3, [pc, #272]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4b41      	ldr	r3, [pc, #260]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	4a40      	ldr	r2, [pc, #256]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8004ff2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff8:	4b3e      	ldr	r3, [pc, #248]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005000:	61bb      	str	r3, [r7, #24]
 8005002:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005004:	4b3b      	ldr	r3, [pc, #236]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	4a3a      	ldr	r2, [pc, #232]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 800500a:	f043 0304 	orr.w	r3, r3, #4
 800500e:	6313      	str	r3, [r2, #48]	; 0x30
 8005010:	4b38      	ldr	r3, [pc, #224]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800501c:	4b35      	ldr	r3, [pc, #212]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	4a34      	ldr	r2, [pc, #208]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	6313      	str	r3, [r2, #48]	; 0x30
 8005028:	4b32      	ldr	r3, [pc, #200]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005034:	4b2f      	ldr	r3, [pc, #188]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	4a2e      	ldr	r2, [pc, #184]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 800503a:	f043 0302 	orr.w	r3, r3, #2
 800503e:	6313      	str	r3, [r2, #48]	; 0x30
 8005040:	4b2c      	ldr	r3, [pc, #176]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800504c:	4b29      	ldr	r3, [pc, #164]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	4a28      	ldr	r2, [pc, #160]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 8005052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005056:	6313      	str	r3, [r2, #48]	; 0x30
 8005058:	4b26      	ldr	r3, [pc, #152]	; (80050f4 <HAL_ETH_MspInit+0x15c>)
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005064:	2332      	movs	r3, #50	; 0x32
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005068:	2302      	movs	r3, #2
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	2300      	movs	r3, #0
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005070:	2303      	movs	r3, #3
 8005072:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005074:	230b      	movs	r3, #11
 8005076:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800507c:	4619      	mov	r1, r3
 800507e:	481e      	ldr	r0, [pc, #120]	; (80050f8 <HAL_ETH_MspInit+0x160>)
 8005080:	f7fd fa6a 	bl	8002558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005084:	2386      	movs	r3, #134	; 0x86
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005088:	2302      	movs	r3, #2
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005090:	2303      	movs	r3, #3
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005094:	230b      	movs	r3, #11
 8005096:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800509c:	4619      	mov	r1, r3
 800509e:	4817      	ldr	r0, [pc, #92]	; (80050fc <HAL_ETH_MspInit+0x164>)
 80050a0:	f7fd fa5a 	bl	8002558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80050a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050aa:	2302      	movs	r3, #2
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b2:	2303      	movs	r3, #3
 80050b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050b6:	230b      	movs	r3, #11
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80050ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050be:	4619      	mov	r1, r3
 80050c0:	480f      	ldr	r0, [pc, #60]	; (8005100 <HAL_ETH_MspInit+0x168>)
 80050c2:	f7fd fa49 	bl	8002558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80050c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050cc:	2302      	movs	r3, #2
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d4:	2303      	movs	r3, #3
 80050d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050d8:	230b      	movs	r3, #11
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80050dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050e0:	4619      	mov	r1, r3
 80050e2:	4808      	ldr	r0, [pc, #32]	; (8005104 <HAL_ETH_MspInit+0x16c>)
 80050e4:	f7fd fa38 	bl	8002558 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80050e8:	bf00      	nop
 80050ea:	3738      	adds	r7, #56	; 0x38
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40028000 	.word	0x40028000
 80050f4:	40023800 	.word	0x40023800
 80050f8:	40020800 	.word	0x40020800
 80050fc:	40020000 	.word	0x40020000
 8005100:	40020400 	.word	0x40020400
 8005104:	40021800 	.word	0x40021800

08005108 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005114:	4b4d      	ldr	r3, [pc, #308]	; (800524c <low_level_init+0x144>)
 8005116:	4a4e      	ldr	r2, [pc, #312]	; (8005250 <low_level_init+0x148>)
 8005118:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800511a:	4b4c      	ldr	r3, [pc, #304]	; (800524c <low_level_init+0x144>)
 800511c:	2201      	movs	r2, #1
 800511e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005120:	4b4a      	ldr	r3, [pc, #296]	; (800524c <low_level_init+0x144>)
 8005122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005126:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005128:	4b48      	ldr	r3, [pc, #288]	; (800524c <low_level_init+0x144>)
 800512a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800512e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005130:	4b46      	ldr	r3, [pc, #280]	; (800524c <low_level_init+0x144>)
 8005132:	2200      	movs	r2, #0
 8005134:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005136:	2300      	movs	r3, #0
 8005138:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800513a:	2380      	movs	r3, #128	; 0x80
 800513c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800513e:	23e1      	movs	r3, #225	; 0xe1
 8005140:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005142:	2300      	movs	r3, #0
 8005144:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005146:	2300      	movs	r3, #0
 8005148:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800514a:	2300      	movs	r3, #0
 800514c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800514e:	4a3f      	ldr	r2, [pc, #252]	; (800524c <low_level_init+0x144>)
 8005150:	f107 0308 	add.w	r3, r7, #8
 8005154:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005156:	4b3d      	ldr	r3, [pc, #244]	; (800524c <low_level_init+0x144>)
 8005158:	2200      	movs	r2, #0
 800515a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800515c:	4b3b      	ldr	r3, [pc, #236]	; (800524c <low_level_init+0x144>)
 800515e:	2200      	movs	r2, #0
 8005160:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005162:	4b3a      	ldr	r3, [pc, #232]	; (800524c <low_level_init+0x144>)
 8005164:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005168:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800516a:	4838      	ldr	r0, [pc, #224]	; (800524c <low_level_init+0x144>)
 800516c:	f7fc f8f0 	bl	8001350 <HAL_ETH_Init>
 8005170:	4603      	mov	r3, r0
 8005172:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d108      	bne.n	800518c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005180:	f043 0304 	orr.w	r3, r3, #4
 8005184:	b2da      	uxtb	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800518c:	2304      	movs	r3, #4
 800518e:	4a31      	ldr	r2, [pc, #196]	; (8005254 <low_level_init+0x14c>)
 8005190:	4931      	ldr	r1, [pc, #196]	; (8005258 <low_level_init+0x150>)
 8005192:	482e      	ldr	r0, [pc, #184]	; (800524c <low_level_init+0x144>)
 8005194:	f7fc fa76 	bl	8001684 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005198:	2304      	movs	r3, #4
 800519a:	4a30      	ldr	r2, [pc, #192]	; (800525c <low_level_init+0x154>)
 800519c:	4930      	ldr	r1, [pc, #192]	; (8005260 <low_level_init+0x158>)
 800519e:	482b      	ldr	r0, [pc, #172]	; (800524c <low_level_init+0x144>)
 80051a0:	f7fc fad9 	bl	8001756 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2206      	movs	r2, #6
 80051a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80051ac:	4b27      	ldr	r3, [pc, #156]	; (800524c <low_level_init+0x144>)
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	781a      	ldrb	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80051b8:	4b24      	ldr	r3, [pc, #144]	; (800524c <low_level_init+0x144>)
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	785a      	ldrb	r2, [r3, #1]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80051c4:	4b21      	ldr	r3, [pc, #132]	; (800524c <low_level_init+0x144>)
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	789a      	ldrb	r2, [r3, #2]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80051d0:	4b1e      	ldr	r3, [pc, #120]	; (800524c <low_level_init+0x144>)
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	78da      	ldrb	r2, [r3, #3]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80051dc:	4b1b      	ldr	r3, [pc, #108]	; (800524c <low_level_init+0x144>)
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	791a      	ldrb	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80051e8:	4b18      	ldr	r3, [pc, #96]	; (800524c <low_level_init+0x144>)
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	795a      	ldrb	r2, [r3, #5]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* maximum transfer unit */
  netif->mtu = 1500;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80051fa:	859a      	strh	r2, [r3, #44]	; 0x2c

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005202:	f043 030a 	orr.w	r3, r3, #10
 8005206:	b2da      	uxtb	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800520e:	480f      	ldr	r0, [pc, #60]	; (800524c <low_level_init+0x144>)
 8005210:	f7fc fd4a 	bl	8001ca8 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005214:	f107 0310 	add.w	r3, r7, #16
 8005218:	461a      	mov	r2, r3
 800521a:	211d      	movs	r1, #29
 800521c:	480b      	ldr	r0, [pc, #44]	; (800524c <low_level_init+0x144>)
 800521e:	f7fc fc75 	bl	8001b0c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f043 030b 	orr.w	r3, r3, #11
 8005228:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	461a      	mov	r2, r3
 800522e:	211d      	movs	r1, #29
 8005230:	4806      	ldr	r0, [pc, #24]	; (800524c <low_level_init+0x144>)
 8005232:	f7fc fcd3 	bl	8001bdc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005236:	f107 0310 	add.w	r3, r7, #16
 800523a:	461a      	mov	r2, r3
 800523c:	211d      	movs	r1, #29
 800523e:	4803      	ldr	r0, [pc, #12]	; (800524c <low_level_init+0x144>)
 8005240:	f7fc fc64 	bl	8001b0c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005244:	bf00      	nop
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20002074 	.word	0x20002074
 8005250:	40028000 	.word	0x40028000
 8005254:	200020bc 	.word	0x200020bc
 8005258:	200007a4 	.word	0x200007a4
 800525c:	20000824 	.word	0x20000824
 8005260:	20001ff4 	.word	0x20001ff4

08005264 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	; 0x28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800526e:	4b4b      	ldr	r3, [pc, #300]	; (800539c <low_level_output+0x138>)
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005286:	4b45      	ldr	r3, [pc, #276]	; (800539c <low_level_output+0x138>)
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	623b      	str	r3, [r7, #32]
 8005294:	e05a      	b.n	800534c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	da03      	bge.n	80052a6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800529e:	23f8      	movs	r3, #248	; 0xf8
 80052a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80052a4:	e05c      	b.n	8005360 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	895b      	ldrh	r3, [r3, #10]
 80052aa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80052b0:	e02f      	b.n	8005312 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	18d0      	adds	r0, r2, r3
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	18d1      	adds	r1, r2, r3
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80052c6:	1a9b      	subs	r3, r3, r2
 80052c8:	461a      	mov	r2, r3
 80052ca:	f00c f89f 	bl	801140c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	da03      	bge.n	80052e4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80052dc:	23f8      	movs	r3, #248	; 0xf8
 80052de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80052e2:	e03d      	b.n	8005360 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80052f4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005300:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800530c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800530e:	2300      	movs	r3, #0
 8005310:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4413      	add	r3, r2
 8005318:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800531c:	4293      	cmp	r3, r2
 800531e:	d8c8      	bhi.n	80052b2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	18d0      	adds	r0, r2, r3
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4413      	add	r3, r2
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4619      	mov	r1, r3
 8005332:	f00c f86b 	bl	801140c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	623b      	str	r3, [r7, #32]
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1a1      	bne.n	8005296 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005352:	6979      	ldr	r1, [r7, #20]
 8005354:	4811      	ldr	r0, [pc, #68]	; (800539c <low_level_output+0x138>)
 8005356:	f7fc fa6b 	bl	8001830 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005360:	4b0e      	ldr	r3, [pc, #56]	; (800539c <low_level_output+0x138>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	f241 0314 	movw	r3, #4116	; 0x1014
 8005368:	4413      	add	r3, r2
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00d      	beq.n	8005390 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005374:	4b09      	ldr	r3, [pc, #36]	; (800539c <low_level_output+0x138>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	f241 0314 	movw	r3, #4116	; 0x1014
 800537c:	4413      	add	r3, r2
 800537e:	2220      	movs	r2, #32
 8005380:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005382:	4b06      	ldr	r3, [pc, #24]	; (800539c <low_level_output+0x138>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	f241 0304 	movw	r3, #4100	; 0x1004
 800538a:	4413      	add	r3, r2
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005390:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005394:	4618      	mov	r0, r3
 8005396:	3728      	adds	r7, #40	; 0x28
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20002074 	.word	0x20002074

080053a0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08c      	sub	sp, #48	; 0x30
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80053bc:	2300      	movs	r3, #0
 80053be:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80053c4:	484f      	ldr	r0, [pc, #316]	; (8005504 <low_level_input+0x164>)
 80053c6:	f7fc fb1d 	bl	8001a04 <HAL_ETH_GetReceivedFrame>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <low_level_input+0x34>

    return NULL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	e092      	b.n	80054fa <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80053d4:	4b4b      	ldr	r3, [pc, #300]	; (8005504 <low_level_input+0x164>)
 80053d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80053da:	4b4a      	ldr	r3, [pc, #296]	; (8005504 <low_level_input+0x164>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80053e0:	89fb      	ldrh	r3, [r7, #14]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d007      	beq.n	80053f6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80053e6:	89fb      	ldrh	r3, [r7, #14]
 80053e8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80053ec:	4619      	mov	r1, r3
 80053ee:	2000      	movs	r0, #0
 80053f0:	f001 f944 	bl	800667c <pbuf_alloc>
 80053f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d04b      	beq.n	8005494 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80053fc:	4b41      	ldr	r3, [pc, #260]	; (8005504 <low_level_input+0x164>)
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	62bb      	str	r3, [r7, #40]	; 0x28
 800540a:	e040      	b.n	800548e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	895b      	ldrh	r3, [r3, #10]
 8005410:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005416:	e021      	b.n	800545c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	18d0      	adds	r0, r2, r3
 8005420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	18d1      	adds	r1, r2, r3
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	461a      	mov	r2, r3
 8005430:	f00b ffec 	bl	801140c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	4413      	add	r3, r2
 8005446:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800544a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005456:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005466:	4293      	cmp	r3, r2
 8005468:	d8d6      	bhi.n	8005418 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	18d0      	adds	r0, r2, r3
 8005472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4619      	mov	r1, r3
 800547c:	f00b ffc6 	bl	801140c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	4413      	add	r3, r2
 8005486:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	62bb      	str	r3, [r7, #40]	; 0x28
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1bb      	bne.n	800540c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005494:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <low_level_input+0x164>)
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800549a:	2300      	movs	r3, #0
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	e00b      	b.n	80054b8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	3301      	adds	r3, #1
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	4b12      	ldr	r3, [pc, #72]	; (8005504 <low_level_input+0x164>)
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d3ee      	bcc.n	80054a0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80054c2:	4b10      	ldr	r3, [pc, #64]	; (8005504 <low_level_input+0x164>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80054c8:	4b0e      	ldr	r3, [pc, #56]	; (8005504 <low_level_input+0x164>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	f241 0314 	movw	r3, #4116	; 0x1014
 80054d0:	4413      	add	r3, r2
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <low_level_input+0x164>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	f241 0314 	movw	r3, #4116	; 0x1014
 80054e4:	4413      	add	r3, r2
 80054e6:	2280      	movs	r2, #128	; 0x80
 80054e8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80054ea:	4b06      	ldr	r3, [pc, #24]	; (8005504 <low_level_input+0x164>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	f241 0308 	movw	r3, #4104	; 0x1008
 80054f2:	4413      	add	r3, r2
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3730      	adds	r7, #48	; 0x30
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20002074 	.word	0x20002074

08005508 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7ff ff45 	bl	80053a0 <low_level_input>
 8005516:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d010      	beq.n	8005540 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	4798      	blx	r3
 8005528:	4603      	mov	r3, r0
 800552a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800552c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f001 fb85 	bl	8006c44 <pbuf_free>
    p = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	e000      	b.n	8005542 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005540:	bf00      	nop
  }
}
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <ethernetif_init+0x1c>
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <ethernetif_init+0x50>)
 8005558:	f240 2211 	movw	r2, #529	; 0x211
 800555c:	490f      	ldr	r1, [pc, #60]	; (800559c <ethernetif_init+0x54>)
 800555e:	4810      	ldr	r0, [pc, #64]	; (80055a0 <ethernetif_init+0x58>)
 8005560:	f00b ff6a 	bl	8011438 <iprintf>

#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a0f      	ldr	r2, [pc, #60]	; (80055a4 <ethernetif_init+0x5c>)
 8005568:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2273      	movs	r2, #115	; 0x73
 800556e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  netif->name[1] = IFNAME1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2274      	movs	r2, #116	; 0x74
 8005576:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <ethernetif_init+0x60>)
 800557e:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <ethernetif_init+0x64>)
 8005584:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff fdbe 	bl	8005108 <low_level_init>

  return ERR_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	0801248c 	.word	0x0801248c
 800559c:	080124a8 	.word	0x080124a8
 80055a0:	080124b8 	.word	0x080124b8
 80055a4:	080124e0 	.word	0x080124e0
 80055a8:	0800f685 	.word	0x0800f685
 80055ac:	08005265 	.word	0x08005265

080055b0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80055b4:	f7fb fdb6 	bl	8001124 <HAL_GetTick>
 80055b8:	4603      	mov	r3, r0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055d6:	089b      	lsrs	r3, r3, #2
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d05d      	beq.n	800569e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80055e2:	4b34      	ldr	r3, [pc, #208]	; (80056b4 <ethernetif_update_config+0xf4>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d03f      	beq.n	800566a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80055ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055ee:	2100      	movs	r1, #0
 80055f0:	4830      	ldr	r0, [pc, #192]	; (80056b4 <ethernetif_update_config+0xf4>)
 80055f2:	f7fc faf3 	bl	8001bdc <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80055f6:	f7fb fd95 	bl	8001124 <HAL_GetTick>
 80055fa:	4603      	mov	r3, r0
 80055fc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80055fe:	f107 0308 	add.w	r3, r7, #8
 8005602:	461a      	mov	r2, r3
 8005604:	2101      	movs	r1, #1
 8005606:	482b      	ldr	r0, [pc, #172]	; (80056b4 <ethernetif_update_config+0xf4>)
 8005608:	f7fc fa80 	bl	8001b0c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800560c:	f7fb fd8a 	bl	8001124 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800561a:	d828      	bhi.n	800566e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0eb      	beq.n	80055fe <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005626:	f107 0308 	add.w	r3, r7, #8
 800562a:	461a      	mov	r2, r3
 800562c:	2110      	movs	r1, #16
 800562e:	4821      	ldr	r0, [pc, #132]	; (80056b4 <ethernetif_update_config+0xf4>)
 8005630:	f7fc fa6c 	bl	8001b0c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <ethernetif_update_config+0xf4>)
 8005640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005644:	60da      	str	r2, [r3, #12]
 8005646:	e002      	b.n	800564e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005648:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <ethernetif_update_config+0xf4>)
 800564a:	2200      	movs	r2, #0
 800564c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005658:	4b16      	ldr	r3, [pc, #88]	; (80056b4 <ethernetif_update_config+0xf4>)
 800565a:	2200      	movs	r2, #0
 800565c:	609a      	str	r2, [r3, #8]
 800565e:	e016      	b.n	800568e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005660:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <ethernetif_update_config+0xf4>)
 8005662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005666:	609a      	str	r2, [r3, #8]
 8005668:	e011      	b.n	800568e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800566a:	bf00      	nop
 800566c:	e000      	b.n	8005670 <ethernetif_update_config+0xb0>
          goto error;
 800566e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005670:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <ethernetif_update_config+0xf4>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	08db      	lsrs	r3, r3, #3
 8005676:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005678:	4b0e      	ldr	r3, [pc, #56]	; (80056b4 <ethernetif_update_config+0xf4>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	085b      	lsrs	r3, r3, #1
 800567e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005680:	4313      	orrs	r3, r2
 8005682:	b29b      	uxth	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	2100      	movs	r1, #0
 8005688:	480a      	ldr	r0, [pc, #40]	; (80056b4 <ethernetif_update_config+0xf4>)
 800568a:	f7fc faa7 	bl	8001bdc <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800568e:	2100      	movs	r1, #0
 8005690:	4808      	ldr	r0, [pc, #32]	; (80056b4 <ethernetif_update_config+0xf4>)
 8005692:	f7fc fb67 	bl	8001d64 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005696:	4807      	ldr	r0, [pc, #28]	; (80056b4 <ethernetif_update_config+0xf4>)
 8005698:	f7fc fb06 	bl	8001ca8 <HAL_ETH_Start>
 800569c:	e002      	b.n	80056a4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800569e:	4805      	ldr	r0, [pc, #20]	; (80056b4 <ethernetif_update_config+0xf4>)
 80056a0:	f7fc fb31 	bl	8001d06 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f807 	bl	80056b8 <ethernetif_notify_conn_changed>
}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20002074 	.word	0x20002074

080056b8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80056d6:	88fb      	ldrh	r3, [r7, #6]
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	b21a      	sxth	r2, r3
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	b21b      	sxth	r3, r3
 80056e4:	4313      	orrs	r3, r2
 80056e6:	b21b      	sxth	r3, r3
 80056e8:	b29b      	uxth	r3, r3
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	061a      	lsls	r2, r3, #24
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	0a1b      	lsrs	r3, r3, #8
 8005710:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	0e1b      	lsrs	r3, r3, #24
 800571a:	4313      	orrs	r3, r2
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005732:	f000 f8d5 	bl	80058e0 <mem_init>
  memp_init();
 8005736:	f000 fbdb 	bl	8005ef0 <memp_init>
  pbuf_init();
  netif_init();
 800573a:	f000 fc93 	bl	8006064 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800573e:	f006 ffc1 	bl	800c6c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005742:	f001 fd1d 	bl	8007180 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005746:	f006 ff33 	bl	800c5b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800574a:	bf00      	nop
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800575e:	4b05      	ldr	r3, [pc, #20]	; (8005774 <ptr_to_mem+0x20>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	4413      	add	r3, r2
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	2000009c 	.word	0x2000009c

08005778 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005780:	4b05      	ldr	r3, [pc, #20]	; (8005798 <mem_to_ptr+0x20>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	b29b      	uxth	r3, r3
}
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	2000009c 	.word	0x2000009c

0800579c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800579c:	b590      	push	{r4, r7, lr}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80057a4:	4b45      	ldr	r3, [pc, #276]	; (80058bc <plug_holes+0x120>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d206      	bcs.n	80057bc <plug_holes+0x20>
 80057ae:	4b44      	ldr	r3, [pc, #272]	; (80058c0 <plug_holes+0x124>)
 80057b0:	f240 12df 	movw	r2, #479	; 0x1df
 80057b4:	4943      	ldr	r1, [pc, #268]	; (80058c4 <plug_holes+0x128>)
 80057b6:	4844      	ldr	r0, [pc, #272]	; (80058c8 <plug_holes+0x12c>)
 80057b8:	f00b fe3e 	bl	8011438 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80057bc:	4b43      	ldr	r3, [pc, #268]	; (80058cc <plug_holes+0x130>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d306      	bcc.n	80057d4 <plug_holes+0x38>
 80057c6:	4b3e      	ldr	r3, [pc, #248]	; (80058c0 <plug_holes+0x124>)
 80057c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80057cc:	4940      	ldr	r1, [pc, #256]	; (80058d0 <plug_holes+0x134>)
 80057ce:	483e      	ldr	r0, [pc, #248]	; (80058c8 <plug_holes+0x12c>)
 80057d0:	f00b fe32 	bl	8011438 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	791b      	ldrb	r3, [r3, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d006      	beq.n	80057ea <plug_holes+0x4e>
 80057dc:	4b38      	ldr	r3, [pc, #224]	; (80058c0 <plug_holes+0x124>)
 80057de:	f240 12e1 	movw	r2, #481	; 0x1e1
 80057e2:	493c      	ldr	r1, [pc, #240]	; (80058d4 <plug_holes+0x138>)
 80057e4:	4838      	ldr	r0, [pc, #224]	; (80058c8 <plug_holes+0x12c>)
 80057e6:	f00b fe27 	bl	8011438 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057f2:	d906      	bls.n	8005802 <plug_holes+0x66>
 80057f4:	4b32      	ldr	r3, [pc, #200]	; (80058c0 <plug_holes+0x124>)
 80057f6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80057fa:	4937      	ldr	r1, [pc, #220]	; (80058d8 <plug_holes+0x13c>)
 80057fc:	4832      	ldr	r0, [pc, #200]	; (80058c8 <plug_holes+0x12c>)
 80057fe:	f00b fe1b 	bl	8011438 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff ffa4 	bl	8005754 <ptr_to_mem>
 800580c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	429a      	cmp	r2, r3
 8005814:	d024      	beq.n	8005860 <plug_holes+0xc4>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	791b      	ldrb	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d120      	bne.n	8005860 <plug_holes+0xc4>
 800581e:	4b2b      	ldr	r3, [pc, #172]	; (80058cc <plug_holes+0x130>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	429a      	cmp	r2, r3
 8005826:	d01b      	beq.n	8005860 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005828:	4b2c      	ldr	r3, [pc, #176]	; (80058dc <plug_holes+0x140>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	429a      	cmp	r2, r3
 8005830:	d102      	bne.n	8005838 <plug_holes+0x9c>
      lfree = mem;
 8005832:	4a2a      	ldr	r2, [pc, #168]	; (80058dc <plug_holes+0x140>)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	881a      	ldrh	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005848:	d00a      	beq.n	8005860 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff ff80 	bl	8005754 <ptr_to_mem>
 8005854:	4604      	mov	r4, r0
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff ff8e 	bl	8005778 <mem_to_ptr>
 800585c:	4603      	mov	r3, r0
 800585e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	885b      	ldrh	r3, [r3, #2]
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff ff75 	bl	8005754 <ptr_to_mem>
 800586a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	d01f      	beq.n	80058b4 <plug_holes+0x118>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	791b      	ldrb	r3, [r3, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11b      	bne.n	80058b4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800587c:	4b17      	ldr	r3, [pc, #92]	; (80058dc <plug_holes+0x140>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	429a      	cmp	r2, r3
 8005884:	d102      	bne.n	800588c <plug_holes+0xf0>
      lfree = pmem;
 8005886:	4a15      	ldr	r2, [pc, #84]	; (80058dc <plug_holes+0x140>)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	881a      	ldrh	r2, [r3, #0]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800589c:	d00a      	beq.n	80058b4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff ff56 	bl	8005754 <ptr_to_mem>
 80058a8:	4604      	mov	r4, r0
 80058aa:	68b8      	ldr	r0, [r7, #8]
 80058ac:	f7ff ff64 	bl	8005778 <mem_to_ptr>
 80058b0:	4603      	mov	r3, r0
 80058b2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80058b4:	bf00      	nop
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd90      	pop	{r4, r7, pc}
 80058bc:	2000009c 	.word	0x2000009c
 80058c0:	080124e8 	.word	0x080124e8
 80058c4:	08012518 	.word	0x08012518
 80058c8:	08012530 	.word	0x08012530
 80058cc:	200000a0 	.word	0x200000a0
 80058d0:	08012558 	.word	0x08012558
 80058d4:	08012574 	.word	0x08012574
 80058d8:	08012590 	.word	0x08012590
 80058dc:	200000a4 	.word	0x200000a4

080058e0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80058e6:	4b18      	ldr	r3, [pc, #96]	; (8005948 <mem_init+0x68>)
 80058e8:	3303      	adds	r3, #3
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	461a      	mov	r2, r3
 80058f0:	4b16      	ldr	r3, [pc, #88]	; (800594c <mem_init+0x6c>)
 80058f2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80058f4:	4b15      	ldr	r3, [pc, #84]	; (800594c <mem_init+0x6c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005900:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800590e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005912:	f7ff ff1f 	bl	8005754 <ptr_to_mem>
 8005916:	4603      	mov	r3, r0
 8005918:	4a0d      	ldr	r2, [pc, #52]	; (8005950 <mem_init+0x70>)
 800591a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800591c:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <mem_init+0x70>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <mem_init+0x70>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800592c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800592e:	4b08      	ldr	r3, [pc, #32]	; (8005950 <mem_init+0x70>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005936:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <mem_init+0x6c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a05      	ldr	r2, [pc, #20]	; (8005954 <mem_init+0x74>)
 800593e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	200038a4 	.word	0x200038a4
 800594c:	2000009c 	.word	0x2000009c
 8005950:	200000a0 	.word	0x200000a0
 8005954:	200000a4 	.word	0x200000a4

08005958 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff ff09 	bl	8005778 <mem_to_ptr>
 8005966:	4603      	mov	r3, r0
 8005968:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fef0 	bl	8005754 <ptr_to_mem>
 8005974:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	885b      	ldrh	r3, [r3, #2]
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff feea 	bl	8005754 <ptr_to_mem>
 8005980:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800598a:	d818      	bhi.n	80059be <mem_link_valid+0x66>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	885b      	ldrh	r3, [r3, #2]
 8005990:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005994:	d813      	bhi.n	80059be <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800599a:	8afa      	ldrh	r2, [r7, #22]
 800599c:	429a      	cmp	r2, r3
 800599e:	d004      	beq.n	80059aa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	8afa      	ldrh	r2, [r7, #22]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d109      	bne.n	80059be <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80059aa:	4b08      	ldr	r3, [pc, #32]	; (80059cc <mem_link_valid+0x74>)
 80059ac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d006      	beq.n	80059c2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	885b      	ldrh	r3, [r3, #2]
 80059b8:	8afa      	ldrh	r2, [r7, #22]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d001      	beq.n	80059c2 <mem_link_valid+0x6a>
    return 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	e000      	b.n	80059c4 <mem_link_valid+0x6c>
  }
  return 1;
 80059c2:	2301      	movs	r3, #1
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	200000a0 	.word	0x200000a0

080059d0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d04c      	beq.n	8005a78 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80059e8:	4b25      	ldr	r3, [pc, #148]	; (8005a80 <mem_free+0xb0>)
 80059ea:	f240 2273 	movw	r2, #627	; 0x273
 80059ee:	4925      	ldr	r1, [pc, #148]	; (8005a84 <mem_free+0xb4>)
 80059f0:	4825      	ldr	r0, [pc, #148]	; (8005a88 <mem_free+0xb8>)
 80059f2:	f00b fd21 	bl	8011438 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80059f6:	e040      	b.n	8005a7a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3b08      	subs	r3, #8
 80059fc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80059fe:	4b23      	ldr	r3, [pc, #140]	; (8005a8c <mem_free+0xbc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d306      	bcc.n	8005a16 <mem_free+0x46>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f103 020c 	add.w	r2, r3, #12
 8005a0e:	4b20      	ldr	r3, [pc, #128]	; (8005a90 <mem_free+0xc0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d907      	bls.n	8005a26 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005a16:	4b1a      	ldr	r3, [pc, #104]	; (8005a80 <mem_free+0xb0>)
 8005a18:	f240 227f 	movw	r2, #639	; 0x27f
 8005a1c:	491d      	ldr	r1, [pc, #116]	; (8005a94 <mem_free+0xc4>)
 8005a1e:	481a      	ldr	r0, [pc, #104]	; (8005a88 <mem_free+0xb8>)
 8005a20:	f00b fd0a 	bl	8011438 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a24:	e029      	b.n	8005a7a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	791b      	ldrb	r3, [r3, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d107      	bne.n	8005a3e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005a2e:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <mem_free+0xb0>)
 8005a30:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005a34:	4918      	ldr	r1, [pc, #96]	; (8005a98 <mem_free+0xc8>)
 8005a36:	4814      	ldr	r0, [pc, #80]	; (8005a88 <mem_free+0xb8>)
 8005a38:	f00b fcfe 	bl	8011438 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a3c:	e01d      	b.n	8005a7a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f7ff ff8a 	bl	8005958 <mem_link_valid>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d107      	bne.n	8005a5a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <mem_free+0xb0>)
 8005a4c:	f240 2295 	movw	r2, #661	; 0x295
 8005a50:	4912      	ldr	r1, [pc, #72]	; (8005a9c <mem_free+0xcc>)
 8005a52:	480d      	ldr	r0, [pc, #52]	; (8005a88 <mem_free+0xb8>)
 8005a54:	f00b fcf0 	bl	8011438 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a58:	e00f      	b.n	8005a7a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005a60:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <mem_free+0xd0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d202      	bcs.n	8005a70 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005a6a:	4a0d      	ldr	r2, [pc, #52]	; (8005aa0 <mem_free+0xd0>)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff fe93 	bl	800579c <plug_holes>
 8005a76:	e000      	b.n	8005a7a <mem_free+0xaa>
    return;
 8005a78:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	080124e8 	.word	0x080124e8
 8005a84:	080125bc 	.word	0x080125bc
 8005a88:	08012530 	.word	0x08012530
 8005a8c:	2000009c 	.word	0x2000009c
 8005a90:	200000a0 	.word	0x200000a0
 8005a94:	080125e0 	.word	0x080125e0
 8005a98:	080125fc 	.word	0x080125fc
 8005a9c:	08012624 	.word	0x08012624
 8005aa0:	200000a4 	.word	0x200000a4

08005aa4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005ab0:	887b      	ldrh	r3, [r7, #2]
 8005ab2:	3303      	adds	r3, #3
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005abc:	8bfb      	ldrh	r3, [r7, #30]
 8005abe:	2b0b      	cmp	r3, #11
 8005ac0:	d801      	bhi.n	8005ac6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005ac2:	230c      	movs	r3, #12
 8005ac4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005ac6:	8bfb      	ldrh	r3, [r7, #30]
 8005ac8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005acc:	d803      	bhi.n	8005ad6 <mem_trim+0x32>
 8005ace:	8bfa      	ldrh	r2, [r7, #30]
 8005ad0:	887b      	ldrh	r3, [r7, #2]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d201      	bcs.n	8005ada <mem_trim+0x36>
    return NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e0cc      	b.n	8005c74 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005ada:	4b68      	ldr	r3, [pc, #416]	; (8005c7c <mem_trim+0x1d8>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d304      	bcc.n	8005aee <mem_trim+0x4a>
 8005ae4:	4b66      	ldr	r3, [pc, #408]	; (8005c80 <mem_trim+0x1dc>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d306      	bcc.n	8005afc <mem_trim+0x58>
 8005aee:	4b65      	ldr	r3, [pc, #404]	; (8005c84 <mem_trim+0x1e0>)
 8005af0:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005af4:	4964      	ldr	r1, [pc, #400]	; (8005c88 <mem_trim+0x1e4>)
 8005af6:	4865      	ldr	r0, [pc, #404]	; (8005c8c <mem_trim+0x1e8>)
 8005af8:	f00b fc9e 	bl	8011438 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005afc:	4b5f      	ldr	r3, [pc, #380]	; (8005c7c <mem_trim+0x1d8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d304      	bcc.n	8005b10 <mem_trim+0x6c>
 8005b06:	4b5e      	ldr	r3, [pc, #376]	; (8005c80 <mem_trim+0x1dc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d301      	bcc.n	8005b14 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	e0af      	b.n	8005c74 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3b08      	subs	r3, #8
 8005b18:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005b1a:	69b8      	ldr	r0, [r7, #24]
 8005b1c:	f7ff fe2c 	bl	8005778 <mem_to_ptr>
 8005b20:	4603      	mov	r3, r0
 8005b22:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	881a      	ldrh	r2, [r3, #0]
 8005b28:	8afb      	ldrh	r3, [r7, #22]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b08      	subs	r3, #8
 8005b30:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005b32:	8bfa      	ldrh	r2, [r7, #30]
 8005b34:	8abb      	ldrh	r3, [r7, #20]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d906      	bls.n	8005b48 <mem_trim+0xa4>
 8005b3a:	4b52      	ldr	r3, [pc, #328]	; (8005c84 <mem_trim+0x1e0>)
 8005b3c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005b40:	4953      	ldr	r1, [pc, #332]	; (8005c90 <mem_trim+0x1ec>)
 8005b42:	4852      	ldr	r0, [pc, #328]	; (8005c8c <mem_trim+0x1e8>)
 8005b44:	f00b fc78 	bl	8011438 <iprintf>
  if (newsize > size) {
 8005b48:	8bfa      	ldrh	r2, [r7, #30]
 8005b4a:	8abb      	ldrh	r3, [r7, #20]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d901      	bls.n	8005b54 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	e08f      	b.n	8005c74 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005b54:	8bfa      	ldrh	r2, [r7, #30]
 8005b56:	8abb      	ldrh	r3, [r7, #20]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d101      	bne.n	8005b60 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	e089      	b.n	8005c74 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff fdf5 	bl	8005754 <ptr_to_mem>
 8005b6a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	791b      	ldrb	r3, [r3, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d13f      	bne.n	8005bf4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b7c:	d106      	bne.n	8005b8c <mem_trim+0xe8>
 8005b7e:	4b41      	ldr	r3, [pc, #260]	; (8005c84 <mem_trim+0x1e0>)
 8005b80:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005b84:	4943      	ldr	r1, [pc, #268]	; (8005c94 <mem_trim+0x1f0>)
 8005b86:	4841      	ldr	r0, [pc, #260]	; (8005c8c <mem_trim+0x1e8>)
 8005b88:	f00b fc56 	bl	8011438 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005b92:	8afa      	ldrh	r2, [r7, #22]
 8005b94:	8bfb      	ldrh	r3, [r7, #30]
 8005b96:	4413      	add	r3, r2
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005b9e:	4b3e      	ldr	r3, [pc, #248]	; (8005c98 <mem_trim+0x1f4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d106      	bne.n	8005bb6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005ba8:	89fb      	ldrh	r3, [r7, #14]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff fdd2 	bl	8005754 <ptr_to_mem>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	4a39      	ldr	r2, [pc, #228]	; (8005c98 <mem_trim+0x1f4>)
 8005bb4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005bb6:	89fb      	ldrh	r3, [r7, #14]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff fdcb 	bl	8005754 <ptr_to_mem>
 8005bbe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	89ba      	ldrh	r2, [r7, #12]
 8005bca:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	8afa      	ldrh	r2, [r7, #22]
 8005bd0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	89fa      	ldrh	r2, [r7, #14]
 8005bd6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005be0:	d047      	beq.n	8005c72 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff fdb4 	bl	8005754 <ptr_to_mem>
 8005bec:	4602      	mov	r2, r0
 8005bee:	89fb      	ldrh	r3, [r7, #14]
 8005bf0:	8053      	strh	r3, [r2, #2]
 8005bf2:	e03e      	b.n	8005c72 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005bf4:	8bfb      	ldrh	r3, [r7, #30]
 8005bf6:	f103 0214 	add.w	r2, r3, #20
 8005bfa:	8abb      	ldrh	r3, [r7, #20]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d838      	bhi.n	8005c72 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005c00:	8afa      	ldrh	r2, [r7, #22]
 8005c02:	8bfb      	ldrh	r3, [r7, #30]
 8005c04:	4413      	add	r3, r2
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3308      	adds	r3, #8
 8005c0a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c14:	d106      	bne.n	8005c24 <mem_trim+0x180>
 8005c16:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <mem_trim+0x1e0>)
 8005c18:	f240 3216 	movw	r2, #790	; 0x316
 8005c1c:	491d      	ldr	r1, [pc, #116]	; (8005c94 <mem_trim+0x1f0>)
 8005c1e:	481b      	ldr	r0, [pc, #108]	; (8005c8c <mem_trim+0x1e8>)
 8005c20:	f00b fc0a 	bl	8011438 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005c24:	89fb      	ldrh	r3, [r7, #14]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff fd94 	bl	8005754 <ptr_to_mem>
 8005c2c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005c2e:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <mem_trim+0x1f4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d202      	bcs.n	8005c3e <mem_trim+0x19a>
      lfree = mem2;
 8005c38:	4a17      	ldr	r2, [pc, #92]	; (8005c98 <mem_trim+0x1f4>)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2200      	movs	r2, #0
 8005c42:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	881a      	ldrh	r2, [r3, #0]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	8afa      	ldrh	r2, [r7, #22]
 8005c50:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	89fa      	ldrh	r2, [r7, #14]
 8005c56:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c60:	d007      	beq.n	8005c72 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fd74 	bl	8005754 <ptr_to_mem>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	89fb      	ldrh	r3, [r7, #14]
 8005c70:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005c72:	687b      	ldr	r3, [r7, #4]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	2000009c 	.word	0x2000009c
 8005c80:	200000a0 	.word	0x200000a0
 8005c84:	080124e8 	.word	0x080124e8
 8005c88:	08012658 	.word	0x08012658
 8005c8c:	08012530 	.word	0x08012530
 8005c90:	08012670 	.word	0x08012670
 8005c94:	08012690 	.word	0x08012690
 8005c98:	200000a4 	.word	0x200000a4

08005c9c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <mem_malloc+0x14>
    return NULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e0d9      	b.n	8005e64 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005cb0:	88fb      	ldrh	r3, [r7, #6]
 8005cb2:	3303      	adds	r3, #3
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005cbc:	8bbb      	ldrh	r3, [r7, #28]
 8005cbe:	2b0b      	cmp	r3, #11
 8005cc0:	d801      	bhi.n	8005cc6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005cc6:	8bbb      	ldrh	r3, [r7, #28]
 8005cc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ccc:	d803      	bhi.n	8005cd6 <mem_malloc+0x3a>
 8005cce:	8bba      	ldrh	r2, [r7, #28]
 8005cd0:	88fb      	ldrh	r3, [r7, #6]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d201      	bcs.n	8005cda <mem_malloc+0x3e>
    return NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e0c4      	b.n	8005e64 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005cda:	4b64      	ldr	r3, [pc, #400]	; (8005e6c <mem_malloc+0x1d0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff fd4a 	bl	8005778 <mem_to_ptr>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	83fb      	strh	r3, [r7, #30]
 8005ce8:	e0b4      	b.n	8005e54 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005cea:	8bfb      	ldrh	r3, [r7, #30]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff fd31 	bl	8005754 <ptr_to_mem>
 8005cf2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	791b      	ldrb	r3, [r3, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f040 80a4 	bne.w	8005e46 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	8bfb      	ldrh	r3, [r7, #30]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	f1a3 0208 	sub.w	r2, r3, #8
 8005d0c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	f0c0 8099 	bcc.w	8005e46 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	8bfb      	ldrh	r3, [r7, #30]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f1a3 0208 	sub.w	r2, r3, #8
 8005d22:	8bbb      	ldrh	r3, [r7, #28]
 8005d24:	3314      	adds	r3, #20
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d333      	bcc.n	8005d92 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005d2a:	8bfa      	ldrh	r2, [r7, #30]
 8005d2c:	8bbb      	ldrh	r3, [r7, #28]
 8005d2e:	4413      	add	r3, r2
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3308      	adds	r3, #8
 8005d34:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005d36:	8a7b      	ldrh	r3, [r7, #18]
 8005d38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d3c:	d106      	bne.n	8005d4c <mem_malloc+0xb0>
 8005d3e:	4b4c      	ldr	r3, [pc, #304]	; (8005e70 <mem_malloc+0x1d4>)
 8005d40:	f240 3287 	movw	r2, #903	; 0x387
 8005d44:	494b      	ldr	r1, [pc, #300]	; (8005e74 <mem_malloc+0x1d8>)
 8005d46:	484c      	ldr	r0, [pc, #304]	; (8005e78 <mem_malloc+0x1dc>)
 8005d48:	f00b fb76 	bl	8011438 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005d4c:	8a7b      	ldrh	r3, [r7, #18]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fd00 	bl	8005754 <ptr_to_mem>
 8005d54:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	881a      	ldrh	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8bfa      	ldrh	r2, [r7, #30]
 8005d68:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	8a7a      	ldrh	r2, [r7, #18]
 8005d6e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2201      	movs	r2, #1
 8005d74:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d7e:	d00b      	beq.n	8005d98 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff fce5 	bl	8005754 <ptr_to_mem>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	8a7b      	ldrh	r3, [r7, #18]
 8005d8e:	8053      	strh	r3, [r2, #2]
 8005d90:	e002      	b.n	8005d98 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2201      	movs	r2, #1
 8005d96:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005d98:	4b34      	ldr	r3, [pc, #208]	; (8005e6c <mem_malloc+0x1d0>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d127      	bne.n	8005df2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005da2:	4b32      	ldr	r3, [pc, #200]	; (8005e6c <mem_malloc+0x1d0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005da8:	e005      	b.n	8005db6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff fcd0 	bl	8005754 <ptr_to_mem>
 8005db4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	791b      	ldrb	r3, [r3, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d004      	beq.n	8005dc8 <mem_malloc+0x12c>
 8005dbe:	4b2f      	ldr	r3, [pc, #188]	; (8005e7c <mem_malloc+0x1e0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d1f0      	bne.n	8005daa <mem_malloc+0x10e>
          }
          lfree = cur;
 8005dc8:	4a28      	ldr	r2, [pc, #160]	; (8005e6c <mem_malloc+0x1d0>)
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005dce:	4b27      	ldr	r3, [pc, #156]	; (8005e6c <mem_malloc+0x1d0>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <mem_malloc+0x1e0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d00b      	beq.n	8005df2 <mem_malloc+0x156>
 8005dda:	4b24      	ldr	r3, [pc, #144]	; (8005e6c <mem_malloc+0x1d0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	791b      	ldrb	r3, [r3, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d006      	beq.n	8005df2 <mem_malloc+0x156>
 8005de4:	4b22      	ldr	r3, [pc, #136]	; (8005e70 <mem_malloc+0x1d4>)
 8005de6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005dea:	4925      	ldr	r1, [pc, #148]	; (8005e80 <mem_malloc+0x1e4>)
 8005dec:	4822      	ldr	r0, [pc, #136]	; (8005e78 <mem_malloc+0x1dc>)
 8005dee:	f00b fb23 	bl	8011438 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005df2:	8bba      	ldrh	r2, [r7, #28]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	4413      	add	r3, r2
 8005df8:	3308      	adds	r3, #8
 8005dfa:	4a20      	ldr	r2, [pc, #128]	; (8005e7c <mem_malloc+0x1e0>)
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d906      	bls.n	8005e10 <mem_malloc+0x174>
 8005e02:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <mem_malloc+0x1d4>)
 8005e04:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005e08:	491e      	ldr	r1, [pc, #120]	; (8005e84 <mem_malloc+0x1e8>)
 8005e0a:	481b      	ldr	r0, [pc, #108]	; (8005e78 <mem_malloc+0x1dc>)
 8005e0c:	f00b fb14 	bl	8011438 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d006      	beq.n	8005e28 <mem_malloc+0x18c>
 8005e1a:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <mem_malloc+0x1d4>)
 8005e1c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005e20:	4919      	ldr	r1, [pc, #100]	; (8005e88 <mem_malloc+0x1ec>)
 8005e22:	4815      	ldr	r0, [pc, #84]	; (8005e78 <mem_malloc+0x1dc>)
 8005e24:	f00b fb08 	bl	8011438 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d006      	beq.n	8005e40 <mem_malloc+0x1a4>
 8005e32:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <mem_malloc+0x1d4>)
 8005e34:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005e38:	4914      	ldr	r1, [pc, #80]	; (8005e8c <mem_malloc+0x1f0>)
 8005e3a:	480f      	ldr	r0, [pc, #60]	; (8005e78 <mem_malloc+0x1dc>)
 8005e3c:	f00b fafc 	bl	8011438 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	3308      	adds	r3, #8
 8005e44:	e00e      	b.n	8005e64 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005e46:	8bfb      	ldrh	r3, [r7, #30]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff fc83 	bl	8005754 <ptr_to_mem>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005e54:	8bfa      	ldrh	r2, [r7, #30]
 8005e56:	8bbb      	ldrh	r3, [r7, #28]
 8005e58:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	f4ff af44 	bcc.w	8005cea <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	200000a4 	.word	0x200000a4
 8005e70:	080124e8 	.word	0x080124e8
 8005e74:	08012690 	.word	0x08012690
 8005e78:	08012530 	.word	0x08012530
 8005e7c:	200000a0 	.word	0x200000a0
 8005e80:	080126a4 	.word	0x080126a4
 8005e84:	080126c0 	.word	0x080126c0
 8005e88:	080126f0 	.word	0x080126f0
 8005e8c:	08012720 	.word	0x08012720

08005e90 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	3303      	adds	r3, #3
 8005ea6:	f023 0303 	bic.w	r3, r3, #3
 8005eaa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005eac:	2300      	movs	r3, #0
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	e011      	b.n	8005ed6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	885b      	ldrh	r3, [r3, #2]
 8005eda:	461a      	mov	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	dbe7      	blt.n	8005eb2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005ee2:	bf00      	nop
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	80fb      	strh	r3, [r7, #6]
 8005efa:	e009      	b.n	8005f10 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	4a08      	ldr	r2, [pc, #32]	; (8005f20 <memp_init+0x30>)
 8005f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff ffc3 	bl	8005e90 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005f0a:	88fb      	ldrh	r3, [r7, #6]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	80fb      	strh	r3, [r7, #6]
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d9f2      	bls.n	8005efc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	080152b4 	.word	0x080152b4

08005f24 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d012      	beq.n	8005f60 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d006      	beq.n	8005f5c <do_memp_malloc_pool+0x38>
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <do_memp_malloc_pool+0x48>)
 8005f50:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005f54:	4906      	ldr	r1, [pc, #24]	; (8005f70 <do_memp_malloc_pool+0x4c>)
 8005f56:	4807      	ldr	r0, [pc, #28]	; (8005f74 <do_memp_malloc_pool+0x50>)
 8005f58:	f00b fa6e 	bl	8011438 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	e000      	b.n	8005f62 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	08012744 	.word	0x08012744
 8005f70:	08012774 	.word	0x08012774
 8005f74:	08012798 	.word	0x08012798

08005f78 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d908      	bls.n	8005f9a <memp_malloc+0x22>
 8005f88:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <memp_malloc+0x3c>)
 8005f8a:	f240 1257 	movw	r2, #343	; 0x157
 8005f8e:	490a      	ldr	r1, [pc, #40]	; (8005fb8 <memp_malloc+0x40>)
 8005f90:	480a      	ldr	r0, [pc, #40]	; (8005fbc <memp_malloc+0x44>)
 8005f92:	f00b fa51 	bl	8011438 <iprintf>
 8005f96:	2300      	movs	r3, #0
 8005f98:	e008      	b.n	8005fac <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	4a08      	ldr	r2, [pc, #32]	; (8005fc0 <memp_malloc+0x48>)
 8005f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff ffbe 	bl	8005f24 <do_memp_malloc_pool>
 8005fa8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005faa:	68fb      	ldr	r3, [r7, #12]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	08012744 	.word	0x08012744
 8005fb8:	080127d4 	.word	0x080127d4
 8005fbc:	08012798 	.word	0x08012798
 8005fc0:	080152b4 	.word	0x080152b4

08005fc4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	f003 0303 	and.w	r3, r3, #3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d006      	beq.n	8005fe6 <do_memp_free_pool+0x22>
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <do_memp_free_pool+0x40>)
 8005fda:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005fde:	490a      	ldr	r1, [pc, #40]	; (8006008 <do_memp_free_pool+0x44>)
 8005fe0:	480a      	ldr	r0, [pc, #40]	; (800600c <do_memp_free_pool+0x48>)
 8005fe2:	f00b fa29 	bl	8011438 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	08012744 	.word	0x08012744
 8006008:	080127f4 	.word	0x080127f4
 800600c:	08012798 	.word	0x08012798

08006010 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	6039      	str	r1, [r7, #0]
 800601a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	2b08      	cmp	r3, #8
 8006020:	d907      	bls.n	8006032 <memp_free+0x22>
 8006022:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <memp_free+0x44>)
 8006024:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006028:	490b      	ldr	r1, [pc, #44]	; (8006058 <memp_free+0x48>)
 800602a:	480c      	ldr	r0, [pc, #48]	; (800605c <memp_free+0x4c>)
 800602c:	f00b fa04 	bl	8011438 <iprintf>
 8006030:	e00c      	b.n	800604c <memp_free+0x3c>

  if (mem == NULL) {
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	4a09      	ldr	r2, [pc, #36]	; (8006060 <memp_free+0x50>)
 800603c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff ffbe 	bl	8005fc4 <do_memp_free_pool>
 8006048:	e000      	b.n	800604c <memp_free+0x3c>
    return;
 800604a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	08012744 	.word	0x08012744
 8006058:	08012814 	.word	0x08012814
 800605c:	08012798 	.word	0x08012798
 8006060:	080152b4 	.word	0x080152b4

08006064 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006068:	bf00      	nop
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d108      	bne.n	800609a <netif_add+0x26>
 8006088:	4b5b      	ldr	r3, [pc, #364]	; (80061f8 <netif_add+0x184>)
 800608a:	f240 1227 	movw	r2, #295	; 0x127
 800608e:	495b      	ldr	r1, [pc, #364]	; (80061fc <netif_add+0x188>)
 8006090:	485b      	ldr	r0, [pc, #364]	; (8006200 <netif_add+0x18c>)
 8006092:	f00b f9d1 	bl	8011438 <iprintf>
 8006096:	2300      	movs	r3, #0
 8006098:	e0a9      	b.n	80061ee <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	2b00      	cmp	r3, #0
 800609e:	d108      	bne.n	80060b2 <netif_add+0x3e>
 80060a0:	4b55      	ldr	r3, [pc, #340]	; (80061f8 <netif_add+0x184>)
 80060a2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80060a6:	4957      	ldr	r1, [pc, #348]	; (8006204 <netif_add+0x190>)
 80060a8:	4855      	ldr	r0, [pc, #340]	; (8006200 <netif_add+0x18c>)
 80060aa:	f00b f9c5 	bl	8011438 <iprintf>
 80060ae:	2300      	movs	r3, #0
 80060b0:	e09d      	b.n	80061ee <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80060b8:	4b53      	ldr	r3, [pc, #332]	; (8006208 <netif_add+0x194>)
 80060ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80060c2:	4b51      	ldr	r3, [pc, #324]	; (8006208 <netif_add+0x194>)
 80060c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80060cc:	4b4e      	ldr	r3, [pc, #312]	; (8006208 <netif_add+0x194>)
 80060ce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a49      	ldr	r2, [pc, #292]	; (800620c <netif_add+0x198>)
 80060e6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  netif->flags = 0;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3324      	adds	r3, #36	; 0x24
 80060fa:	2204      	movs	r2, #4
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f00b f992 	bl	8011428 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006110:	4b3f      	ldr	r3, [pc, #252]	; (8006210 <netif_add+0x19c>)
 8006112:	781a      	ldrb	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  netif->input = input;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800611e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	68b9      	ldr	r1, [r7, #8]
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f914 	bl	8006354 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	4798      	blx	r3
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <netif_add+0xc8>
    return NULL;
 8006138:	2300      	movs	r3, #0
 800613a:	e058      	b.n	80061ee <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006142:	2bff      	cmp	r3, #255	; 0xff
 8006144:	d103      	bne.n	800614e <netif_add+0xda>
        netif->num = 0;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      }
      num_netifs = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006152:	4b30      	ldr	r3, [pc, #192]	; (8006214 <netif_add+0x1a0>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e02b      	b.n	80061b2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	429a      	cmp	r2, r3
 8006160:	d106      	bne.n	8006170 <netif_add+0xfc>
 8006162:	4b25      	ldr	r3, [pc, #148]	; (80061f8 <netif_add+0x184>)
 8006164:	f240 128b 	movw	r2, #395	; 0x18b
 8006168:	492b      	ldr	r1, [pc, #172]	; (8006218 <netif_add+0x1a4>)
 800616a:	4825      	ldr	r0, [pc, #148]	; (8006200 <netif_add+0x18c>)
 800616c:	f00b f964 	bl	8011438 <iprintf>
        num_netifs++;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	3301      	adds	r3, #1
 8006174:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2bff      	cmp	r3, #255	; 0xff
 800617a:	dd06      	ble.n	800618a <netif_add+0x116>
 800617c:	4b1e      	ldr	r3, [pc, #120]	; (80061f8 <netif_add+0x184>)
 800617e:	f240 128d 	movw	r2, #397	; 0x18d
 8006182:	4926      	ldr	r1, [pc, #152]	; (800621c <netif_add+0x1a8>)
 8006184:	481e      	ldr	r0, [pc, #120]	; (8006200 <netif_add+0x18c>)
 8006186:	f00b f957 	bl	8011438 <iprintf>
        if (netif2->num == netif->num) {
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006196:	429a      	cmp	r2, r3
 8006198:	d108      	bne.n	80061ac <netif_add+0x138>
          netif->num++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061a0:	3301      	adds	r3, #1
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          break;
 80061aa:	e005      	b.n	80061b8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1d0      	bne.n	800615a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1be      	bne.n	800613c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061c4:	2bfe      	cmp	r3, #254	; 0xfe
 80061c6:	d103      	bne.n	80061d0 <netif_add+0x15c>
    netif_num = 0;
 80061c8:	4b11      	ldr	r3, [pc, #68]	; (8006210 <netif_add+0x19c>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e006      	b.n	80061de <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061d6:	3301      	adds	r3, #1
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <netif_add+0x19c>)
 80061dc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80061de:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <netif_add+0x1a0>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80061e6:	4a0b      	ldr	r2, [pc, #44]	; (8006214 <netif_add+0x1a0>)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80061ec:	68fb      	ldr	r3, [r7, #12]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	08012830 	.word	0x08012830
 80061fc:	080128c4 	.word	0x080128c4
 8006200:	08012880 	.word	0x08012880
 8006204:	080128e0 	.word	0x080128e0
 8006208:	08015328 	.word	0x08015328
 800620c:	08006567 	.word	0x08006567
 8006210:	200000cc 	.word	0x200000cc
 8006214:	20006de0 	.word	0x20006de0
 8006218:	08012904 	.word	0x08012904
 800621c:	08012918 	.word	0x08012918

08006220 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f002 faef 	bl	8008810 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f006 fed1 	bl	800cfdc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <netif_do_set_ipaddr+0x20>
 8006256:	4b1d      	ldr	r3, [pc, #116]	; (80062cc <netif_do_set_ipaddr+0x88>)
 8006258:	f240 12cb 	movw	r2, #459	; 0x1cb
 800625c:	491c      	ldr	r1, [pc, #112]	; (80062d0 <netif_do_set_ipaddr+0x8c>)
 800625e:	481d      	ldr	r0, [pc, #116]	; (80062d4 <netif_do_set_ipaddr+0x90>)
 8006260:	f00b f8ea 	bl	8011438 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <netif_do_set_ipaddr+0x34>
 800626a:	4b18      	ldr	r3, [pc, #96]	; (80062cc <netif_do_set_ipaddr+0x88>)
 800626c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006270:	4917      	ldr	r1, [pc, #92]	; (80062d0 <netif_do_set_ipaddr+0x8c>)
 8006272:	4818      	ldr	r0, [pc, #96]	; (80062d4 <netif_do_set_ipaddr+0x90>)
 8006274:	f00b f8e0 	bl	8011438 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3304      	adds	r3, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d01c      	beq.n	80062c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3304      	adds	r3, #4
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006296:	f107 0314 	add.w	r3, r7, #20
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff ffbf 	bl	8006220 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <netif_do_set_ipaddr+0x6a>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	e000      	b.n	80062b0 <netif_do_set_ipaddr+0x6c>
 80062ae:	2300      	movs	r3, #0
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80062b4:	2101      	movs	r1, #1
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f8d2 	bl	8006460 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	08012830 	.word	0x08012830
 80062d0:	08012948 	.word	0x08012948
 80062d4:	08012880 	.word	0x08012880

080062d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3308      	adds	r3, #8
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d00a      	beq.n	8006308 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <netif_do_set_netmask+0x26>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	e000      	b.n	8006300 <netif_do_set_netmask+0x28>
 80062fe:	2300      	movs	r3, #0
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	330c      	adds	r3, #12
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d00a      	beq.n	8006346 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <netif_do_set_gw+0x26>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	e000      	b.n	800633e <netif_do_set_gw+0x28>
 800633c:	2300      	movs	r3, #0
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006370:	4b1c      	ldr	r3, [pc, #112]	; (80063e4 <netif_set_addr+0x90>)
 8006372:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800637a:	4b1a      	ldr	r3, [pc, #104]	; (80063e4 <netif_set_addr+0x90>)
 800637c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006384:	4b17      	ldr	r3, [pc, #92]	; (80063e4 <netif_set_addr+0x90>)
 8006386:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <netif_set_addr+0x42>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <netif_set_addr+0x46>
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <netif_set_addr+0x48>
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d006      	beq.n	80063b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80063a4:	f107 0310 	add.w	r3, r7, #16
 80063a8:	461a      	mov	r2, r3
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f7ff ff49 	bl	8006244 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff ff8e 	bl	80062d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f7ff ffa8 	bl	8006316 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d106      	bne.n	80063da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80063cc:	f107 0310 	add.w	r3, r7, #16
 80063d0:	461a      	mov	r2, r3
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff ff35 	bl	8006244 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80063da:	bf00      	nop
 80063dc:	3720      	adds	r7, #32
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	08015328 	.word	0x08015328

080063e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80063f0:	4a04      	ldr	r2, [pc, #16]	; (8006404 <netif_set_default+0x1c>)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20006de4 	.word	0x20006de4

08006408 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d107      	bne.n	8006426 <netif_set_up+0x1e>
 8006416:	4b0f      	ldr	r3, [pc, #60]	; (8006454 <netif_set_up+0x4c>)
 8006418:	f44f 7254 	mov.w	r2, #848	; 0x350
 800641c:	490e      	ldr	r1, [pc, #56]	; (8006458 <netif_set_up+0x50>)
 800641e:	480f      	ldr	r0, [pc, #60]	; (800645c <netif_set_up+0x54>)
 8006420:	f00b f80a 	bl	8011438 <iprintf>
 8006424:	e013      	b.n	800644e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10c      	bne.n	800644e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800643a:	f043 0301 	orr.w	r3, r3, #1
 800643e:	b2da      	uxtb	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006446:	2103      	movs	r1, #3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f809 	bl	8006460 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	08012830 	.word	0x08012830
 8006458:	080129b8 	.word	0x080129b8
 800645c:	08012880 	.word	0x08012880

08006460 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <netif_issue_reports+0x20>
 8006472:	4b18      	ldr	r3, [pc, #96]	; (80064d4 <netif_issue_reports+0x74>)
 8006474:	f240 326d 	movw	r2, #877	; 0x36d
 8006478:	4917      	ldr	r1, [pc, #92]	; (80064d8 <netif_issue_reports+0x78>)
 800647a:	4818      	ldr	r0, [pc, #96]	; (80064dc <netif_issue_reports+0x7c>)
 800647c:	f00a ffdc 	bl	8011438 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d01e      	beq.n	80064cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006494:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006498:	2b00      	cmp	r3, #0
 800649a:	d017      	beq.n	80064cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d013      	beq.n	80064ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3304      	adds	r3, #4
 80064aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00e      	beq.n	80064ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064b6:	f003 0308 	and.w	r3, r3, #8
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3304      	adds	r3, #4
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f009 fbcb 	bl	800fc60 <etharp_request>
 80064ca:	e000      	b.n	80064ce <netif_issue_reports+0x6e>
    return;
 80064cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	08012830 	.word	0x08012830
 80064d8:	080129d4 	.word	0x080129d4
 80064dc:	08012880 	.word	0x08012880

080064e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d107      	bne.n	80064fe <netif_set_down+0x1e>
 80064ee:	4b12      	ldr	r3, [pc, #72]	; (8006538 <netif_set_down+0x58>)
 80064f0:	f240 329b 	movw	r2, #923	; 0x39b
 80064f4:	4911      	ldr	r1, [pc, #68]	; (800653c <netif_set_down+0x5c>)
 80064f6:	4812      	ldr	r0, [pc, #72]	; (8006540 <netif_set_down+0x60>)
 80064f8:	f00a ff9e 	bl	8011438 <iprintf>
 80064fc:	e019      	b.n	8006532 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d012      	beq.n	8006532 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006512:	f023 0301 	bic.w	r3, r3, #1
 8006516:	b2da      	uxtb	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f008 ff51 	bl	800f3d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	08012830 	.word	0x08012830
 800653c:	080129f8 	.word	0x080129f8
 8006540:	08012880 	.word	0x08012880

08006544 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	61da      	str	r2, [r3, #28]
  }
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006572:	f06f 030b 	mvn.w	r3, #11
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
	...

08006584 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d013      	beq.n	80065bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006594:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <netif_get_by_index+0x48>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	e00c      	b.n	80065b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065a2:	3301      	adds	r3, #1
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	79fa      	ldrb	r2, [r7, #7]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d101      	bne.n	80065b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	e006      	b.n	80065be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1ef      	bne.n	800659c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	20006de0 	.word	0x20006de0

080065d0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80065d6:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <pbuf_free_ooseq+0x38>)
 80065d8:	2200      	movs	r2, #0
 80065da:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <pbuf_free_ooseq+0x3c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	607b      	str	r3, [r7, #4]
 80065e2:	e00a      	b.n	80065fa <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f002 f94d 	bl	800888c <tcp_free_ooseq>
      return;
 80065f2:	e005      	b.n	8006600 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	607b      	str	r3, [r7, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1f1      	bne.n	80065e4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20006de8 	.word	0x20006de8
 800660c:	20006df0 	.word	0x20006df0

08006610 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006614:	4b03      	ldr	r3, [pc, #12]	; (8006624 <pbuf_pool_is_empty+0x14>)
 8006616:	2201      	movs	r2, #1
 8006618:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800661a:	bf00      	nop
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	20006de8 	.word	0x20006de8

08006628 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4611      	mov	r1, r2
 8006634:	461a      	mov	r2, r3
 8006636:	460b      	mov	r3, r1
 8006638:	80fb      	strh	r3, [r7, #6]
 800663a:	4613      	mov	r3, r2
 800663c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	88fa      	ldrh	r2, [r7, #6]
 800664e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	88ba      	ldrh	r2, [r7, #4]
 8006654:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006656:	8b3b      	ldrh	r3, [r7, #24]
 8006658:	b2da      	uxtb	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	7f3a      	ldrb	r2, [r7, #28]
 8006662:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2201      	movs	r2, #1
 8006668:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	73da      	strb	r2, [r3, #15]
}
 8006670:	bf00      	nop
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08c      	sub	sp, #48	; 0x30
 8006680:	af02      	add	r7, sp, #8
 8006682:	4603      	mov	r3, r0
 8006684:	71fb      	strb	r3, [r7, #7]
 8006686:	460b      	mov	r3, r1
 8006688:	80bb      	strh	r3, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006692:	887b      	ldrh	r3, [r7, #2]
 8006694:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006698:	d07f      	beq.n	800679a <pbuf_alloc+0x11e>
 800669a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800669e:	f300 80c8 	bgt.w	8006832 <pbuf_alloc+0x1b6>
 80066a2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80066a6:	d010      	beq.n	80066ca <pbuf_alloc+0x4e>
 80066a8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80066ac:	f300 80c1 	bgt.w	8006832 <pbuf_alloc+0x1b6>
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d002      	beq.n	80066ba <pbuf_alloc+0x3e>
 80066b4:	2b41      	cmp	r3, #65	; 0x41
 80066b6:	f040 80bc 	bne.w	8006832 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80066ba:	887a      	ldrh	r2, [r7, #2]
 80066bc:	88bb      	ldrh	r3, [r7, #4]
 80066be:	4619      	mov	r1, r3
 80066c0:	2000      	movs	r0, #0
 80066c2:	f000 f8d1 	bl	8006868 <pbuf_alloc_reference>
 80066c6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80066c8:	e0bd      	b.n	8006846 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80066d2:	88bb      	ldrh	r3, [r7, #4]
 80066d4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80066d6:	2008      	movs	r0, #8
 80066d8:	f7ff fc4e 	bl	8005f78 <memp_malloc>
 80066dc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d109      	bne.n	80066f8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80066e4:	f7ff ff94 	bl	8006610 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <pbuf_alloc+0x78>
            pbuf_free(p);
 80066ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066f0:	f000 faa8 	bl	8006c44 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e0a7      	b.n	8006848 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80066f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066fa:	3303      	adds	r3, #3
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f023 0303 	bic.w	r3, r3, #3
 8006702:	b29b      	uxth	r3, r3
 8006704:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006708:	b29b      	uxth	r3, r3
 800670a:	8b7a      	ldrh	r2, [r7, #26]
 800670c:	4293      	cmp	r3, r2
 800670e:	bf28      	it	cs
 8006710:	4613      	movcs	r3, r2
 8006712:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006714:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006716:	3310      	adds	r3, #16
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4413      	add	r3, r2
 800671c:	3303      	adds	r3, #3
 800671e:	f023 0303 	bic.w	r3, r3, #3
 8006722:	4618      	mov	r0, r3
 8006724:	89f9      	ldrh	r1, [r7, #14]
 8006726:	8b7a      	ldrh	r2, [r7, #26]
 8006728:	2300      	movs	r3, #0
 800672a:	9301      	str	r3, [sp, #4]
 800672c:	887b      	ldrh	r3, [r7, #2]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	460b      	mov	r3, r1
 8006732:	4601      	mov	r1, r0
 8006734:	6938      	ldr	r0, [r7, #16]
 8006736:	f7ff ff77 	bl	8006628 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d006      	beq.n	8006754 <pbuf_alloc+0xd8>
 8006746:	4b42      	ldr	r3, [pc, #264]	; (8006850 <pbuf_alloc+0x1d4>)
 8006748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800674c:	4941      	ldr	r1, [pc, #260]	; (8006854 <pbuf_alloc+0x1d8>)
 800674e:	4842      	ldr	r0, [pc, #264]	; (8006858 <pbuf_alloc+0x1dc>)
 8006750:	f00a fe72 	bl	8011438 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006754:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006756:	3303      	adds	r3, #3
 8006758:	f023 0303 	bic.w	r3, r3, #3
 800675c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006760:	d106      	bne.n	8006770 <pbuf_alloc+0xf4>
 8006762:	4b3b      	ldr	r3, [pc, #236]	; (8006850 <pbuf_alloc+0x1d4>)
 8006764:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006768:	493c      	ldr	r1, [pc, #240]	; (800685c <pbuf_alloc+0x1e0>)
 800676a:	483b      	ldr	r0, [pc, #236]	; (8006858 <pbuf_alloc+0x1dc>)
 800676c:	f00a fe64 	bl	8011438 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
 800677a:	e002      	b.n	8006782 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006786:	8b7a      	ldrh	r2, [r7, #26]
 8006788:	89fb      	ldrh	r3, [r7, #14]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006792:	8b7b      	ldrh	r3, [r7, #26]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d19e      	bne.n	80066d6 <pbuf_alloc+0x5a>
      break;
 8006798:	e055      	b.n	8006846 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800679a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800679c:	3303      	adds	r3, #3
 800679e:	b29b      	uxth	r3, r3
 80067a0:	f023 0303 	bic.w	r3, r3, #3
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	88bb      	ldrh	r3, [r7, #4]
 80067a8:	3303      	adds	r3, #3
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f023 0303 	bic.w	r3, r3, #3
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	4413      	add	r3, r2
 80067b4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80067b6:	8b3b      	ldrh	r3, [r7, #24]
 80067b8:	3310      	adds	r3, #16
 80067ba:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80067bc:	8b3a      	ldrh	r2, [r7, #24]
 80067be:	88bb      	ldrh	r3, [r7, #4]
 80067c0:	3303      	adds	r3, #3
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d306      	bcc.n	80067d8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80067ca:	8afa      	ldrh	r2, [r7, #22]
 80067cc:	88bb      	ldrh	r3, [r7, #4]
 80067ce:	3303      	adds	r3, #3
 80067d0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d201      	bcs.n	80067dc <pbuf_alloc+0x160>
        return NULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	e035      	b.n	8006848 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80067dc:	8afb      	ldrh	r3, [r7, #22]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fa5c 	bl	8005c9c <mem_malloc>
 80067e4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <pbuf_alloc+0x174>
        return NULL;
 80067ec:	2300      	movs	r3, #0
 80067ee:	e02b      	b.n	8006848 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80067f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067f2:	3310      	adds	r3, #16
 80067f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f6:	4413      	add	r3, r2
 80067f8:	3303      	adds	r3, #3
 80067fa:	f023 0303 	bic.w	r3, r3, #3
 80067fe:	4618      	mov	r0, r3
 8006800:	88b9      	ldrh	r1, [r7, #4]
 8006802:	88ba      	ldrh	r2, [r7, #4]
 8006804:	2300      	movs	r3, #0
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	887b      	ldrh	r3, [r7, #2]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	460b      	mov	r3, r1
 800680e:	4601      	mov	r1, r0
 8006810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006812:	f7ff ff09 	bl	8006628 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d010      	beq.n	8006844 <pbuf_alloc+0x1c8>
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <pbuf_alloc+0x1d4>)
 8006824:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006828:	490d      	ldr	r1, [pc, #52]	; (8006860 <pbuf_alloc+0x1e4>)
 800682a:	480b      	ldr	r0, [pc, #44]	; (8006858 <pbuf_alloc+0x1dc>)
 800682c:	f00a fe04 	bl	8011438 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006830:	e008      	b.n	8006844 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006832:	4b07      	ldr	r3, [pc, #28]	; (8006850 <pbuf_alloc+0x1d4>)
 8006834:	f240 1227 	movw	r2, #295	; 0x127
 8006838:	490a      	ldr	r1, [pc, #40]	; (8006864 <pbuf_alloc+0x1e8>)
 800683a:	4807      	ldr	r0, [pc, #28]	; (8006858 <pbuf_alloc+0x1dc>)
 800683c:	f00a fdfc 	bl	8011438 <iprintf>
      return NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	e001      	b.n	8006848 <pbuf_alloc+0x1cc>
      break;
 8006844:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006848:	4618      	mov	r0, r3
 800684a:	3728      	adds	r7, #40	; 0x28
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	08012a60 	.word	0x08012a60
 8006854:	08012a90 	.word	0x08012a90
 8006858:	08012ac0 	.word	0x08012ac0
 800685c:	08012ae8 	.word	0x08012ae8
 8006860:	08012b1c 	.word	0x08012b1c
 8006864:	08012b48 	.word	0x08012b48

08006868 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af02      	add	r7, sp, #8
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	807b      	strh	r3, [r7, #2]
 8006874:	4613      	mov	r3, r2
 8006876:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006878:	883b      	ldrh	r3, [r7, #0]
 800687a:	2b41      	cmp	r3, #65	; 0x41
 800687c:	d009      	beq.n	8006892 <pbuf_alloc_reference+0x2a>
 800687e:	883b      	ldrh	r3, [r7, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d006      	beq.n	8006892 <pbuf_alloc_reference+0x2a>
 8006884:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <pbuf_alloc_reference+0x5c>)
 8006886:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800688a:	490f      	ldr	r1, [pc, #60]	; (80068c8 <pbuf_alloc_reference+0x60>)
 800688c:	480f      	ldr	r0, [pc, #60]	; (80068cc <pbuf_alloc_reference+0x64>)
 800688e:	f00a fdd3 	bl	8011438 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006892:	2007      	movs	r0, #7
 8006894:	f7ff fb70 	bl	8005f78 <memp_malloc>
 8006898:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e00b      	b.n	80068bc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80068a4:	8879      	ldrh	r1, [r7, #2]
 80068a6:	887a      	ldrh	r2, [r7, #2]
 80068a8:	2300      	movs	r3, #0
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	883b      	ldrh	r3, [r7, #0]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	460b      	mov	r3, r1
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff feb7 	bl	8006628 <pbuf_init_alloced_pbuf>
  return p;
 80068ba:	68fb      	ldr	r3, [r7, #12]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	08012a60 	.word	0x08012a60
 80068c8:	08012b64 	.word	0x08012b64
 80068cc:	08012ac0 	.word	0x08012ac0

080068d0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	607b      	str	r3, [r7, #4]
 80068d8:	4603      	mov	r3, r0
 80068da:	73fb      	strb	r3, [r7, #15]
 80068dc:	460b      	mov	r3, r1
 80068de:	81bb      	strh	r3, [r7, #12]
 80068e0:	4613      	mov	r3, r2
 80068e2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80068e8:	8a7b      	ldrh	r3, [r7, #18]
 80068ea:	3303      	adds	r3, #3
 80068ec:	f023 0203 	bic.w	r2, r3, #3
 80068f0:	89bb      	ldrh	r3, [r7, #12]
 80068f2:	441a      	add	r2, r3
 80068f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d901      	bls.n	80068fe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e018      	b.n	8006930 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d007      	beq.n	8006914 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006904:	8a7b      	ldrh	r3, [r7, #18]
 8006906:	3303      	adds	r3, #3
 8006908:	f023 0303 	bic.w	r3, r3, #3
 800690c:	6a3a      	ldr	r2, [r7, #32]
 800690e:	4413      	add	r3, r2
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	e001      	b.n	8006918 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	89b9      	ldrh	r1, [r7, #12]
 800691c:	89ba      	ldrh	r2, [r7, #12]
 800691e:	2302      	movs	r3, #2
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	897b      	ldrh	r3, [r7, #10]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	460b      	mov	r3, r1
 8006928:	6979      	ldr	r1, [r7, #20]
 800692a:	f7ff fe7d 	bl	8006628 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800692e:	687b      	ldr	r3, [r7, #4]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d106      	bne.n	8006958 <pbuf_realloc+0x20>
 800694a:	4b3a      	ldr	r3, [pc, #232]	; (8006a34 <pbuf_realloc+0xfc>)
 800694c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006950:	4939      	ldr	r1, [pc, #228]	; (8006a38 <pbuf_realloc+0x100>)
 8006952:	483a      	ldr	r0, [pc, #232]	; (8006a3c <pbuf_realloc+0x104>)
 8006954:	f00a fd70 	bl	8011438 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	891b      	ldrh	r3, [r3, #8]
 800695c:	887a      	ldrh	r2, [r7, #2]
 800695e:	429a      	cmp	r2, r3
 8006960:	d263      	bcs.n	8006a2a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	891a      	ldrh	r2, [r3, #8]
 8006966:	887b      	ldrh	r3, [r7, #2]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800696c:	887b      	ldrh	r3, [r7, #2]
 800696e:	817b      	strh	r3, [r7, #10]
  q = p;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006974:	e018      	b.n	80069a8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	895b      	ldrh	r3, [r3, #10]
 800697a:	897a      	ldrh	r2, [r7, #10]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	891a      	ldrh	r2, [r3, #8]
 8006984:	893b      	ldrh	r3, [r7, #8]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d106      	bne.n	80069a8 <pbuf_realloc+0x70>
 800699a:	4b26      	ldr	r3, [pc, #152]	; (8006a34 <pbuf_realloc+0xfc>)
 800699c:	f240 12af 	movw	r2, #431	; 0x1af
 80069a0:	4927      	ldr	r1, [pc, #156]	; (8006a40 <pbuf_realloc+0x108>)
 80069a2:	4826      	ldr	r0, [pc, #152]	; (8006a3c <pbuf_realloc+0x104>)
 80069a4:	f00a fd48 	bl	8011438 <iprintf>
  while (rem_len > q->len) {
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	895b      	ldrh	r3, [r3, #10]
 80069ac:	897a      	ldrh	r2, [r7, #10]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d8e1      	bhi.n	8006976 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	7b1b      	ldrb	r3, [r3, #12]
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d121      	bne.n	8006a02 <pbuf_realloc+0xca>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	895b      	ldrh	r3, [r3, #10]
 80069c2:	897a      	ldrh	r2, [r7, #10]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d01c      	beq.n	8006a02 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	7b5b      	ldrb	r3, [r3, #13]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d116      	bne.n	8006a02 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	b29a      	uxth	r2, r3
 80069de:	897b      	ldrh	r3, [r7, #10]
 80069e0:	4413      	add	r3, r2
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	4619      	mov	r1, r3
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff f85c 	bl	8005aa4 <mem_trim>
 80069ec:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <pbuf_realloc+0xca>
 80069f4:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <pbuf_realloc+0xfc>)
 80069f6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80069fa:	4912      	ldr	r1, [pc, #72]	; (8006a44 <pbuf_realloc+0x10c>)
 80069fc:	480f      	ldr	r0, [pc, #60]	; (8006a3c <pbuf_realloc+0x104>)
 80069fe:	f00a fd1b 	bl	8011438 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	897a      	ldrh	r2, [r7, #10]
 8006a06:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	895a      	ldrh	r2, [r3, #10]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d004      	beq.n	8006a22 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 f911 	bl	8006c44 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	e000      	b.n	8006a2c <pbuf_realloc+0xf4>
    return;
 8006a2a:	bf00      	nop

}
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	08012a60 	.word	0x08012a60
 8006a38:	08012b78 	.word	0x08012b78
 8006a3c:	08012ac0 	.word	0x08012ac0
 8006a40:	08012b90 	.word	0x08012b90
 8006a44:	08012ba8 	.word	0x08012ba8

08006a48 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	4613      	mov	r3, r2
 8006a54:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <pbuf_add_header_impl+0x22>
 8006a5c:	4b2b      	ldr	r3, [pc, #172]	; (8006b0c <pbuf_add_header_impl+0xc4>)
 8006a5e:	f240 12df 	movw	r2, #479	; 0x1df
 8006a62:	492b      	ldr	r1, [pc, #172]	; (8006b10 <pbuf_add_header_impl+0xc8>)
 8006a64:	482b      	ldr	r0, [pc, #172]	; (8006b14 <pbuf_add_header_impl+0xcc>)
 8006a66:	f00a fce7 	bl	8011438 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <pbuf_add_header_impl+0x30>
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a76:	d301      	bcc.n	8006a7c <pbuf_add_header_impl+0x34>
    return 1;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e043      	b.n	8006b04 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <pbuf_add_header_impl+0x3e>
    return 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e03e      	b.n	8006b04 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	891a      	ldrh	r2, [r3, #8]
 8006a8e:	8a7b      	ldrh	r3, [r7, #18]
 8006a90:	4413      	add	r3, r2
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8a7a      	ldrh	r2, [r7, #18]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d901      	bls.n	8006a9e <pbuf_add_header_impl+0x56>
    return 1;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e032      	b.n	8006b04 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	7b1b      	ldrb	r3, [r3, #12]
 8006aa2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006aa4:	8a3b      	ldrh	r3, [r7, #16]
 8006aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00c      	beq.n	8006ac8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	425b      	negs	r3, r3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3310      	adds	r3, #16
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d20d      	bcs.n	8006ae0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e01d      	b.n	8006b04 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d006      	beq.n	8006adc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	425b      	negs	r3, r3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	e001      	b.n	8006ae0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e011      	b.n	8006b04 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	895a      	ldrh	r2, [r3, #10]
 8006aea:	8a7b      	ldrh	r3, [r7, #18]
 8006aec:	4413      	add	r3, r2
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	891a      	ldrh	r2, [r3, #8]
 8006af8:	8a7b      	ldrh	r3, [r7, #18]
 8006afa:	4413      	add	r3, r2
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	811a      	strh	r2, [r3, #8]


  return 0;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	08012a60 	.word	0x08012a60
 8006b10:	08012bc4 	.word	0x08012bc4
 8006b14:	08012ac0 	.word	0x08012ac0

08006b18 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006b22:	2200      	movs	r2, #0
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff ff8e 	bl	8006a48 <pbuf_add_header_impl>
 8006b2c:	4603      	mov	r3, r0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d106      	bne.n	8006b56 <pbuf_remove_header+0x1e>
 8006b48:	4b20      	ldr	r3, [pc, #128]	; (8006bcc <pbuf_remove_header+0x94>)
 8006b4a:	f240 224b 	movw	r2, #587	; 0x24b
 8006b4e:	4920      	ldr	r1, [pc, #128]	; (8006bd0 <pbuf_remove_header+0x98>)
 8006b50:	4820      	ldr	r0, [pc, #128]	; (8006bd4 <pbuf_remove_header+0x9c>)
 8006b52:	f00a fc71 	bl	8011438 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <pbuf_remove_header+0x2c>
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b62:	d301      	bcc.n	8006b68 <pbuf_remove_header+0x30>
    return 1;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e02c      	b.n	8006bc2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <pbuf_remove_header+0x3a>
    return 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e027      	b.n	8006bc2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	895b      	ldrh	r3, [r3, #10]
 8006b7a:	89fa      	ldrh	r2, [r7, #14]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d908      	bls.n	8006b92 <pbuf_remove_header+0x5a>
 8006b80:	4b12      	ldr	r3, [pc, #72]	; (8006bcc <pbuf_remove_header+0x94>)
 8006b82:	f240 2255 	movw	r2, #597	; 0x255
 8006b86:	4914      	ldr	r1, [pc, #80]	; (8006bd8 <pbuf_remove_header+0xa0>)
 8006b88:	4812      	ldr	r0, [pc, #72]	; (8006bd4 <pbuf_remove_header+0x9c>)
 8006b8a:	f00a fc55 	bl	8011438 <iprintf>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e017      	b.n	8006bc2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	441a      	add	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	895a      	ldrh	r2, [r3, #10]
 8006ba8:	89fb      	ldrh	r3, [r7, #14]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	891a      	ldrh	r2, [r3, #8]
 8006bb6:	89fb      	ldrh	r3, [r7, #14]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	08012a60 	.word	0x08012a60
 8006bd0:	08012bc4 	.word	0x08012bc4
 8006bd4:	08012ac0 	.word	0x08012ac0
 8006bd8:	08012bd0 	.word	0x08012bd0

08006bdc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	807b      	strh	r3, [r7, #2]
 8006be8:	4613      	mov	r3, r2
 8006bea:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006bec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	da08      	bge.n	8006c06 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006bf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bf8:	425b      	negs	r3, r3
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff ff9b 	bl	8006b38 <pbuf_remove_header>
 8006c02:	4603      	mov	r3, r0
 8006c04:	e007      	b.n	8006c16 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006c06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c0a:	787a      	ldrb	r2, [r7, #1]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff ff1a 	bl	8006a48 <pbuf_add_header_impl>
 8006c14:	4603      	mov	r3, r0
  }
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	460b      	mov	r3, r1
 8006c28:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006c2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff ffd2 	bl	8006bdc <pbuf_header_impl>
 8006c38:	4603      	mov	r3, r0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10b      	bne.n	8006c6a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d106      	bne.n	8006c66 <pbuf_free+0x22>
 8006c58:	4b38      	ldr	r3, [pc, #224]	; (8006d3c <pbuf_free+0xf8>)
 8006c5a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006c5e:	4938      	ldr	r1, [pc, #224]	; (8006d40 <pbuf_free+0xfc>)
 8006c60:	4838      	ldr	r0, [pc, #224]	; (8006d44 <pbuf_free+0x100>)
 8006c62:	f00a fbe9 	bl	8011438 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006c66:	2300      	movs	r3, #0
 8006c68:	e063      	b.n	8006d32 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006c6e:	e05c      	b.n	8006d2a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	7b9b      	ldrb	r3, [r3, #14]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d106      	bne.n	8006c86 <pbuf_free+0x42>
 8006c78:	4b30      	ldr	r3, [pc, #192]	; (8006d3c <pbuf_free+0xf8>)
 8006c7a:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006c7e:	4932      	ldr	r1, [pc, #200]	; (8006d48 <pbuf_free+0x104>)
 8006c80:	4830      	ldr	r0, [pc, #192]	; (8006d44 <pbuf_free+0x100>)
 8006c82:	f00a fbd9 	bl	8011438 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	7b9b      	ldrb	r3, [r3, #14]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	739a      	strb	r2, [r3, #14]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	7b9b      	ldrb	r3, [r3, #14]
 8006c96:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006c98:	7dbb      	ldrb	r3, [r7, #22]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d143      	bne.n	8006d26 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	7b1b      	ldrb	r3, [r3, #12]
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	7b5b      	ldrb	r3, [r3, #13]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d011      	beq.n	8006cde <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <pbuf_free+0x90>
 8006cc6:	4b1d      	ldr	r3, [pc, #116]	; (8006d3c <pbuf_free+0xf8>)
 8006cc8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006ccc:	491f      	ldr	r1, [pc, #124]	; (8006d4c <pbuf_free+0x108>)
 8006cce:	481d      	ldr	r0, [pc, #116]	; (8006d44 <pbuf_free+0x100>)
 8006cd0:	f00a fbb2 	bl	8011438 <iprintf>
        pc->custom_free_function(p);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
 8006cdc:	e01d      	b.n	8006d1a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d104      	bne.n	8006cee <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	2008      	movs	r0, #8
 8006ce8:	f7ff f992 	bl	8006010 <memp_free>
 8006cec:	e015      	b.n	8006d1a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d104      	bne.n	8006cfe <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	2007      	movs	r0, #7
 8006cf8:	f7ff f98a 	bl	8006010 <memp_free>
 8006cfc:	e00d      	b.n	8006d1a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d103      	bne.n	8006d0c <pbuf_free+0xc8>
          mem_free(p);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fe fe63 	bl	80059d0 <mem_free>
 8006d0a:	e006      	b.n	8006d1a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <pbuf_free+0xf8>)
 8006d0e:	f240 320f 	movw	r2, #783	; 0x30f
 8006d12:	490f      	ldr	r1, [pc, #60]	; (8006d50 <pbuf_free+0x10c>)
 8006d14:	480b      	ldr	r0, [pc, #44]	; (8006d44 <pbuf_free+0x100>)
 8006d16:	f00a fb8f 	bl	8011438 <iprintf>
        }
      }
      count++;
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	607b      	str	r3, [r7, #4]
 8006d24:	e001      	b.n	8006d2a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d19f      	bne.n	8006c70 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	08012a60 	.word	0x08012a60
 8006d40:	08012bc4 	.word	0x08012bc4
 8006d44:	08012ac0 	.word	0x08012ac0
 8006d48:	08012bf0 	.word	0x08012bf0
 8006d4c:	08012c08 	.word	0x08012c08
 8006d50:	08012c2c 	.word	0x08012c2c

08006d54 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006d60:	e005      	b.n	8006d6e <pbuf_clen+0x1a>
    ++len;
 8006d62:	89fb      	ldrh	r3, [r7, #14]
 8006d64:	3301      	adds	r3, #1
 8006d66:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f6      	bne.n	8006d62 <pbuf_clen+0xe>
  }
  return len;
 8006d74:	89fb      	ldrh	r3, [r7, #14]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
	...

08006d84 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d010      	beq.n	8006db4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	7b9b      	ldrb	r3, [r3, #14]
 8006d96:	3301      	adds	r3, #1
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	7b9b      	ldrb	r3, [r3, #14]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <pbuf_ref+0x30>
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <pbuf_ref+0x38>)
 8006da8:	f240 3242 	movw	r2, #834	; 0x342
 8006dac:	4904      	ldr	r1, [pc, #16]	; (8006dc0 <pbuf_ref+0x3c>)
 8006dae:	4805      	ldr	r0, [pc, #20]	; (8006dc4 <pbuf_ref+0x40>)
 8006db0:	f00a fb42 	bl	8011438 <iprintf>
  }
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	08012a60 	.word	0x08012a60
 8006dc0:	08012c40 	.word	0x08012c40
 8006dc4:	08012ac0 	.word	0x08012ac0

08006dc8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <pbuf_cat+0x16>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d107      	bne.n	8006dee <pbuf_cat+0x26>
 8006dde:	4b20      	ldr	r3, [pc, #128]	; (8006e60 <pbuf_cat+0x98>)
 8006de0:	f240 3259 	movw	r2, #857	; 0x359
 8006de4:	491f      	ldr	r1, [pc, #124]	; (8006e64 <pbuf_cat+0x9c>)
 8006de6:	4820      	ldr	r0, [pc, #128]	; (8006e68 <pbuf_cat+0xa0>)
 8006de8:	f00a fb26 	bl	8011438 <iprintf>
 8006dec:	e034      	b.n	8006e58 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	e00a      	b.n	8006e0a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	891a      	ldrh	r2, [r3, #8]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	891b      	ldrh	r3, [r3, #8]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f0      	bne.n	8006df4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	891a      	ldrh	r2, [r3, #8]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	895b      	ldrh	r3, [r3, #10]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d006      	beq.n	8006e2c <pbuf_cat+0x64>
 8006e1e:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <pbuf_cat+0x98>)
 8006e20:	f240 3262 	movw	r2, #866	; 0x362
 8006e24:	4911      	ldr	r1, [pc, #68]	; (8006e6c <pbuf_cat+0xa4>)
 8006e26:	4810      	ldr	r0, [pc, #64]	; (8006e68 <pbuf_cat+0xa0>)
 8006e28:	f00a fb06 	bl	8011438 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d006      	beq.n	8006e42 <pbuf_cat+0x7a>
 8006e34:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <pbuf_cat+0x98>)
 8006e36:	f240 3263 	movw	r2, #867	; 0x363
 8006e3a:	490d      	ldr	r1, [pc, #52]	; (8006e70 <pbuf_cat+0xa8>)
 8006e3c:	480a      	ldr	r0, [pc, #40]	; (8006e68 <pbuf_cat+0xa0>)
 8006e3e:	f00a fafb 	bl	8011438 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	891a      	ldrh	r2, [r3, #8]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	891b      	ldrh	r3, [r3, #8]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	08012a60 	.word	0x08012a60
 8006e64:	08012c54 	.word	0x08012c54
 8006e68:	08012ac0 	.word	0x08012ac0
 8006e6c:	08012c8c 	.word	0x08012c8c
 8006e70:	08012cbc 	.word	0x08012cbc

08006e74 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff ffa1 	bl	8006dc8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006e86:	6838      	ldr	r0, [r7, #0]
 8006e88:	f7ff ff7c 	bl	8006d84 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006e8c:	bf00      	nop
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <pbuf_copy+0x2a>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d005      	beq.n	8006ebe <pbuf_copy+0x2a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	891a      	ldrh	r2, [r3, #8]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	891b      	ldrh	r3, [r3, #8]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d209      	bcs.n	8006ed2 <pbuf_copy+0x3e>
 8006ebe:	4b57      	ldr	r3, [pc, #348]	; (800701c <pbuf_copy+0x188>)
 8006ec0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006ec4:	4956      	ldr	r1, [pc, #344]	; (8007020 <pbuf_copy+0x18c>)
 8006ec6:	4857      	ldr	r0, [pc, #348]	; (8007024 <pbuf_copy+0x190>)
 8006ec8:	f00a fab6 	bl	8011438 <iprintf>
 8006ecc:	f06f 030f 	mvn.w	r3, #15
 8006ed0:	e09f      	b.n	8007012 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	895b      	ldrh	r3, [r3, #10]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	1ad2      	subs	r2, r2, r3
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	895b      	ldrh	r3, [r3, #10]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1acb      	subs	r3, r1, r3
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d306      	bcc.n	8006ef8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	895b      	ldrh	r3, [r3, #10]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	e005      	b.n	8006f04 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	895b      	ldrh	r3, [r3, #10]
 8006efc:	461a      	mov	r2, r3
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	18d0      	adds	r0, r2, r3
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	4413      	add	r3, r2
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4619      	mov	r1, r3
 8006f18:	f00a fa78 	bl	801140c <memcpy>
    offset_to += len;
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	895b      	ldrh	r3, [r3, #10]
 8006f30:	461a      	mov	r2, r3
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d906      	bls.n	8006f46 <pbuf_copy+0xb2>
 8006f38:	4b38      	ldr	r3, [pc, #224]	; (800701c <pbuf_copy+0x188>)
 8006f3a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006f3e:	493a      	ldr	r1, [pc, #232]	; (8007028 <pbuf_copy+0x194>)
 8006f40:	4838      	ldr	r0, [pc, #224]	; (8007024 <pbuf_copy+0x190>)
 8006f42:	f00a fa79 	bl	8011438 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	895b      	ldrh	r3, [r3, #10]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d906      	bls.n	8006f60 <pbuf_copy+0xcc>
 8006f52:	4b32      	ldr	r3, [pc, #200]	; (800701c <pbuf_copy+0x188>)
 8006f54:	f240 32da 	movw	r2, #986	; 0x3da
 8006f58:	4934      	ldr	r1, [pc, #208]	; (800702c <pbuf_copy+0x198>)
 8006f5a:	4832      	ldr	r0, [pc, #200]	; (8007024 <pbuf_copy+0x190>)
 8006f5c:	f00a fa6c 	bl	8011438 <iprintf>
    if (offset_from >= p_from->len) {
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	895b      	ldrh	r3, [r3, #10]
 8006f64:	461a      	mov	r2, r3
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d304      	bcc.n	8006f76 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	895b      	ldrh	r3, [r3, #10]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d114      	bne.n	8006fac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10c      	bne.n	8006fac <pbuf_copy+0x118>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d009      	beq.n	8006fac <pbuf_copy+0x118>
 8006f98:	4b20      	ldr	r3, [pc, #128]	; (800701c <pbuf_copy+0x188>)
 8006f9a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006f9e:	4924      	ldr	r1, [pc, #144]	; (8007030 <pbuf_copy+0x19c>)
 8006fa0:	4820      	ldr	r0, [pc, #128]	; (8007024 <pbuf_copy+0x190>)
 8006fa2:	f00a fa49 	bl	8011438 <iprintf>
 8006fa6:	f06f 030f 	mvn.w	r3, #15
 8006faa:	e032      	b.n	8007012 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d013      	beq.n	8006fda <pbuf_copy+0x146>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	895a      	ldrh	r2, [r3, #10]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	891b      	ldrh	r3, [r3, #8]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d10d      	bne.n	8006fda <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <pbuf_copy+0x146>
 8006fc6:	4b15      	ldr	r3, [pc, #84]	; (800701c <pbuf_copy+0x188>)
 8006fc8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006fcc:	4919      	ldr	r1, [pc, #100]	; (8007034 <pbuf_copy+0x1a0>)
 8006fce:	4815      	ldr	r0, [pc, #84]	; (8007024 <pbuf_copy+0x190>)
 8006fd0:	f00a fa32 	bl	8011438 <iprintf>
 8006fd4:	f06f 0305 	mvn.w	r3, #5
 8006fd8:	e01b      	b.n	8007012 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d013      	beq.n	8007008 <pbuf_copy+0x174>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	895a      	ldrh	r2, [r3, #10]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	891b      	ldrh	r3, [r3, #8]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d10d      	bne.n	8007008 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d009      	beq.n	8007008 <pbuf_copy+0x174>
 8006ff4:	4b09      	ldr	r3, [pc, #36]	; (800701c <pbuf_copy+0x188>)
 8006ff6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006ffa:	490e      	ldr	r1, [pc, #56]	; (8007034 <pbuf_copy+0x1a0>)
 8006ffc:	4809      	ldr	r0, [pc, #36]	; (8007024 <pbuf_copy+0x190>)
 8006ffe:	f00a fa1b 	bl	8011438 <iprintf>
 8007002:	f06f 0305 	mvn.w	r3, #5
 8007006:	e004      	b.n	8007012 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	f47f af61 	bne.w	8006ed2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	08012a60 	.word	0x08012a60
 8007020:	08012d08 	.word	0x08012d08
 8007024:	08012ac0 	.word	0x08012ac0
 8007028:	08012d38 	.word	0x08012d38
 800702c:	08012d50 	.word	0x08012d50
 8007030:	08012d6c 	.word	0x08012d6c
 8007034:	08012d7c 	.word	0x08012d7c

08007038 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	4611      	mov	r1, r2
 8007044:	461a      	mov	r2, r3
 8007046:	460b      	mov	r3, r1
 8007048:	80fb      	strh	r3, [r7, #6]
 800704a:	4613      	mov	r3, r2
 800704c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d108      	bne.n	800706e <pbuf_copy_partial+0x36>
 800705c:	4b2b      	ldr	r3, [pc, #172]	; (800710c <pbuf_copy_partial+0xd4>)
 800705e:	f240 420a 	movw	r2, #1034	; 0x40a
 8007062:	492b      	ldr	r1, [pc, #172]	; (8007110 <pbuf_copy_partial+0xd8>)
 8007064:	482b      	ldr	r0, [pc, #172]	; (8007114 <pbuf_copy_partial+0xdc>)
 8007066:	f00a f9e7 	bl	8011438 <iprintf>
 800706a:	2300      	movs	r3, #0
 800706c:	e04a      	b.n	8007104 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d108      	bne.n	8007086 <pbuf_copy_partial+0x4e>
 8007074:	4b25      	ldr	r3, [pc, #148]	; (800710c <pbuf_copy_partial+0xd4>)
 8007076:	f240 420b 	movw	r2, #1035	; 0x40b
 800707a:	4927      	ldr	r1, [pc, #156]	; (8007118 <pbuf_copy_partial+0xe0>)
 800707c:	4825      	ldr	r0, [pc, #148]	; (8007114 <pbuf_copy_partial+0xdc>)
 800707e:	f00a f9db 	bl	8011438 <iprintf>
 8007082:	2300      	movs	r3, #0
 8007084:	e03e      	b.n	8007104 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	61fb      	str	r3, [r7, #28]
 800708a:	e034      	b.n	80070f6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800708c:	88bb      	ldrh	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <pbuf_copy_partial+0x70>
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	895b      	ldrh	r3, [r3, #10]
 8007096:	88ba      	ldrh	r2, [r7, #4]
 8007098:	429a      	cmp	r2, r3
 800709a:	d305      	bcc.n	80070a8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	895b      	ldrh	r3, [r3, #10]
 80070a0:	88ba      	ldrh	r2, [r7, #4]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	80bb      	strh	r3, [r7, #4]
 80070a6:	e023      	b.n	80070f0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	895a      	ldrh	r2, [r3, #10]
 80070ac:	88bb      	ldrh	r3, [r7, #4]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80070b2:	8b3a      	ldrh	r2, [r7, #24]
 80070b4:	88fb      	ldrh	r3, [r7, #6]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d901      	bls.n	80070be <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80070be:	8b7b      	ldrh	r3, [r7, #26]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	18d0      	adds	r0, r2, r3
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	88bb      	ldrh	r3, [r7, #4]
 80070ca:	4413      	add	r3, r2
 80070cc:	8b3a      	ldrh	r2, [r7, #24]
 80070ce:	4619      	mov	r1, r3
 80070d0:	f00a f99c 	bl	801140c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80070d4:	8afa      	ldrh	r2, [r7, #22]
 80070d6:	8b3b      	ldrh	r3, [r7, #24]
 80070d8:	4413      	add	r3, r2
 80070da:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80070dc:	8b7a      	ldrh	r2, [r7, #26]
 80070de:	8b3b      	ldrh	r3, [r7, #24]
 80070e0:	4413      	add	r3, r2
 80070e2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80070e4:	88fa      	ldrh	r2, [r7, #6]
 80070e6:	8b3b      	ldrh	r3, [r7, #24]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	61fb      	str	r3, [r7, #28]
 80070f6:	88fb      	ldrh	r3, [r7, #6]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <pbuf_copy_partial+0xca>
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1c4      	bne.n	800708c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007102:	8afb      	ldrh	r3, [r7, #22]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3720      	adds	r7, #32
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	08012a60 	.word	0x08012a60
 8007110:	08012da8 	.word	0x08012da8
 8007114:	08012ac0 	.word	0x08012ac0
 8007118:	08012dc8 	.word	0x08012dc8

0800711c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	603a      	str	r2, [r7, #0]
 8007126:	71fb      	strb	r3, [r7, #7]
 8007128:	460b      	mov	r3, r1
 800712a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	8919      	ldrh	r1, [r3, #8]
 8007130:	88ba      	ldrh	r2, [r7, #4]
 8007132:	79fb      	ldrb	r3, [r7, #7]
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff faa1 	bl	800667c <pbuf_alloc>
 800713a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <pbuf_clone+0x2a>
    return NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	e011      	b.n	800716a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f7ff fea3 	bl	8006e94 <pbuf_copy>
 800714e:	4603      	mov	r3, r0
 8007150:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007152:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d006      	beq.n	8007168 <pbuf_clone+0x4c>
 800715a:	4b06      	ldr	r3, [pc, #24]	; (8007174 <pbuf_clone+0x58>)
 800715c:	f240 5224 	movw	r2, #1316	; 0x524
 8007160:	4905      	ldr	r1, [pc, #20]	; (8007178 <pbuf_clone+0x5c>)
 8007162:	4806      	ldr	r0, [pc, #24]	; (800717c <pbuf_clone+0x60>)
 8007164:	f00a f968 	bl	8011438 <iprintf>
  return q;
 8007168:	68fb      	ldr	r3, [r7, #12]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	08012a60 	.word	0x08012a60
 8007178:	08012ed4 	.word	0x08012ed4
 800717c:	08012ac0 	.word	0x08012ac0

08007180 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007184:	f00a f970 	bl	8011468 <rand>
 8007188:	4603      	mov	r3, r0
 800718a:	b29b      	uxth	r3, r3
 800718c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007190:	b29b      	uxth	r3, r3
 8007192:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007196:	b29a      	uxth	r2, r3
 8007198:	4b01      	ldr	r3, [pc, #4]	; (80071a0 <tcp_init+0x20>)
 800719a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800719c:	bf00      	nop
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	2000000a 	.word	0x2000000a

080071a4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	7d1b      	ldrb	r3, [r3, #20]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d105      	bne.n	80071c0 <tcp_free+0x1c>
 80071b4:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <tcp_free+0x2c>)
 80071b6:	22d4      	movs	r2, #212	; 0xd4
 80071b8:	4906      	ldr	r1, [pc, #24]	; (80071d4 <tcp_free+0x30>)
 80071ba:	4807      	ldr	r0, [pc, #28]	; (80071d8 <tcp_free+0x34>)
 80071bc:	f00a f93c 	bl	8011438 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80071c0:	6879      	ldr	r1, [r7, #4]
 80071c2:	2001      	movs	r0, #1
 80071c4:	f7fe ff24 	bl	8006010 <memp_free>
}
 80071c8:	bf00      	nop
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	08012f60 	.word	0x08012f60
 80071d4:	08012f90 	.word	0x08012f90
 80071d8:	08012fa4 	.word	0x08012fa4

080071dc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	7d1b      	ldrb	r3, [r3, #20]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d105      	bne.n	80071f8 <tcp_free_listen+0x1c>
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <tcp_free_listen+0x2c>)
 80071ee:	22df      	movs	r2, #223	; 0xdf
 80071f0:	4906      	ldr	r1, [pc, #24]	; (800720c <tcp_free_listen+0x30>)
 80071f2:	4807      	ldr	r0, [pc, #28]	; (8007210 <tcp_free_listen+0x34>)
 80071f4:	f00a f920 	bl	8011438 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	2002      	movs	r0, #2
 80071fc:	f7fe ff08 	bl	8006010 <memp_free>
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	08012f60 	.word	0x08012f60
 800720c:	08012fcc 	.word	0x08012fcc
 8007210:	08012fa4 	.word	0x08012fa4

08007214 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007218:	f000 fea2 	bl	8007f60 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800721c:	4b07      	ldr	r3, [pc, #28]	; (800723c <tcp_tmr+0x28>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	b2da      	uxtb	r2, r3
 8007224:	4b05      	ldr	r3, [pc, #20]	; (800723c <tcp_tmr+0x28>)
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	4b04      	ldr	r3, [pc, #16]	; (800723c <tcp_tmr+0x28>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007234:	f000 fb54 	bl	80078e0 <tcp_slowtmr>
  }
}
 8007238:	bf00      	nop
 800723a:	bd80      	pop	{r7, pc}
 800723c:	200000cd 	.word	0x200000cd

08007240 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d105      	bne.n	800725c <tcp_remove_listener+0x1c>
 8007250:	4b0d      	ldr	r3, [pc, #52]	; (8007288 <tcp_remove_listener+0x48>)
 8007252:	22ff      	movs	r2, #255	; 0xff
 8007254:	490d      	ldr	r1, [pc, #52]	; (800728c <tcp_remove_listener+0x4c>)
 8007256:	480e      	ldr	r0, [pc, #56]	; (8007290 <tcp_remove_listener+0x50>)
 8007258:	f00a f8ee 	bl	8011438 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	e00a      	b.n	8007278 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d102      	bne.n	8007272 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1f1      	bne.n	8007262 <tcp_remove_listener+0x22>
    }
  }
}
 800727e:	bf00      	nop
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	08012f60 	.word	0x08012f60
 800728c:	08012fe8 	.word	0x08012fe8
 8007290:	08012fa4 	.word	0x08012fa4

08007294 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <tcp_listen_closed+0x1c>
 80072a2:	4b14      	ldr	r3, [pc, #80]	; (80072f4 <tcp_listen_closed+0x60>)
 80072a4:	f240 1211 	movw	r2, #273	; 0x111
 80072a8:	4913      	ldr	r1, [pc, #76]	; (80072f8 <tcp_listen_closed+0x64>)
 80072aa:	4814      	ldr	r0, [pc, #80]	; (80072fc <tcp_listen_closed+0x68>)
 80072ac:	f00a f8c4 	bl	8011438 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	7d1b      	ldrb	r3, [r3, #20]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d006      	beq.n	80072c6 <tcp_listen_closed+0x32>
 80072b8:	4b0e      	ldr	r3, [pc, #56]	; (80072f4 <tcp_listen_closed+0x60>)
 80072ba:	f44f 7289 	mov.w	r2, #274	; 0x112
 80072be:	4910      	ldr	r1, [pc, #64]	; (8007300 <tcp_listen_closed+0x6c>)
 80072c0:	480e      	ldr	r0, [pc, #56]	; (80072fc <tcp_listen_closed+0x68>)
 80072c2:	f00a f8b9 	bl	8011438 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80072c6:	2301      	movs	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	e00b      	b.n	80072e4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80072cc:	4a0d      	ldr	r2, [pc, #52]	; (8007304 <tcp_listen_closed+0x70>)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4618      	mov	r0, r3
 80072da:	f7ff ffb1 	bl	8007240 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3301      	adds	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d9f0      	bls.n	80072cc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80072ea:	bf00      	nop
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	08012f60 	.word	0x08012f60
 80072f8:	08013010 	.word	0x08013010
 80072fc:	08012fa4 	.word	0x08012fa4
 8007300:	0801301c 	.word	0x0801301c
 8007304:	080152f0 	.word	0x080152f0

08007308 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007308:	b5b0      	push	{r4, r5, r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af04      	add	r7, sp, #16
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d106      	bne.n	8007328 <tcp_close_shutdown+0x20>
 800731a:	4b63      	ldr	r3, [pc, #396]	; (80074a8 <tcp_close_shutdown+0x1a0>)
 800731c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007320:	4962      	ldr	r1, [pc, #392]	; (80074ac <tcp_close_shutdown+0x1a4>)
 8007322:	4863      	ldr	r0, [pc, #396]	; (80074b0 <tcp_close_shutdown+0x1a8>)
 8007324:	f00a f888 	bl	8011438 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d066      	beq.n	80073fc <tcp_close_shutdown+0xf4>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	7d1b      	ldrb	r3, [r3, #20]
 8007332:	2b04      	cmp	r3, #4
 8007334:	d003      	beq.n	800733e <tcp_close_shutdown+0x36>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	7d1b      	ldrb	r3, [r3, #20]
 800733a:	2b07      	cmp	r3, #7
 800733c:	d15e      	bne.n	80073fc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007342:	2b00      	cmp	r3, #0
 8007344:	d104      	bne.n	8007350 <tcp_close_shutdown+0x48>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800734a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800734e:	d055      	beq.n	80073fc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	8b5b      	ldrh	r3, [r3, #26]
 8007354:	f003 0310 	and.w	r3, r3, #16
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <tcp_close_shutdown+0x62>
 800735c:	4b52      	ldr	r3, [pc, #328]	; (80074a8 <tcp_close_shutdown+0x1a0>)
 800735e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007362:	4954      	ldr	r1, [pc, #336]	; (80074b4 <tcp_close_shutdown+0x1ac>)
 8007364:	4852      	ldr	r0, [pc, #328]	; (80074b0 <tcp_close_shutdown+0x1a8>)
 8007366:	f00a f867 	bl	8011438 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007372:	687d      	ldr	r5, [r7, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3304      	adds	r3, #4
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	8ad2      	ldrh	r2, [r2, #22]
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	8b09      	ldrh	r1, [r1, #24]
 8007380:	9102      	str	r1, [sp, #8]
 8007382:	9201      	str	r2, [sp, #4]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	462b      	mov	r3, r5
 8007388:	4622      	mov	r2, r4
 800738a:	4601      	mov	r1, r0
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f004 fe8d 	bl	800c0ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 f8c6 	bl	8008524 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007398:	4b47      	ldr	r3, [pc, #284]	; (80074b8 <tcp_close_shutdown+0x1b0>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d105      	bne.n	80073ae <tcp_close_shutdown+0xa6>
 80073a2:	4b45      	ldr	r3, [pc, #276]	; (80074b8 <tcp_close_shutdown+0x1b0>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	4a43      	ldr	r2, [pc, #268]	; (80074b8 <tcp_close_shutdown+0x1b0>)
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	e013      	b.n	80073d6 <tcp_close_shutdown+0xce>
 80073ae:	4b42      	ldr	r3, [pc, #264]	; (80074b8 <tcp_close_shutdown+0x1b0>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	e00c      	b.n	80073d0 <tcp_close_shutdown+0xc8>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d104      	bne.n	80073ca <tcp_close_shutdown+0xc2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	60da      	str	r2, [r3, #12]
 80073c8:	e005      	b.n	80073d6 <tcp_close_shutdown+0xce>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1ef      	bne.n	80073b6 <tcp_close_shutdown+0xae>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	60da      	str	r2, [r3, #12]
 80073dc:	4b37      	ldr	r3, [pc, #220]	; (80074bc <tcp_close_shutdown+0x1b4>)
 80073de:	2201      	movs	r2, #1
 80073e0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80073e2:	4b37      	ldr	r3, [pc, #220]	; (80074c0 <tcp_close_shutdown+0x1b8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d102      	bne.n	80073f2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80073ec:	f003 fd5a 	bl	800aea4 <tcp_trigger_input_pcb_close>
 80073f0:	e002      	b.n	80073f8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff fed6 	bl	80071a4 <tcp_free>
      }
      return ERR_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	e050      	b.n	800749e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	7d1b      	ldrb	r3, [r3, #20]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d03b      	beq.n	800747c <tcp_close_shutdown+0x174>
 8007404:	2b02      	cmp	r3, #2
 8007406:	dc44      	bgt.n	8007492 <tcp_close_shutdown+0x18a>
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <tcp_close_shutdown+0x10a>
 800740c:	2b01      	cmp	r3, #1
 800740e:	d02a      	beq.n	8007466 <tcp_close_shutdown+0x15e>
 8007410:	e03f      	b.n	8007492 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	8adb      	ldrh	r3, [r3, #22]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d021      	beq.n	800745e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800741a:	4b2a      	ldr	r3, [pc, #168]	; (80074c4 <tcp_close_shutdown+0x1bc>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d105      	bne.n	8007430 <tcp_close_shutdown+0x128>
 8007424:	4b27      	ldr	r3, [pc, #156]	; (80074c4 <tcp_close_shutdown+0x1bc>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	4a26      	ldr	r2, [pc, #152]	; (80074c4 <tcp_close_shutdown+0x1bc>)
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	e013      	b.n	8007458 <tcp_close_shutdown+0x150>
 8007430:	4b24      	ldr	r3, [pc, #144]	; (80074c4 <tcp_close_shutdown+0x1bc>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	60bb      	str	r3, [r7, #8]
 8007436:	e00c      	b.n	8007452 <tcp_close_shutdown+0x14a>
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	429a      	cmp	r2, r3
 8007440:	d104      	bne.n	800744c <tcp_close_shutdown+0x144>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	e005      	b.n	8007458 <tcp_close_shutdown+0x150>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	60bb      	str	r3, [r7, #8]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1ef      	bne.n	8007438 <tcp_close_shutdown+0x130>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7ff fea0 	bl	80071a4 <tcp_free>
      break;
 8007464:	e01a      	b.n	800749c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff ff14 	bl	8007294 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	4816      	ldr	r0, [pc, #88]	; (80074c8 <tcp_close_shutdown+0x1c0>)
 8007470:	f001 f8a8 	bl	80085c4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff feb1 	bl	80071dc <tcp_free_listen>
      break;
 800747a:	e00f      	b.n	800749c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800747c:	6879      	ldr	r1, [r7, #4]
 800747e:	480e      	ldr	r0, [pc, #56]	; (80074b8 <tcp_close_shutdown+0x1b0>)
 8007480:	f001 f8a0 	bl	80085c4 <tcp_pcb_remove>
 8007484:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <tcp_close_shutdown+0x1b4>)
 8007486:	2201      	movs	r2, #1
 8007488:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7ff fe8a 	bl	80071a4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007490:	e004      	b.n	800749c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f81a 	bl	80074cc <tcp_close_shutdown_fin>
 8007498:	4603      	mov	r3, r0
 800749a:	e000      	b.n	800749e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bdb0      	pop	{r4, r5, r7, pc}
 80074a6:	bf00      	nop
 80074a8:	08012f60 	.word	0x08012f60
 80074ac:	08013034 	.word	0x08013034
 80074b0:	08012fa4 	.word	0x08012fa4
 80074b4:	08013054 	.word	0x08013054
 80074b8:	20006df0 	.word	0x20006df0
 80074bc:	20006dec 	.word	0x20006dec
 80074c0:	20006e04 	.word	0x20006e04
 80074c4:	20006dfc 	.word	0x20006dfc
 80074c8:	20006df8 	.word	0x20006df8

080074cc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <tcp_close_shutdown_fin+0x1c>
 80074da:	4b2e      	ldr	r3, [pc, #184]	; (8007594 <tcp_close_shutdown_fin+0xc8>)
 80074dc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80074e0:	492d      	ldr	r1, [pc, #180]	; (8007598 <tcp_close_shutdown_fin+0xcc>)
 80074e2:	482e      	ldr	r0, [pc, #184]	; (800759c <tcp_close_shutdown_fin+0xd0>)
 80074e4:	f009 ffa8 	bl	8011438 <iprintf>

  switch (pcb->state) {
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	7d1b      	ldrb	r3, [r3, #20]
 80074ec:	2b07      	cmp	r3, #7
 80074ee:	d020      	beq.n	8007532 <tcp_close_shutdown_fin+0x66>
 80074f0:	2b07      	cmp	r3, #7
 80074f2:	dc2b      	bgt.n	800754c <tcp_close_shutdown_fin+0x80>
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d002      	beq.n	80074fe <tcp_close_shutdown_fin+0x32>
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d00d      	beq.n	8007518 <tcp_close_shutdown_fin+0x4c>
 80074fc:	e026      	b.n	800754c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f003 fee2 	bl	800b2c8 <tcp_send_fin>
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d11f      	bne.n	8007550 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2205      	movs	r2, #5
 8007514:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007516:	e01b      	b.n	8007550 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f003 fed5 	bl	800b2c8 <tcp_send_fin>
 800751e:	4603      	mov	r3, r0
 8007520:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d114      	bne.n	8007554 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2205      	movs	r2, #5
 800752e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007530:	e010      	b.n	8007554 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f003 fec8 	bl	800b2c8 <tcp_send_fin>
 8007538:	4603      	mov	r3, r0
 800753a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800753c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d109      	bne.n	8007558 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2209      	movs	r2, #9
 8007548:	751a      	strb	r2, [r3, #20]
      }
      break;
 800754a:	e005      	b.n	8007558 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	e01c      	b.n	800758a <tcp_close_shutdown_fin+0xbe>
      break;
 8007550:	bf00      	nop
 8007552:	e002      	b.n	800755a <tcp_close_shutdown_fin+0x8e>
      break;
 8007554:	bf00      	nop
 8007556:	e000      	b.n	800755a <tcp_close_shutdown_fin+0x8e>
      break;
 8007558:	bf00      	nop
  }

  if (err == ERR_OK) {
 800755a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d103      	bne.n	800756a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f003 ffee 	bl	800b544 <tcp_output>
 8007568:	e00d      	b.n	8007586 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800756a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800756e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007572:	d108      	bne.n	8007586 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8b5b      	ldrh	r3, [r3, #26]
 8007578:	f043 0308 	orr.w	r3, r3, #8
 800757c:	b29a      	uxth	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	e001      	b.n	800758a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007586:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	08012f60 	.word	0x08012f60
 8007598:	08013010 	.word	0x08013010
 800759c:	08012fa4 	.word	0x08012fa4

080075a0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d109      	bne.n	80075c2 <tcp_close+0x22>
 80075ae:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <tcp_close+0x4c>)
 80075b0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80075b4:	490e      	ldr	r1, [pc, #56]	; (80075f0 <tcp_close+0x50>)
 80075b6:	480f      	ldr	r0, [pc, #60]	; (80075f4 <tcp_close+0x54>)
 80075b8:	f009 ff3e 	bl	8011438 <iprintf>
 80075bc:	f06f 030f 	mvn.w	r3, #15
 80075c0:	e00f      	b.n	80075e2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	7d1b      	ldrb	r3, [r3, #20]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d006      	beq.n	80075d8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	8b5b      	ldrh	r3, [r3, #26]
 80075ce:	f043 0310 	orr.w	r3, r3, #16
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80075d8:	2101      	movs	r1, #1
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff fe94 	bl	8007308 <tcp_close_shutdown>
 80075e0:	4603      	mov	r3, r0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	08012f60 	.word	0x08012f60
 80075f0:	08013070 	.word	0x08013070
 80075f4:	08012fa4 	.word	0x08012fa4

080075f8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08e      	sub	sp, #56	; 0x38
 80075fc:	af04      	add	r7, sp, #16
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d107      	bne.n	8007618 <tcp_abandon+0x20>
 8007608:	4b52      	ldr	r3, [pc, #328]	; (8007754 <tcp_abandon+0x15c>)
 800760a:	f240 223d 	movw	r2, #573	; 0x23d
 800760e:	4952      	ldr	r1, [pc, #328]	; (8007758 <tcp_abandon+0x160>)
 8007610:	4852      	ldr	r0, [pc, #328]	; (800775c <tcp_abandon+0x164>)
 8007612:	f009 ff11 	bl	8011438 <iprintf>
 8007616:	e099      	b.n	800774c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7d1b      	ldrb	r3, [r3, #20]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d106      	bne.n	800762e <tcp_abandon+0x36>
 8007620:	4b4c      	ldr	r3, [pc, #304]	; (8007754 <tcp_abandon+0x15c>)
 8007622:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007626:	494e      	ldr	r1, [pc, #312]	; (8007760 <tcp_abandon+0x168>)
 8007628:	484c      	ldr	r0, [pc, #304]	; (800775c <tcp_abandon+0x164>)
 800762a:	f009 ff05 	bl	8011438 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	7d1b      	ldrb	r3, [r3, #20]
 8007632:	2b0a      	cmp	r3, #10
 8007634:	d107      	bne.n	8007646 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	484a      	ldr	r0, [pc, #296]	; (8007764 <tcp_abandon+0x16c>)
 800763a:	f000 ffc3 	bl	80085c4 <tcp_pcb_remove>
    tcp_free(pcb);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7ff fdb0 	bl	80071a4 <tcp_free>
 8007644:	e082      	b.n	800774c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007652:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007660:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	7d1b      	ldrb	r3, [r3, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d126      	bne.n	80076be <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8adb      	ldrh	r3, [r3, #22]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d02e      	beq.n	80076d6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007678:	4b3b      	ldr	r3, [pc, #236]	; (8007768 <tcp_abandon+0x170>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	429a      	cmp	r2, r3
 8007680:	d105      	bne.n	800768e <tcp_abandon+0x96>
 8007682:	4b39      	ldr	r3, [pc, #228]	; (8007768 <tcp_abandon+0x170>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	4a37      	ldr	r2, [pc, #220]	; (8007768 <tcp_abandon+0x170>)
 800768a:	6013      	str	r3, [r2, #0]
 800768c:	e013      	b.n	80076b6 <tcp_abandon+0xbe>
 800768e:	4b36      	ldr	r3, [pc, #216]	; (8007768 <tcp_abandon+0x170>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	61fb      	str	r3, [r7, #28]
 8007694:	e00c      	b.n	80076b0 <tcp_abandon+0xb8>
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	429a      	cmp	r2, r3
 800769e:	d104      	bne.n	80076aa <tcp_abandon+0xb2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	60da      	str	r2, [r3, #12]
 80076a8:	e005      	b.n	80076b6 <tcp_abandon+0xbe>
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	61fb      	str	r3, [r7, #28]
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1ef      	bne.n	8007696 <tcp_abandon+0x9e>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	60da      	str	r2, [r3, #12]
 80076bc:	e00b      	b.n	80076d6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	8adb      	ldrh	r3, [r3, #22]
 80076c6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	4828      	ldr	r0, [pc, #160]	; (800776c <tcp_abandon+0x174>)
 80076cc:	f000 ff7a 	bl	80085c4 <tcp_pcb_remove>
 80076d0:	4b27      	ldr	r3, [pc, #156]	; (8007770 <tcp_abandon+0x178>)
 80076d2:	2201      	movs	r2, #1
 80076d4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fd1c 	bl	8008120 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d004      	beq.n	80076fa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fd13 	bl	8008120 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d004      	beq.n	800770c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fd0a 	bl	8008120 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00e      	beq.n	8007730 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3304      	adds	r3, #4
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	8b12      	ldrh	r2, [r2, #24]
 800771c:	9202      	str	r2, [sp, #8]
 800771e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007720:	9201      	str	r2, [sp, #4]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	460b      	mov	r3, r1
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	69b9      	ldr	r1, [r7, #24]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f004 fcbe 	bl	800c0ac <tcp_rst>
    }
    last_state = pcb->state;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	7d1b      	ldrb	r3, [r3, #20]
 8007734:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7ff fd34 	bl	80071a4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d004      	beq.n	800774c <tcp_abandon+0x154>
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f06f 010c 	mvn.w	r1, #12
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	4798      	blx	r3
  }
}
 800774c:	3728      	adds	r7, #40	; 0x28
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	08012f60 	.word	0x08012f60
 8007758:	080130a4 	.word	0x080130a4
 800775c:	08012fa4 	.word	0x08012fa4
 8007760:	080130c0 	.word	0x080130c0
 8007764:	20006e00 	.word	0x20006e00
 8007768:	20006dfc 	.word	0x20006dfc
 800776c:	20006df0 	.word	0x20006df0
 8007770:	20006dec 	.word	0x20006dec

08007774 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800777c:	2101      	movs	r1, #1
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff ff3a 	bl	80075f8 <tcp_abandon>
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d106      	bne.n	80077a8 <tcp_update_rcv_ann_wnd+0x1c>
 800779a:	4b25      	ldr	r3, [pc, #148]	; (8007830 <tcp_update_rcv_ann_wnd+0xa4>)
 800779c:	f240 32a6 	movw	r2, #934	; 0x3a6
 80077a0:	4924      	ldr	r1, [pc, #144]	; (8007834 <tcp_update_rcv_ann_wnd+0xa8>)
 80077a2:	4825      	ldr	r0, [pc, #148]	; (8007838 <tcp_update_rcv_ann_wnd+0xac>)
 80077a4:	f009 fe48 	bl	8011438 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80077b0:	4413      	add	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80077bc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80077c0:	bf28      	it	cs
 80077c2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80077c6:	b292      	uxth	r2, r2
 80077c8:	4413      	add	r3, r2
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	db08      	blt.n	80077e4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	e020      	b.n	8007826 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	dd03      	ble.n	80077fa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077f8:	e014      	b.n	8007824 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800780c:	d306      	bcc.n	800781c <tcp_update_rcv_ann_wnd+0x90>
 800780e:	4b08      	ldr	r3, [pc, #32]	; (8007830 <tcp_update_rcv_ann_wnd+0xa4>)
 8007810:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007814:	4909      	ldr	r1, [pc, #36]	; (800783c <tcp_update_rcv_ann_wnd+0xb0>)
 8007816:	4808      	ldr	r0, [pc, #32]	; (8007838 <tcp_update_rcv_ann_wnd+0xac>)
 8007818:	f009 fe0e 	bl	8011438 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	b29a      	uxth	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007824:	2300      	movs	r3, #0
  }
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	08012f60 	.word	0x08012f60
 8007834:	080131bc 	.word	0x080131bc
 8007838:	08012fa4 	.word	0x08012fa4
 800783c:	080131e0 	.word	0x080131e0

08007840 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d107      	bne.n	8007862 <tcp_recved+0x22>
 8007852:	4b1f      	ldr	r3, [pc, #124]	; (80078d0 <tcp_recved+0x90>)
 8007854:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007858:	491e      	ldr	r1, [pc, #120]	; (80078d4 <tcp_recved+0x94>)
 800785a:	481f      	ldr	r0, [pc, #124]	; (80078d8 <tcp_recved+0x98>)
 800785c:	f009 fdec 	bl	8011438 <iprintf>
 8007860:	e032      	b.n	80078c8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7d1b      	ldrb	r3, [r3, #20]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d106      	bne.n	8007878 <tcp_recved+0x38>
 800786a:	4b19      	ldr	r3, [pc, #100]	; (80078d0 <tcp_recved+0x90>)
 800786c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007870:	491a      	ldr	r1, [pc, #104]	; (80078dc <tcp_recved+0x9c>)
 8007872:	4819      	ldr	r0, [pc, #100]	; (80078d8 <tcp_recved+0x98>)
 8007874:	f009 fde0 	bl	8011438 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800787c:	887b      	ldrh	r3, [r7, #2]
 800787e:	4413      	add	r3, r2
 8007880:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007882:	89fb      	ldrh	r3, [r7, #14]
 8007884:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007888:	d804      	bhi.n	8007894 <tcp_recved+0x54>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800788e:	89fa      	ldrh	r2, [r7, #14]
 8007890:	429a      	cmp	r2, r3
 8007892:	d204      	bcs.n	800789e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800789a:	851a      	strh	r2, [r3, #40]	; 0x28
 800789c:	e002      	b.n	80078a4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	89fa      	ldrh	r2, [r7, #14]
 80078a2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff ff71 	bl	800778c <tcp_update_rcv_ann_wnd>
 80078aa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80078b2:	d309      	bcc.n	80078c8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8b5b      	ldrh	r3, [r3, #26]
 80078b8:	f043 0302 	orr.w	r3, r3, #2
 80078bc:	b29a      	uxth	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f003 fe3e 	bl	800b544 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	08012f60 	.word	0x08012f60
 80078d4:	080131fc 	.word	0x080131fc
 80078d8:	08012fa4 	.word	0x08012fa4
 80078dc:	08013214 	.word	0x08013214

080078e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80078e0:	b5b0      	push	{r4, r5, r7, lr}
 80078e2:	b090      	sub	sp, #64	; 0x40
 80078e4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80078ec:	4b94      	ldr	r3, [pc, #592]	; (8007b40 <tcp_slowtmr+0x260>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	4a93      	ldr	r2, [pc, #588]	; (8007b40 <tcp_slowtmr+0x260>)
 80078f4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80078f6:	4b93      	ldr	r3, [pc, #588]	; (8007b44 <tcp_slowtmr+0x264>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	3301      	adds	r3, #1
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	4b91      	ldr	r3, [pc, #580]	; (8007b44 <tcp_slowtmr+0x264>)
 8007900:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007906:	4b90      	ldr	r3, [pc, #576]	; (8007b48 <tcp_slowtmr+0x268>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800790c:	e29d      	b.n	8007e4a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007910:	7d1b      	ldrb	r3, [r3, #20]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <tcp_slowtmr+0x44>
 8007916:	4b8d      	ldr	r3, [pc, #564]	; (8007b4c <tcp_slowtmr+0x26c>)
 8007918:	f240 42be 	movw	r2, #1214	; 0x4be
 800791c:	498c      	ldr	r1, [pc, #560]	; (8007b50 <tcp_slowtmr+0x270>)
 800791e:	488d      	ldr	r0, [pc, #564]	; (8007b54 <tcp_slowtmr+0x274>)
 8007920:	f009 fd8a 	bl	8011438 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	7d1b      	ldrb	r3, [r3, #20]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d106      	bne.n	800793a <tcp_slowtmr+0x5a>
 800792c:	4b87      	ldr	r3, [pc, #540]	; (8007b4c <tcp_slowtmr+0x26c>)
 800792e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007932:	4989      	ldr	r1, [pc, #548]	; (8007b58 <tcp_slowtmr+0x278>)
 8007934:	4887      	ldr	r0, [pc, #540]	; (8007b54 <tcp_slowtmr+0x274>)
 8007936:	f009 fd7f 	bl	8011438 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	7d1b      	ldrb	r3, [r3, #20]
 800793e:	2b0a      	cmp	r3, #10
 8007940:	d106      	bne.n	8007950 <tcp_slowtmr+0x70>
 8007942:	4b82      	ldr	r3, [pc, #520]	; (8007b4c <tcp_slowtmr+0x26c>)
 8007944:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007948:	4984      	ldr	r1, [pc, #528]	; (8007b5c <tcp_slowtmr+0x27c>)
 800794a:	4882      	ldr	r0, [pc, #520]	; (8007b54 <tcp_slowtmr+0x274>)
 800794c:	f009 fd74 	bl	8011438 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	7f9a      	ldrb	r2, [r3, #30]
 8007954:	4b7b      	ldr	r3, [pc, #492]	; (8007b44 <tcp_slowtmr+0x264>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	429a      	cmp	r2, r3
 800795a:	d105      	bne.n	8007968 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800795c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007966:	e270      	b.n	8007e4a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007968:	4b76      	ldr	r3, [pc, #472]	; (8007b44 <tcp_slowtmr+0x264>)
 800796a:	781a      	ldrb	r2, [r3, #0]
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007970:	2300      	movs	r3, #0
 8007972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	7d1b      	ldrb	r3, [r3, #20]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d10a      	bne.n	800799a <tcp_slowtmr+0xba>
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800798a:	2b05      	cmp	r3, #5
 800798c:	d905      	bls.n	800799a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800798e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007992:	3301      	adds	r3, #1
 8007994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007998:	e11e      	b.n	8007bd8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079a0:	2b0b      	cmp	r3, #11
 80079a2:	d905      	bls.n	80079b0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80079a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079a8:	3301      	adds	r3, #1
 80079aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079ae:	e113      	b.n	8007bd8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d075      	beq.n	8007aa6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d006      	beq.n	80079d0 <tcp_slowtmr+0xf0>
 80079c2:	4b62      	ldr	r3, [pc, #392]	; (8007b4c <tcp_slowtmr+0x26c>)
 80079c4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80079c8:	4965      	ldr	r1, [pc, #404]	; (8007b60 <tcp_slowtmr+0x280>)
 80079ca:	4862      	ldr	r0, [pc, #392]	; (8007b54 <tcp_slowtmr+0x274>)
 80079cc:	f009 fd34 	bl	8011438 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d106      	bne.n	80079e6 <tcp_slowtmr+0x106>
 80079d8:	4b5c      	ldr	r3, [pc, #368]	; (8007b4c <tcp_slowtmr+0x26c>)
 80079da:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80079de:	4961      	ldr	r1, [pc, #388]	; (8007b64 <tcp_slowtmr+0x284>)
 80079e0:	485c      	ldr	r0, [pc, #368]	; (8007b54 <tcp_slowtmr+0x274>)
 80079e2:	f009 fd29 	bl	8011438 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80079ec:	2b0b      	cmp	r3, #11
 80079ee:	d905      	bls.n	80079fc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80079f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079f4:	3301      	adds	r3, #1
 80079f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079fa:	e0ed      	b.n	8007bd8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007a02:	3b01      	subs	r3, #1
 8007a04:	4a58      	ldr	r2, [pc, #352]	; (8007b68 <tcp_slowtmr+0x288>)
 8007a06:	5cd3      	ldrb	r3, [r2, r3]
 8007a08:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007a10:	7c7a      	ldrb	r2, [r7, #17]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d907      	bls.n	8007a26 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007a2c:	7c7a      	ldrb	r2, [r7, #17]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	f200 80d2 	bhi.w	8007bd8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007a34:	2301      	movs	r3, #1
 8007a36:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d108      	bne.n	8007a54 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007a42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a44:	f004 fc26 	bl	800c294 <tcp_zero_window_probe>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d014      	beq.n	8007a78 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007a4e:	2300      	movs	r3, #0
 8007a50:	623b      	str	r3, [r7, #32]
 8007a52:	e011      	b.n	8007a78 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a5e:	f003 faeb 	bl	800b038 <tcp_split_unsent_seg>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d107      	bne.n	8007a78 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007a68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a6a:	f003 fd6b 	bl	800b544 <tcp_output>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007a74:	2300      	movs	r3, #0
 8007a76:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 80ac 	beq.w	8007bd8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007a8e:	2b06      	cmp	r3, #6
 8007a90:	f200 80a2 	bhi.w	8007bd8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007aa4:	e098      	b.n	8007bd8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	db0f      	blt.n	8007ad0 <tcp_slowtmr+0x1f0>
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007ab6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d008      	beq.n	8007ad0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	b21a      	sxth	r2, r3
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007adc:	429a      	cmp	r2, r3
 8007ade:	db7b      	blt.n	8007bd8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007ae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ae2:	f004 f821 	bl	800bb28 <tcp_rexmit_rto_prepare>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d007      	beq.n	8007afc <tcp_slowtmr+0x21c>
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d171      	bne.n	8007bd8 <tcp_slowtmr+0x2f8>
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d06d      	beq.n	8007bd8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	7d1b      	ldrb	r3, [r3, #20]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d03a      	beq.n	8007b7a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b0a:	2b0c      	cmp	r3, #12
 8007b0c:	bf28      	it	cs
 8007b0e:	230c      	movcs	r3, #12
 8007b10:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007b18:	10db      	asrs	r3, r3, #3
 8007b1a:	b21b      	sxth	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007b24:	4413      	add	r3, r2
 8007b26:	7efa      	ldrb	r2, [r7, #27]
 8007b28:	4910      	ldr	r1, [pc, #64]	; (8007b6c <tcp_slowtmr+0x28c>)
 8007b2a:	5c8a      	ldrb	r2, [r1, r2]
 8007b2c:	4093      	lsls	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007b36:	4293      	cmp	r3, r2
 8007b38:	dc1a      	bgt.n	8007b70 <tcp_slowtmr+0x290>
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	b21a      	sxth	r2, r3
 8007b3e:	e019      	b.n	8007b74 <tcp_slowtmr+0x294>
 8007b40:	20006df4 	.word	0x20006df4
 8007b44:	200000ce 	.word	0x200000ce
 8007b48:	20006df0 	.word	0x20006df0
 8007b4c:	08012f60 	.word	0x08012f60
 8007b50:	080132a4 	.word	0x080132a4
 8007b54:	08012fa4 	.word	0x08012fa4
 8007b58:	080132d0 	.word	0x080132d0
 8007b5c:	080132fc 	.word	0x080132fc
 8007b60:	0801332c 	.word	0x0801332c
 8007b64:	08013360 	.word	0x08013360
 8007b68:	080152e8 	.word	0x080152e8
 8007b6c:	080152d8 	.word	0x080152d8
 8007b70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	bf28      	it	cs
 8007b90:	4613      	movcs	r3, r2
 8007b92:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007b94:	8a7b      	ldrh	r3, [r7, #18]
 8007b96:	085b      	lsrs	r3, r3, #1
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d206      	bcs.n	8007bc0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bb6:	005b      	lsls	r3, r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007bd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bd4:	f004 f818 	bl	800bc08 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	7d1b      	ldrb	r3, [r3, #20]
 8007bdc:	2b06      	cmp	r3, #6
 8007bde:	d111      	bne.n	8007c04 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	8b5b      	ldrh	r3, [r3, #26]
 8007be4:	f003 0310 	and.w	r3, r3, #16
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00b      	beq.n	8007c04 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007bec:	4b9c      	ldr	r3, [pc, #624]	; (8007e60 <tcp_slowtmr+0x580>)
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b28      	cmp	r3, #40	; 0x28
 8007bf8:	d904      	bls.n	8007c04 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bfe:	3301      	adds	r3, #1
 8007c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c06:	7a5b      	ldrb	r3, [r3, #9]
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d04a      	beq.n	8007ca6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c12:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d003      	beq.n	8007c20 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007c1c:	2b07      	cmp	r3, #7
 8007c1e:	d142      	bne.n	8007ca6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c20:	4b8f      	ldr	r3, [pc, #572]	; (8007e60 <tcp_slowtmr+0x580>)
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007c30:	4b8c      	ldr	r3, [pc, #560]	; (8007e64 <tcp_slowtmr+0x584>)
 8007c32:	440b      	add	r3, r1
 8007c34:	498c      	ldr	r1, [pc, #560]	; (8007e68 <tcp_slowtmr+0x588>)
 8007c36:	fba1 1303 	umull	r1, r3, r1, r3
 8007c3a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d90a      	bls.n	8007c56 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c44:	3301      	adds	r3, #1
 8007c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007c4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c4e:	3301      	adds	r3, #1
 8007c50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007c54:	e027      	b.n	8007ca6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c56:	4b82      	ldr	r3, [pc, #520]	; (8007e60 <tcp_slowtmr+0x580>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c68:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	4b7f      	ldr	r3, [pc, #508]	; (8007e6c <tcp_slowtmr+0x58c>)
 8007c70:	fb03 f300 	mul.w	r3, r3, r0
 8007c74:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007c76:	497c      	ldr	r1, [pc, #496]	; (8007e68 <tcp_slowtmr+0x588>)
 8007c78:	fba1 1303 	umull	r1, r3, r1, r3
 8007c7c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d911      	bls.n	8007ca6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007c82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c84:	f004 fac6 	bl	800c214 <tcp_keepalive>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007c8e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d107      	bne.n	8007ca6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c98:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d011      	beq.n	8007cd2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007cae:	4b6c      	ldr	r3, [pc, #432]	; (8007e60 <tcp_slowtmr+0x580>)
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	440b      	add	r3, r1
 8007cc6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d302      	bcc.n	8007cd2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007ccc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cce:	f000 fddd 	bl	800888c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd4:	7d1b      	ldrb	r3, [r3, #20]
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d10b      	bne.n	8007cf2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007cda:	4b61      	ldr	r3, [pc, #388]	; (8007e60 <tcp_slowtmr+0x580>)
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	2b28      	cmp	r3, #40	; 0x28
 8007ce6:	d904      	bls.n	8007cf2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cec:	3301      	adds	r3, #1
 8007cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	7d1b      	ldrb	r3, [r3, #20]
 8007cf6:	2b09      	cmp	r3, #9
 8007cf8:	d10b      	bne.n	8007d12 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007cfa:	4b59      	ldr	r3, [pc, #356]	; (8007e60 <tcp_slowtmr+0x580>)
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2bf0      	cmp	r3, #240	; 0xf0
 8007d06:	d904      	bls.n	8007d12 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007d12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d060      	beq.n	8007ddc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d20:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d24:	f000 fbfe 	bl	8008524 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d010      	beq.n	8007d50 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007d2e:	4b50      	ldr	r3, [pc, #320]	; (8007e70 <tcp_slowtmr+0x590>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d106      	bne.n	8007d46 <tcp_slowtmr+0x466>
 8007d38:	4b4e      	ldr	r3, [pc, #312]	; (8007e74 <tcp_slowtmr+0x594>)
 8007d3a:	f240 526d 	movw	r2, #1389	; 0x56d
 8007d3e:	494e      	ldr	r1, [pc, #312]	; (8007e78 <tcp_slowtmr+0x598>)
 8007d40:	484e      	ldr	r0, [pc, #312]	; (8007e7c <tcp_slowtmr+0x59c>)
 8007d42:	f009 fb79 	bl	8011438 <iprintf>
        prev->next = pcb->next;
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	68da      	ldr	r2, [r3, #12]
 8007d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4c:	60da      	str	r2, [r3, #12]
 8007d4e:	e00f      	b.n	8007d70 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007d50:	4b47      	ldr	r3, [pc, #284]	; (8007e70 <tcp_slowtmr+0x590>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d006      	beq.n	8007d68 <tcp_slowtmr+0x488>
 8007d5a:	4b46      	ldr	r3, [pc, #280]	; (8007e74 <tcp_slowtmr+0x594>)
 8007d5c:	f240 5271 	movw	r2, #1393	; 0x571
 8007d60:	4947      	ldr	r1, [pc, #284]	; (8007e80 <tcp_slowtmr+0x5a0>)
 8007d62:	4846      	ldr	r0, [pc, #280]	; (8007e7c <tcp_slowtmr+0x59c>)
 8007d64:	f009 fb68 	bl	8011438 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	4a40      	ldr	r2, [pc, #256]	; (8007e70 <tcp_slowtmr+0x590>)
 8007d6e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007d70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d013      	beq.n	8007da0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007d80:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d84:	3304      	adds	r3, #4
 8007d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d88:	8ad2      	ldrh	r2, [r2, #22]
 8007d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d8c:	8b09      	ldrh	r1, [r1, #24]
 8007d8e:	9102      	str	r1, [sp, #8]
 8007d90:	9201      	str	r2, [sp, #4]
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	462b      	mov	r3, r5
 8007d96:	4622      	mov	r2, r4
 8007d98:	4601      	mov	r1, r0
 8007d9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d9c:	f004 f986 	bl	800c0ac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	7d1b      	ldrb	r3, [r3, #20]
 8007daa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007db6:	6838      	ldr	r0, [r7, #0]
 8007db8:	f7ff f9f4 	bl	80071a4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007dbc:	4b31      	ldr	r3, [pc, #196]	; (8007e84 <tcp_slowtmr+0x5a4>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <tcp_slowtmr+0x4f2>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f06f 010c 	mvn.w	r1, #12
 8007dce:	68b8      	ldr	r0, [r7, #8]
 8007dd0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007dd2:	4b2c      	ldr	r3, [pc, #176]	; (8007e84 <tcp_slowtmr+0x5a4>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d037      	beq.n	8007e4a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007dda:	e592      	b.n	8007902 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	7f1b      	ldrb	r3, [r3, #28]
 8007dea:	3301      	adds	r3, #1
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df4:	7f1a      	ldrb	r2, [r3, #28]
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	7f5b      	ldrb	r3, [r3, #29]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d325      	bcc.n	8007e4a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	2200      	movs	r2, #0
 8007e02:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007e04:	4b1f      	ldr	r3, [pc, #124]	; (8007e84 <tcp_slowtmr+0x5a4>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <tcp_slowtmr+0x54c>
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e1c:	6912      	ldr	r2, [r2, #16]
 8007e1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
 8007e24:	4603      	mov	r3, r0
 8007e26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007e2a:	e002      	b.n	8007e32 <tcp_slowtmr+0x552>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007e32:	4b14      	ldr	r3, [pc, #80]	; (8007e84 <tcp_slowtmr+0x5a4>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d000      	beq.n	8007e3c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007e3a:	e562      	b.n	8007902 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007e3c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d102      	bne.n	8007e4a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e46:	f003 fb7d 	bl	800b544 <tcp_output>
  while (pcb != NULL) {
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f47f ad5e 	bne.w	800790e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007e56:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <tcp_slowtmr+0x5a8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007e5c:	e069      	b.n	8007f32 <tcp_slowtmr+0x652>
 8007e5e:	bf00      	nop
 8007e60:	20006df4 	.word	0x20006df4
 8007e64:	000a4cb8 	.word	0x000a4cb8
 8007e68:	10624dd3 	.word	0x10624dd3
 8007e6c:	000124f8 	.word	0x000124f8
 8007e70:	20006df0 	.word	0x20006df0
 8007e74:	08012f60 	.word	0x08012f60
 8007e78:	08013398 	.word	0x08013398
 8007e7c:	08012fa4 	.word	0x08012fa4
 8007e80:	080133c4 	.word	0x080133c4
 8007e84:	20006dec 	.word	0x20006dec
 8007e88:	20006e00 	.word	0x20006e00
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	7d1b      	ldrb	r3, [r3, #20]
 8007e90:	2b0a      	cmp	r3, #10
 8007e92:	d006      	beq.n	8007ea2 <tcp_slowtmr+0x5c2>
 8007e94:	4b2b      	ldr	r3, [pc, #172]	; (8007f44 <tcp_slowtmr+0x664>)
 8007e96:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007e9a:	492b      	ldr	r1, [pc, #172]	; (8007f48 <tcp_slowtmr+0x668>)
 8007e9c:	482b      	ldr	r0, [pc, #172]	; (8007f4c <tcp_slowtmr+0x66c>)
 8007e9e:	f009 facb 	bl	8011438 <iprintf>
    pcb_remove = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007ea8:	4b29      	ldr	r3, [pc, #164]	; (8007f50 <tcp_slowtmr+0x670>)
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2bf0      	cmp	r3, #240	; 0xf0
 8007eb4:	d904      	bls.n	8007ec0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eba:	3301      	adds	r3, #1
 8007ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d02f      	beq.n	8007f28 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007ec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eca:	f000 fb2b 	bl	8008524 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d010      	beq.n	8007ef6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007ed4:	4b1f      	ldr	r3, [pc, #124]	; (8007f54 <tcp_slowtmr+0x674>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d106      	bne.n	8007eec <tcp_slowtmr+0x60c>
 8007ede:	4b19      	ldr	r3, [pc, #100]	; (8007f44 <tcp_slowtmr+0x664>)
 8007ee0:	f240 52af 	movw	r2, #1455	; 0x5af
 8007ee4:	491c      	ldr	r1, [pc, #112]	; (8007f58 <tcp_slowtmr+0x678>)
 8007ee6:	4819      	ldr	r0, [pc, #100]	; (8007f4c <tcp_slowtmr+0x66c>)
 8007ee8:	f009 faa6 	bl	8011438 <iprintf>
        prev->next = pcb->next;
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	60da      	str	r2, [r3, #12]
 8007ef4:	e00f      	b.n	8007f16 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007ef6:	4b17      	ldr	r3, [pc, #92]	; (8007f54 <tcp_slowtmr+0x674>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d006      	beq.n	8007f0e <tcp_slowtmr+0x62e>
 8007f00:	4b10      	ldr	r3, [pc, #64]	; (8007f44 <tcp_slowtmr+0x664>)
 8007f02:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007f06:	4915      	ldr	r1, [pc, #84]	; (8007f5c <tcp_slowtmr+0x67c>)
 8007f08:	4810      	ldr	r0, [pc, #64]	; (8007f4c <tcp_slowtmr+0x66c>)
 8007f0a:	f009 fa95 	bl	8011438 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	4a10      	ldr	r2, [pc, #64]	; (8007f54 <tcp_slowtmr+0x674>)
 8007f14:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f18:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007f20:	69f8      	ldr	r0, [r7, #28]
 8007f22:	f7ff f93f 	bl	80071a4 <tcp_free>
 8007f26:	e004      	b.n	8007f32 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1a9      	bne.n	8007e8c <tcp_slowtmr+0x5ac>
    }
  }
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	3730      	adds	r7, #48	; 0x30
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bdb0      	pop	{r4, r5, r7, pc}
 8007f42:	bf00      	nop
 8007f44:	08012f60 	.word	0x08012f60
 8007f48:	080133f0 	.word	0x080133f0
 8007f4c:	08012fa4 	.word	0x08012fa4
 8007f50:	20006df4 	.word	0x20006df4
 8007f54:	20006e00 	.word	0x20006e00
 8007f58:	08013420 	.word	0x08013420
 8007f5c:	08013448 	.word	0x08013448

08007f60 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007f66:	4b2d      	ldr	r3, [pc, #180]	; (800801c <tcp_fasttmr+0xbc>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	4b2b      	ldr	r3, [pc, #172]	; (800801c <tcp_fasttmr+0xbc>)
 8007f70:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007f72:	4b2b      	ldr	r3, [pc, #172]	; (8008020 <tcp_fasttmr+0xc0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007f78:	e048      	b.n	800800c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	7f9a      	ldrb	r2, [r3, #30]
 8007f7e:	4b27      	ldr	r3, [pc, #156]	; (800801c <tcp_fasttmr+0xbc>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d03f      	beq.n	8008006 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007f86:	4b25      	ldr	r3, [pc, #148]	; (800801c <tcp_fasttmr+0xbc>)
 8007f88:	781a      	ldrb	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	8b5b      	ldrh	r3, [r3, #26]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d010      	beq.n	8007fbc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	8b5b      	ldrh	r3, [r3, #26]
 8007f9e:	f043 0302 	orr.w	r3, r3, #2
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f003 facb 	bl	800b544 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	8b5b      	ldrh	r3, [r3, #26]
 8007fb2:	f023 0303 	bic.w	r3, r3, #3
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	8b5b      	ldrh	r3, [r3, #26]
 8007fc0:	f003 0308 	and.w	r3, r3, #8
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d009      	beq.n	8007fdc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	8b5b      	ldrh	r3, [r3, #26]
 8007fcc:	f023 0308 	bic.w	r3, r3, #8
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7ff fa78 	bl	80074cc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007fea:	4b0e      	ldr	r3, [pc, #56]	; (8008024 <tcp_fasttmr+0xc4>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f819 	bl	8008028 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007ff6:	4b0b      	ldr	r3, [pc, #44]	; (8008024 <tcp_fasttmr+0xc4>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d000      	beq.n	8008000 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007ffe:	e7b8      	b.n	8007f72 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	607b      	str	r3, [r7, #4]
 8008004:	e002      	b.n	800800c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1b3      	bne.n	8007f7a <tcp_fasttmr+0x1a>
    }
  }
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	200000ce 	.word	0x200000ce
 8008020:	20006df0 	.word	0x20006df0
 8008024:	20006dec 	.word	0x20006dec

08008028 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008028:	b590      	push	{r4, r7, lr}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <tcp_process_refused_data+0x22>
 8008036:	4b37      	ldr	r3, [pc, #220]	; (8008114 <tcp_process_refused_data+0xec>)
 8008038:	f240 6209 	movw	r2, #1545	; 0x609
 800803c:	4936      	ldr	r1, [pc, #216]	; (8008118 <tcp_process_refused_data+0xf0>)
 800803e:	4837      	ldr	r0, [pc, #220]	; (800811c <tcp_process_refused_data+0xf4>)
 8008040:	f009 f9fa 	bl	8011438 <iprintf>
 8008044:	f06f 030f 	mvn.w	r3, #15
 8008048:	e060      	b.n	800810c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800804e:	7b5b      	ldrb	r3, [r3, #13]
 8008050:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008056:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00b      	beq.n	8008080 <tcp_process_refused_data+0x58>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6918      	ldr	r0, [r3, #16]
 8008072:	2300      	movs	r3, #0
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	47a0      	blx	r4
 800807a:	4603      	mov	r3, r0
 800807c:	73fb      	strb	r3, [r7, #15]
 800807e:	e007      	b.n	8008090 <tcp_process_refused_data+0x68>
 8008080:	2300      	movs	r3, #0
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	6879      	ldr	r1, [r7, #4]
 8008086:	2000      	movs	r0, #0
 8008088:	f000 f8a4 	bl	80081d4 <tcp_recv_null>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d12a      	bne.n	80080ee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d033      	beq.n	800810a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80080aa:	d005      	beq.n	80080b8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b0:	3301      	adds	r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00b      	beq.n	80080da <tcp_process_refused_data+0xb2>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6918      	ldr	r0, [r3, #16]
 80080cc:	2300      	movs	r3, #0
 80080ce:	2200      	movs	r2, #0
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	47a0      	blx	r4
 80080d4:	4603      	mov	r3, r0
 80080d6:	73fb      	strb	r3, [r7, #15]
 80080d8:	e001      	b.n	80080de <tcp_process_refused_data+0xb6>
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80080de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e2:	f113 0f0d 	cmn.w	r3, #13
 80080e6:	d110      	bne.n	800810a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80080e8:	f06f 030c 	mvn.w	r3, #12
 80080ec:	e00e      	b.n	800810c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80080ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080f2:	f113 0f0d 	cmn.w	r3, #13
 80080f6:	d102      	bne.n	80080fe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80080f8:	f06f 030c 	mvn.w	r3, #12
 80080fc:	e006      	b.n	800810c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008104:	f06f 0304 	mvn.w	r3, #4
 8008108:	e000      	b.n	800810c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	bd90      	pop	{r4, r7, pc}
 8008114:	08012f60 	.word	0x08012f60
 8008118:	08013470 	.word	0x08013470
 800811c:	08012fa4 	.word	0x08012fa4

08008120 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008128:	e007      	b.n	800813a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f80a 	bl	800814a <tcp_seg_free>
    seg = next;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1f4      	bne.n	800812a <tcp_segs_free+0xa>
  }
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00c      	beq.n	8008172 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d004      	beq.n	800816a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe fd6d 	bl	8006c44 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	2003      	movs	r0, #3
 800816e:	f7fd ff4f 	bl	8006010 <memp_free>
  }
}
 8008172:	bf00      	nop
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d106      	bne.n	8008198 <tcp_seg_copy+0x1c>
 800818a:	4b0f      	ldr	r3, [pc, #60]	; (80081c8 <tcp_seg_copy+0x4c>)
 800818c:	f240 6282 	movw	r2, #1666	; 0x682
 8008190:	490e      	ldr	r1, [pc, #56]	; (80081cc <tcp_seg_copy+0x50>)
 8008192:	480f      	ldr	r0, [pc, #60]	; (80081d0 <tcp_seg_copy+0x54>)
 8008194:	f009 f950 	bl	8011438 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008198:	2003      	movs	r0, #3
 800819a:	f7fd feed 	bl	8005f78 <memp_malloc>
 800819e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <tcp_seg_copy+0x2e>
    return NULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	e00a      	b.n	80081c0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80081aa:	2210      	movs	r2, #16
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f009 f92c 	bl	801140c <memcpy>
  pbuf_ref(cseg->p);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe fde3 	bl	8006d84 <pbuf_ref>
  return cseg;
 80081be:	68fb      	ldr	r3, [r7, #12]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	08012f60 	.word	0x08012f60
 80081cc:	080134b4 	.word	0x080134b4
 80081d0:	08012fa4 	.word	0x08012fa4

080081d4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d109      	bne.n	80081fc <tcp_recv_null+0x28>
 80081e8:	4b12      	ldr	r3, [pc, #72]	; (8008234 <tcp_recv_null+0x60>)
 80081ea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80081ee:	4912      	ldr	r1, [pc, #72]	; (8008238 <tcp_recv_null+0x64>)
 80081f0:	4812      	ldr	r0, [pc, #72]	; (800823c <tcp_recv_null+0x68>)
 80081f2:	f009 f921 	bl	8011438 <iprintf>
 80081f6:	f06f 030f 	mvn.w	r3, #15
 80081fa:	e016      	b.n	800822a <tcp_recv_null+0x56>

  if (p != NULL) {
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d009      	beq.n	8008216 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	891b      	ldrh	r3, [r3, #8]
 8008206:	4619      	mov	r1, r3
 8008208:	68b8      	ldr	r0, [r7, #8]
 800820a:	f7ff fb19 	bl	8007840 <tcp_recved>
    pbuf_free(p);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7fe fd18 	bl	8006c44 <pbuf_free>
 8008214:	e008      	b.n	8008228 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d104      	bne.n	8008228 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800821e:	68b8      	ldr	r0, [r7, #8]
 8008220:	f7ff f9be 	bl	80075a0 <tcp_close>
 8008224:	4603      	mov	r3, r0
 8008226:	e000      	b.n	800822a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	08012f60 	.word	0x08012f60
 8008238:	080134d0 	.word	0x080134d0
 800823c:	08012fa4 	.word	0x08012fa4

08008240 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800824a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800824e:	2b00      	cmp	r3, #0
 8008250:	db01      	blt.n	8008256 <tcp_kill_prio+0x16>
 8008252:	79fb      	ldrb	r3, [r7, #7]
 8008254:	e000      	b.n	8008258 <tcp_kill_prio+0x18>
 8008256:	237f      	movs	r3, #127	; 0x7f
 8008258:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800825a:	7afb      	ldrb	r3, [r7, #11]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d034      	beq.n	80082ca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008260:	7afb      	ldrb	r3, [r7, #11]
 8008262:	3b01      	subs	r3, #1
 8008264:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800826a:	2300      	movs	r3, #0
 800826c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800826e:	4b19      	ldr	r3, [pc, #100]	; (80082d4 <tcp_kill_prio+0x94>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	e01f      	b.n	80082b6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	7d5b      	ldrb	r3, [r3, #21]
 800827a:	7afa      	ldrb	r2, [r7, #11]
 800827c:	429a      	cmp	r2, r3
 800827e:	d80c      	bhi.n	800829a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008284:	7afa      	ldrb	r2, [r7, #11]
 8008286:	429a      	cmp	r2, r3
 8008288:	d112      	bne.n	80082b0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800828a:	4b13      	ldr	r3, [pc, #76]	; (80082d8 <tcp_kill_prio+0x98>)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	429a      	cmp	r2, r3
 8008298:	d80a      	bhi.n	80082b0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800829a:	4b0f      	ldr	r3, [pc, #60]	; (80082d8 <tcp_kill_prio+0x98>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	7d5b      	ldrb	r3, [r3, #21]
 80082ae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1dc      	bne.n	8008276 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d004      	beq.n	80082cc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80082c2:	6938      	ldr	r0, [r7, #16]
 80082c4:	f7ff fa56 	bl	8007774 <tcp_abort>
 80082c8:	e000      	b.n	80082cc <tcp_kill_prio+0x8c>
    return;
 80082ca:	bf00      	nop
  }
}
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20006df0 	.word	0x20006df0
 80082d8:	20006df4 	.word	0x20006df4

080082dc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d009      	beq.n	8008300 <tcp_kill_state+0x24>
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	2b09      	cmp	r3, #9
 80082f0:	d006      	beq.n	8008300 <tcp_kill_state+0x24>
 80082f2:	4b1a      	ldr	r3, [pc, #104]	; (800835c <tcp_kill_state+0x80>)
 80082f4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80082f8:	4919      	ldr	r1, [pc, #100]	; (8008360 <tcp_kill_state+0x84>)
 80082fa:	481a      	ldr	r0, [pc, #104]	; (8008364 <tcp_kill_state+0x88>)
 80082fc:	f009 f89c 	bl	8011438 <iprintf>

  inactivity = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008304:	2300      	movs	r3, #0
 8008306:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008308:	4b17      	ldr	r3, [pc, #92]	; (8008368 <tcp_kill_state+0x8c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	617b      	str	r3, [r7, #20]
 800830e:	e017      	b.n	8008340 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	7d1b      	ldrb	r3, [r3, #20]
 8008314:	79fa      	ldrb	r2, [r7, #7]
 8008316:	429a      	cmp	r2, r3
 8008318:	d10f      	bne.n	800833a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800831a:	4b14      	ldr	r3, [pc, #80]	; (800836c <tcp_kill_state+0x90>)
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	429a      	cmp	r2, r3
 8008328:	d807      	bhi.n	800833a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800832a:	4b10      	ldr	r3, [pc, #64]	; (800836c <tcp_kill_state+0x90>)
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e4      	bne.n	8008310 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800834c:	2100      	movs	r1, #0
 800834e:	6938      	ldr	r0, [r7, #16]
 8008350:	f7ff f952 	bl	80075f8 <tcp_abandon>
  }
}
 8008354:	bf00      	nop
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	08012f60 	.word	0x08012f60
 8008360:	080134ec 	.word	0x080134ec
 8008364:	08012fa4 	.word	0x08012fa4
 8008368:	20006df0 	.word	0x20006df0
 800836c:	20006df4 	.word	0x20006df4

08008370 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800837e:	4b12      	ldr	r3, [pc, #72]	; (80083c8 <tcp_kill_timewait+0x58>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	e012      	b.n	80083ac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008386:	4b11      	ldr	r3, [pc, #68]	; (80083cc <tcp_kill_timewait+0x5c>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	429a      	cmp	r2, r3
 8008394:	d807      	bhi.n	80083a6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008396:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <tcp_kill_timewait+0x5c>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e9      	bne.n	8008386 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80083b8:	68b8      	ldr	r0, [r7, #8]
 80083ba:	f7ff f9db 	bl	8007774 <tcp_abort>
  }
}
 80083be:	bf00      	nop
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20006e00 	.word	0x20006e00
 80083cc:	20006df4 	.word	0x20006df4

080083d0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80083d6:	4b10      	ldr	r3, [pc, #64]	; (8008418 <tcp_handle_closepend+0x48>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80083dc:	e014      	b.n	8008408 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	8b5b      	ldrh	r3, [r3, #26]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d009      	beq.n	8008404 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	8b5b      	ldrh	r3, [r3, #26]
 80083f4:	f023 0308 	bic.w	r3, r3, #8
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff f864 	bl	80074cc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1e7      	bne.n	80083de <tcp_handle_closepend+0xe>
  }
}
 800840e:	bf00      	nop
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	20006df0 	.word	0x20006df0

0800841c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	4603      	mov	r3, r0
 8008424:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008426:	2001      	movs	r0, #1
 8008428:	f7fd fda6 	bl	8005f78 <memp_malloc>
 800842c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d126      	bne.n	8008482 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008434:	f7ff ffcc 	bl	80083d0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008438:	f7ff ff9a 	bl	8008370 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800843c:	2001      	movs	r0, #1
 800843e:	f7fd fd9b 	bl	8005f78 <memp_malloc>
 8008442:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d11b      	bne.n	8008482 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800844a:	2009      	movs	r0, #9
 800844c:	f7ff ff46 	bl	80082dc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008450:	2001      	movs	r0, #1
 8008452:	f7fd fd91 	bl	8005f78 <memp_malloc>
 8008456:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d111      	bne.n	8008482 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800845e:	2008      	movs	r0, #8
 8008460:	f7ff ff3c 	bl	80082dc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008464:	2001      	movs	r0, #1
 8008466:	f7fd fd87 	bl	8005f78 <memp_malloc>
 800846a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d107      	bne.n	8008482 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff fee3 	bl	8008240 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800847a:	2001      	movs	r0, #1
 800847c:	f7fd fd7c 	bl	8005f78 <memp_malloc>
 8008480:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d03f      	beq.n	8008508 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008488:	229c      	movs	r2, #156	; 0x9c
 800848a:	2100      	movs	r1, #0
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f008 ffcb 	bl	8011428 <memset>
    pcb->prio = prio;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	79fa      	ldrb	r2, [r7, #7]
 8008496:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800849e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80084a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	22ff      	movs	r2, #255	; 0xff
 80084b6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f44f 7206 	mov.w	r2, #536	; 0x218
 80084be:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2206      	movs	r2, #6
 80084c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2206      	movs	r2, #6
 80084cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084d4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2201      	movs	r2, #1
 80084da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80084de:	4b0d      	ldr	r3, [pc, #52]	; (8008514 <tcp_alloc+0xf8>)
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <tcp_alloc+0xfc>)
 80084e8:	781a      	ldrb	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80084f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4a08      	ldr	r2, [pc, #32]	; (800851c <tcp_alloc+0x100>)
 80084fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4a07      	ldr	r2, [pc, #28]	; (8008520 <tcp_alloc+0x104>)
 8008504:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008508:	68fb      	ldr	r3, [r7, #12]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20006df4 	.word	0x20006df4
 8008518:	200000ce 	.word	0x200000ce
 800851c:	080081d5 	.word	0x080081d5
 8008520:	006ddd00 	.word	0x006ddd00

08008524 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d107      	bne.n	8008542 <tcp_pcb_purge+0x1e>
 8008532:	4b21      	ldr	r3, [pc, #132]	; (80085b8 <tcp_pcb_purge+0x94>)
 8008534:	f640 0251 	movw	r2, #2129	; 0x851
 8008538:	4920      	ldr	r1, [pc, #128]	; (80085bc <tcp_pcb_purge+0x98>)
 800853a:	4821      	ldr	r0, [pc, #132]	; (80085c0 <tcp_pcb_purge+0x9c>)
 800853c:	f008 ff7c 	bl	8011438 <iprintf>
 8008540:	e037      	b.n	80085b2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	7d1b      	ldrb	r3, [r3, #20]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d033      	beq.n	80085b2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800854e:	2b0a      	cmp	r3, #10
 8008550:	d02f      	beq.n	80085b2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008556:	2b01      	cmp	r3, #1
 8008558:	d02b      	beq.n	80085b2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800855e:	2b00      	cmp	r3, #0
 8008560:	d007      	beq.n	8008572 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe fb6c 	bl	8006c44 <pbuf_free>
      pcb->refused_data = NULL;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f986 	bl	800888c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008586:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff fdc7 	bl	8008120 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fdc2 	bl	8008120 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	66da      	str	r2, [r3, #108]	; 0x6c
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	08012f60 	.word	0x08012f60
 80085bc:	080135ac 	.word	0x080135ac
 80085c0:	08012fa4 	.word	0x08012fa4

080085c4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d106      	bne.n	80085e2 <tcp_pcb_remove+0x1e>
 80085d4:	4b3e      	ldr	r3, [pc, #248]	; (80086d0 <tcp_pcb_remove+0x10c>)
 80085d6:	f640 0283 	movw	r2, #2179	; 0x883
 80085da:	493e      	ldr	r1, [pc, #248]	; (80086d4 <tcp_pcb_remove+0x110>)
 80085dc:	483e      	ldr	r0, [pc, #248]	; (80086d8 <tcp_pcb_remove+0x114>)
 80085de:	f008 ff2b 	bl	8011438 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d106      	bne.n	80085f6 <tcp_pcb_remove+0x32>
 80085e8:	4b39      	ldr	r3, [pc, #228]	; (80086d0 <tcp_pcb_remove+0x10c>)
 80085ea:	f640 0284 	movw	r2, #2180	; 0x884
 80085ee:	493b      	ldr	r1, [pc, #236]	; (80086dc <tcp_pcb_remove+0x118>)
 80085f0:	4839      	ldr	r0, [pc, #228]	; (80086d8 <tcp_pcb_remove+0x114>)
 80085f2:	f008 ff21 	bl	8011438 <iprintf>

  TCP_RMV(pcblist, pcb);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d105      	bne.n	800860c <tcp_pcb_remove+0x48>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	e013      	b.n	8008634 <tcp_pcb_remove+0x70>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	e00c      	b.n	800862e <tcp_pcb_remove+0x6a>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d104      	bne.n	8008628 <tcp_pcb_remove+0x64>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	60da      	str	r2, [r3, #12]
 8008626:	e005      	b.n	8008634 <tcp_pcb_remove+0x70>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1ef      	bne.n	8008614 <tcp_pcb_remove+0x50>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2200      	movs	r2, #0
 8008638:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800863a:	6838      	ldr	r0, [r7, #0]
 800863c:	f7ff ff72 	bl	8008524 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	7d1b      	ldrb	r3, [r3, #20]
 8008644:	2b0a      	cmp	r3, #10
 8008646:	d013      	beq.n	8008670 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800864c:	2b01      	cmp	r3, #1
 800864e:	d00f      	beq.n	8008670 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	8b5b      	ldrh	r3, [r3, #26]
 8008654:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008658:	2b00      	cmp	r3, #0
 800865a:	d009      	beq.n	8008670 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	8b5b      	ldrh	r3, [r3, #26]
 8008660:	f043 0302 	orr.w	r3, r3, #2
 8008664:	b29a      	uxth	r2, r3
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800866a:	6838      	ldr	r0, [r7, #0]
 800866c:	f002 ff6a 	bl	800b544 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	7d1b      	ldrb	r3, [r3, #20]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d020      	beq.n	80086ba <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800867c:	2b00      	cmp	r3, #0
 800867e:	d006      	beq.n	800868e <tcp_pcb_remove+0xca>
 8008680:	4b13      	ldr	r3, [pc, #76]	; (80086d0 <tcp_pcb_remove+0x10c>)
 8008682:	f640 0293 	movw	r2, #2195	; 0x893
 8008686:	4916      	ldr	r1, [pc, #88]	; (80086e0 <tcp_pcb_remove+0x11c>)
 8008688:	4813      	ldr	r0, [pc, #76]	; (80086d8 <tcp_pcb_remove+0x114>)
 800868a:	f008 fed5 	bl	8011438 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008692:	2b00      	cmp	r3, #0
 8008694:	d006      	beq.n	80086a4 <tcp_pcb_remove+0xe0>
 8008696:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <tcp_pcb_remove+0x10c>)
 8008698:	f640 0294 	movw	r2, #2196	; 0x894
 800869c:	4911      	ldr	r1, [pc, #68]	; (80086e4 <tcp_pcb_remove+0x120>)
 800869e:	480e      	ldr	r0, [pc, #56]	; (80086d8 <tcp_pcb_remove+0x114>)
 80086a0:	f008 feca 	bl	8011438 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d006      	beq.n	80086ba <tcp_pcb_remove+0xf6>
 80086ac:	4b08      	ldr	r3, [pc, #32]	; (80086d0 <tcp_pcb_remove+0x10c>)
 80086ae:	f640 0296 	movw	r2, #2198	; 0x896
 80086b2:	490d      	ldr	r1, [pc, #52]	; (80086e8 <tcp_pcb_remove+0x124>)
 80086b4:	4808      	ldr	r0, [pc, #32]	; (80086d8 <tcp_pcb_remove+0x114>)
 80086b6:	f008 febf 	bl	8011438 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2200      	movs	r2, #0
 80086be:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2200      	movs	r2, #0
 80086c4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80086c6:	bf00      	nop
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	08012f60 	.word	0x08012f60
 80086d4:	080135c8 	.word	0x080135c8
 80086d8:	08012fa4 	.word	0x08012fa4
 80086dc:	080135e4 	.word	0x080135e4
 80086e0:	08013604 	.word	0x08013604
 80086e4:	0801361c 	.word	0x0801361c
 80086e8:	08013638 	.word	0x08013638

080086ec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d106      	bne.n	8008708 <tcp_next_iss+0x1c>
 80086fa:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <tcp_next_iss+0x38>)
 80086fc:	f640 02af 	movw	r2, #2223	; 0x8af
 8008700:	4909      	ldr	r1, [pc, #36]	; (8008728 <tcp_next_iss+0x3c>)
 8008702:	480a      	ldr	r0, [pc, #40]	; (800872c <tcp_next_iss+0x40>)
 8008704:	f008 fe98 	bl	8011438 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008708:	4b09      	ldr	r3, [pc, #36]	; (8008730 <tcp_next_iss+0x44>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	4b09      	ldr	r3, [pc, #36]	; (8008734 <tcp_next_iss+0x48>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4413      	add	r3, r2
 8008712:	4a07      	ldr	r2, [pc, #28]	; (8008730 <tcp_next_iss+0x44>)
 8008714:	6013      	str	r3, [r2, #0]
  return iss;
 8008716:	4b06      	ldr	r3, [pc, #24]	; (8008730 <tcp_next_iss+0x44>)
 8008718:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	08012f60 	.word	0x08012f60
 8008728:	08013650 	.word	0x08013650
 800872c:	08012fa4 	.word	0x08012fa4
 8008730:	2000000c 	.word	0x2000000c
 8008734:	20006df4 	.word	0x20006df4

08008738 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d106      	bne.n	800875a <tcp_eff_send_mss_netif+0x22>
 800874c:	4b14      	ldr	r3, [pc, #80]	; (80087a0 <tcp_eff_send_mss_netif+0x68>)
 800874e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008752:	4914      	ldr	r1, [pc, #80]	; (80087a4 <tcp_eff_send_mss_netif+0x6c>)
 8008754:	4814      	ldr	r0, [pc, #80]	; (80087a8 <tcp_eff_send_mss_netif+0x70>)
 8008756:	f008 fe6f 	bl	8011438 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008760:	89fb      	ldrh	r3, [r7, #14]
 8008762:	e019      	b.n	8008798 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008768:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800876a:	8afb      	ldrh	r3, [r7, #22]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d012      	beq.n	8008796 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008770:	2328      	movs	r3, #40	; 0x28
 8008772:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008774:	8afa      	ldrh	r2, [r7, #22]
 8008776:	8abb      	ldrh	r3, [r7, #20]
 8008778:	429a      	cmp	r2, r3
 800877a:	d904      	bls.n	8008786 <tcp_eff_send_mss_netif+0x4e>
 800877c:	8afa      	ldrh	r2, [r7, #22]
 800877e:	8abb      	ldrh	r3, [r7, #20]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	b29b      	uxth	r3, r3
 8008784:	e000      	b.n	8008788 <tcp_eff_send_mss_netif+0x50>
 8008786:	2300      	movs	r3, #0
 8008788:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800878a:	8a7a      	ldrh	r2, [r7, #18]
 800878c:	89fb      	ldrh	r3, [r7, #14]
 800878e:	4293      	cmp	r3, r2
 8008790:	bf28      	it	cs
 8008792:	4613      	movcs	r3, r2
 8008794:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008796:	89fb      	ldrh	r3, [r7, #14]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	08012f60 	.word	0x08012f60
 80087a4:	0801366c 	.word	0x0801366c
 80087a8:	08012fa4 	.word	0x08012fa4

080087ac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d119      	bne.n	80087f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80087c0:	4b10      	ldr	r3, [pc, #64]	; (8008804 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80087c2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80087c6:	4910      	ldr	r1, [pc, #64]	; (8008808 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80087c8:	4810      	ldr	r0, [pc, #64]	; (800880c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80087ca:	f008 fe35 	bl	8011438 <iprintf>

  while (pcb != NULL) {
 80087ce:	e011      	b.n	80087f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d108      	bne.n	80087ee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f7fe ffc6 	bl	8007774 <tcp_abort>
      pcb = next;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	e002      	b.n	80087f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1ea      	bne.n	80087d0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	08012f60 	.word	0x08012f60
 8008808:	08013694 	.word	0x08013694
 800880c:	08012fa4 	.word	0x08012fa4

08008810 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d02a      	beq.n	8008876 <tcp_netif_ip_addr_changed+0x66>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d026      	beq.n	8008876 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008828:	4b15      	ldr	r3, [pc, #84]	; (8008880 <tcp_netif_ip_addr_changed+0x70>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff ffbc 	bl	80087ac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008834:	4b13      	ldr	r3, [pc, #76]	; (8008884 <tcp_netif_ip_addr_changed+0x74>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff ffb6 	bl	80087ac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d017      	beq.n	8008876 <tcp_netif_ip_addr_changed+0x66>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d013      	beq.n	8008876 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800884e:	4b0e      	ldr	r3, [pc, #56]	; (8008888 <tcp_netif_ip_addr_changed+0x78>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	e00c      	b.n	8008870 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	429a      	cmp	r2, r3
 8008860:	d103      	bne.n	800886a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1ef      	bne.n	8008856 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008876:	bf00      	nop
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	20006df0 	.word	0x20006df0
 8008884:	20006dfc 	.word	0x20006dfc
 8008888:	20006df8 	.word	0x20006df8

0800888c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008898:	2b00      	cmp	r3, #0
 800889a:	d007      	beq.n	80088ac <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff fc3d 	bl	8008120 <tcp_segs_free>
    pcb->ooseq = NULL;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80088ac:	bf00      	nop
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80088b4:	b590      	push	{r4, r7, lr}
 80088b6:	b08d      	sub	sp, #52	; 0x34
 80088b8:	af04      	add	r7, sp, #16
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d105      	bne.n	80088d0 <tcp_input+0x1c>
 80088c4:	4b9b      	ldr	r3, [pc, #620]	; (8008b34 <tcp_input+0x280>)
 80088c6:	2283      	movs	r2, #131	; 0x83
 80088c8:	499b      	ldr	r1, [pc, #620]	; (8008b38 <tcp_input+0x284>)
 80088ca:	489c      	ldr	r0, [pc, #624]	; (8008b3c <tcp_input+0x288>)
 80088cc:	f008 fdb4 	bl	8011438 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	4a9a      	ldr	r2, [pc, #616]	; (8008b40 <tcp_input+0x28c>)
 80088d6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	895b      	ldrh	r3, [r3, #10]
 80088dc:	2b13      	cmp	r3, #19
 80088de:	f240 83c4 	bls.w	800906a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80088e2:	4b98      	ldr	r3, [pc, #608]	; (8008b44 <tcp_input+0x290>)
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	4a97      	ldr	r2, [pc, #604]	; (8008b44 <tcp_input+0x290>)
 80088e8:	6812      	ldr	r2, [r2, #0]
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f007 fe0b 	bl	8010508 <ip4_addr_isbroadcast_u32>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f040 83ba 	bne.w	800906e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80088fa:	4b92      	ldr	r3, [pc, #584]	; (8008b44 <tcp_input+0x290>)
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008902:	2be0      	cmp	r3, #224	; 0xe0
 8008904:	f000 83b3 	beq.w	800906e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008908:	4b8d      	ldr	r3, [pc, #564]	; (8008b40 <tcp_input+0x28c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	899b      	ldrh	r3, [r3, #12]
 800890e:	b29b      	uxth	r3, r3
 8008910:	4618      	mov	r0, r3
 8008912:	f7fc fedb 	bl	80056cc <lwip_htons>
 8008916:	4603      	mov	r3, r0
 8008918:	0b1b      	lsrs	r3, r3, #12
 800891a:	b29b      	uxth	r3, r3
 800891c:	b2db      	uxtb	r3, r3
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008922:	7cbb      	ldrb	r3, [r7, #18]
 8008924:	2b13      	cmp	r3, #19
 8008926:	f240 83a4 	bls.w	8009072 <tcp_input+0x7be>
 800892a:	7cbb      	ldrb	r3, [r7, #18]
 800892c:	b29a      	uxth	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	891b      	ldrh	r3, [r3, #8]
 8008932:	429a      	cmp	r2, r3
 8008934:	f200 839d 	bhi.w	8009072 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008938:	7cbb      	ldrb	r3, [r7, #18]
 800893a:	b29b      	uxth	r3, r3
 800893c:	3b14      	subs	r3, #20
 800893e:	b29a      	uxth	r2, r3
 8008940:	4b81      	ldr	r3, [pc, #516]	; (8008b48 <tcp_input+0x294>)
 8008942:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008944:	4b81      	ldr	r3, [pc, #516]	; (8008b4c <tcp_input+0x298>)
 8008946:	2200      	movs	r2, #0
 8008948:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	895a      	ldrh	r2, [r3, #10]
 800894e:	7cbb      	ldrb	r3, [r7, #18]
 8008950:	b29b      	uxth	r3, r3
 8008952:	429a      	cmp	r2, r3
 8008954:	d309      	bcc.n	800896a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008956:	4b7c      	ldr	r3, [pc, #496]	; (8008b48 <tcp_input+0x294>)
 8008958:	881a      	ldrh	r2, [r3, #0]
 800895a:	4b7d      	ldr	r3, [pc, #500]	; (8008b50 <tcp_input+0x29c>)
 800895c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800895e:	7cbb      	ldrb	r3, [r7, #18]
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fe f8e8 	bl	8006b38 <pbuf_remove_header>
 8008968:	e04e      	b.n	8008a08 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d105      	bne.n	800897e <tcp_input+0xca>
 8008972:	4b70      	ldr	r3, [pc, #448]	; (8008b34 <tcp_input+0x280>)
 8008974:	22c2      	movs	r2, #194	; 0xc2
 8008976:	4977      	ldr	r1, [pc, #476]	; (8008b54 <tcp_input+0x2a0>)
 8008978:	4870      	ldr	r0, [pc, #448]	; (8008b3c <tcp_input+0x288>)
 800897a:	f008 fd5d 	bl	8011438 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800897e:	2114      	movs	r1, #20
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7fe f8d9 	bl	8006b38 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	895a      	ldrh	r2, [r3, #10]
 800898a:	4b71      	ldr	r3, [pc, #452]	; (8008b50 <tcp_input+0x29c>)
 800898c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800898e:	4b6e      	ldr	r3, [pc, #440]	; (8008b48 <tcp_input+0x294>)
 8008990:	881a      	ldrh	r2, [r3, #0]
 8008992:	4b6f      	ldr	r3, [pc, #444]	; (8008b50 <tcp_input+0x29c>)
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800899a:	4b6d      	ldr	r3, [pc, #436]	; (8008b50 <tcp_input+0x29c>)
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7fe f8c9 	bl	8006b38 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	895b      	ldrh	r3, [r3, #10]
 80089ac:	8a3a      	ldrh	r2, [r7, #16]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	f200 8361 	bhi.w	8009076 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	4a64      	ldr	r2, [pc, #400]	; (8008b4c <tcp_input+0x298>)
 80089bc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	8a3a      	ldrh	r2, [r7, #16]
 80089c4:	4611      	mov	r1, r2
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe f8b6 	bl	8006b38 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	891a      	ldrh	r2, [r3, #8]
 80089d0:	8a3b      	ldrh	r3, [r7, #16]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	895b      	ldrh	r3, [r3, #10]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d005      	beq.n	80089ee <tcp_input+0x13a>
 80089e2:	4b54      	ldr	r3, [pc, #336]	; (8008b34 <tcp_input+0x280>)
 80089e4:	22df      	movs	r2, #223	; 0xdf
 80089e6:	495c      	ldr	r1, [pc, #368]	; (8008b58 <tcp_input+0x2a4>)
 80089e8:	4854      	ldr	r0, [pc, #336]	; (8008b3c <tcp_input+0x288>)
 80089ea:	f008 fd25 	bl	8011438 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	891a      	ldrh	r2, [r3, #8]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	891b      	ldrh	r3, [r3, #8]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d005      	beq.n	8008a08 <tcp_input+0x154>
 80089fc:	4b4d      	ldr	r3, [pc, #308]	; (8008b34 <tcp_input+0x280>)
 80089fe:	22e0      	movs	r2, #224	; 0xe0
 8008a00:	4956      	ldr	r1, [pc, #344]	; (8008b5c <tcp_input+0x2a8>)
 8008a02:	484e      	ldr	r0, [pc, #312]	; (8008b3c <tcp_input+0x288>)
 8008a04:	f008 fd18 	bl	8011438 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008a08:	4b4d      	ldr	r3, [pc, #308]	; (8008b40 <tcp_input+0x28c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	4a4b      	ldr	r2, [pc, #300]	; (8008b40 <tcp_input+0x28c>)
 8008a12:	6814      	ldr	r4, [r2, #0]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fc fe59 	bl	80056cc <lwip_htons>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008a1e:	4b48      	ldr	r3, [pc, #288]	; (8008b40 <tcp_input+0x28c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	885b      	ldrh	r3, [r3, #2]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	4a46      	ldr	r2, [pc, #280]	; (8008b40 <tcp_input+0x28c>)
 8008a28:	6814      	ldr	r4, [r2, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fc fe4e 	bl	80056cc <lwip_htons>
 8008a30:	4603      	mov	r3, r0
 8008a32:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008a34:	4b42      	ldr	r3, [pc, #264]	; (8008b40 <tcp_input+0x28c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	4a41      	ldr	r2, [pc, #260]	; (8008b40 <tcp_input+0x28c>)
 8008a3c:	6814      	ldr	r4, [r2, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fc fe59 	bl	80056f6 <lwip_htonl>
 8008a44:	4603      	mov	r3, r0
 8008a46:	6063      	str	r3, [r4, #4]
 8008a48:	6863      	ldr	r3, [r4, #4]
 8008a4a:	4a45      	ldr	r2, [pc, #276]	; (8008b60 <tcp_input+0x2ac>)
 8008a4c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008a4e:	4b3c      	ldr	r3, [pc, #240]	; (8008b40 <tcp_input+0x28c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	4a3a      	ldr	r2, [pc, #232]	; (8008b40 <tcp_input+0x28c>)
 8008a56:	6814      	ldr	r4, [r2, #0]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fc fe4c 	bl	80056f6 <lwip_htonl>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	60a3      	str	r3, [r4, #8]
 8008a62:	68a3      	ldr	r3, [r4, #8]
 8008a64:	4a3f      	ldr	r2, [pc, #252]	; (8008b64 <tcp_input+0x2b0>)
 8008a66:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008a68:	4b35      	ldr	r3, [pc, #212]	; (8008b40 <tcp_input+0x28c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	89db      	ldrh	r3, [r3, #14]
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	4a33      	ldr	r2, [pc, #204]	; (8008b40 <tcp_input+0x28c>)
 8008a72:	6814      	ldr	r4, [r2, #0]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fc fe29 	bl	80056cc <lwip_htons>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008a7e:	4b30      	ldr	r3, [pc, #192]	; (8008b40 <tcp_input+0x28c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	899b      	ldrh	r3, [r3, #12]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fc fe20 	bl	80056cc <lwip_htons>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	4b34      	ldr	r3, [pc, #208]	; (8008b68 <tcp_input+0x2b4>)
 8008a98:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	891a      	ldrh	r2, [r3, #8]
 8008a9e:	4b33      	ldr	r3, [pc, #204]	; (8008b6c <tcp_input+0x2b8>)
 8008aa0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008aa2:	4b31      	ldr	r3, [pc, #196]	; (8008b68 <tcp_input+0x2b4>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	f003 0303 	and.w	r3, r3, #3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00c      	beq.n	8008ac8 <tcp_input+0x214>
    tcplen++;
 8008aae:	4b2f      	ldr	r3, [pc, #188]	; (8008b6c <tcp_input+0x2b8>)
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	4b2d      	ldr	r3, [pc, #180]	; (8008b6c <tcp_input+0x2b8>)
 8008ab8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	891a      	ldrh	r2, [r3, #8]
 8008abe:	4b2b      	ldr	r3, [pc, #172]	; (8008b6c <tcp_input+0x2b8>)
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	f200 82d9 	bhi.w	800907a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008acc:	4b28      	ldr	r3, [pc, #160]	; (8008b70 <tcp_input+0x2bc>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	61fb      	str	r3, [r7, #28]
 8008ad2:	e09d      	b.n	8008c10 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	7d1b      	ldrb	r3, [r3, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d105      	bne.n	8008ae8 <tcp_input+0x234>
 8008adc:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <tcp_input+0x280>)
 8008ade:	22fb      	movs	r2, #251	; 0xfb
 8008ae0:	4924      	ldr	r1, [pc, #144]	; (8008b74 <tcp_input+0x2c0>)
 8008ae2:	4816      	ldr	r0, [pc, #88]	; (8008b3c <tcp_input+0x288>)
 8008ae4:	f008 fca8 	bl	8011438 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	7d1b      	ldrb	r3, [r3, #20]
 8008aec:	2b0a      	cmp	r3, #10
 8008aee:	d105      	bne.n	8008afc <tcp_input+0x248>
 8008af0:	4b10      	ldr	r3, [pc, #64]	; (8008b34 <tcp_input+0x280>)
 8008af2:	22fc      	movs	r2, #252	; 0xfc
 8008af4:	4920      	ldr	r1, [pc, #128]	; (8008b78 <tcp_input+0x2c4>)
 8008af6:	4811      	ldr	r0, [pc, #68]	; (8008b3c <tcp_input+0x288>)
 8008af8:	f008 fc9e 	bl	8011438 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	7d1b      	ldrb	r3, [r3, #20]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d105      	bne.n	8008b10 <tcp_input+0x25c>
 8008b04:	4b0b      	ldr	r3, [pc, #44]	; (8008b34 <tcp_input+0x280>)
 8008b06:	22fd      	movs	r2, #253	; 0xfd
 8008b08:	491c      	ldr	r1, [pc, #112]	; (8008b7c <tcp_input+0x2c8>)
 8008b0a:	480c      	ldr	r0, [pc, #48]	; (8008b3c <tcp_input+0x288>)
 8008b0c:	f008 fc94 	bl	8011438 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	7a1b      	ldrb	r3, [r3, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d033      	beq.n	8008b80 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	7a1a      	ldrb	r2, [r3, #8]
 8008b1c:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <tcp_input+0x290>)
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b24:	3301      	adds	r3, #1
 8008b26:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d029      	beq.n	8008b80 <tcp_input+0x2cc>
      prev = pcb;
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	61bb      	str	r3, [r7, #24]
      continue;
 8008b30:	e06b      	b.n	8008c0a <tcp_input+0x356>
 8008b32:	bf00      	nop
 8008b34:	080136c8 	.word	0x080136c8
 8008b38:	080136fc 	.word	0x080136fc
 8008b3c:	08013714 	.word	0x08013714
 8008b40:	200000e0 	.word	0x200000e0
 8008b44:	2000388c 	.word	0x2000388c
 8008b48:	200000e4 	.word	0x200000e4
 8008b4c:	200000e8 	.word	0x200000e8
 8008b50:	200000e6 	.word	0x200000e6
 8008b54:	0801373c 	.word	0x0801373c
 8008b58:	0801374c 	.word	0x0801374c
 8008b5c:	08013758 	.word	0x08013758
 8008b60:	200000f0 	.word	0x200000f0
 8008b64:	200000f4 	.word	0x200000f4
 8008b68:	200000fc 	.word	0x200000fc
 8008b6c:	200000fa 	.word	0x200000fa
 8008b70:	20006df0 	.word	0x20006df0
 8008b74:	08013778 	.word	0x08013778
 8008b78:	080137a0 	.word	0x080137a0
 8008b7c:	080137cc 	.word	0x080137cc
    }

    if (pcb->remote_port == tcphdr->src &&
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	8b1a      	ldrh	r2, [r3, #24]
 8008b84:	4b94      	ldr	r3, [pc, #592]	; (8008dd8 <tcp_input+0x524>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d13a      	bne.n	8008c06 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	8ada      	ldrh	r2, [r3, #22]
 8008b94:	4b90      	ldr	r3, [pc, #576]	; (8008dd8 <tcp_input+0x524>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	885b      	ldrh	r3, [r3, #2]
 8008b9a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d132      	bne.n	8008c06 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	4b8d      	ldr	r3, [pc, #564]	; (8008ddc <tcp_input+0x528>)
 8008ba6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d12c      	bne.n	8008c06 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	4b8a      	ldr	r3, [pc, #552]	; (8008ddc <tcp_input+0x528>)
 8008bb2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d126      	bne.n	8008c06 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	69fa      	ldr	r2, [r7, #28]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d106      	bne.n	8008bd0 <tcp_input+0x31c>
 8008bc2:	4b87      	ldr	r3, [pc, #540]	; (8008de0 <tcp_input+0x52c>)
 8008bc4:	f240 120d 	movw	r2, #269	; 0x10d
 8008bc8:	4986      	ldr	r1, [pc, #536]	; (8008de4 <tcp_input+0x530>)
 8008bca:	4887      	ldr	r0, [pc, #540]	; (8008de8 <tcp_input+0x534>)
 8008bcc:	f008 fc34 	bl	8011438 <iprintf>
      if (prev != NULL) {
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <tcp_input+0x338>
        prev->next = pcb->next;
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008bde:	4b83      	ldr	r3, [pc, #524]	; (8008dec <tcp_input+0x538>)
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008be6:	4a81      	ldr	r2, [pc, #516]	; (8008dec <tcp_input+0x538>)
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d111      	bne.n	8008c1a <tcp_input+0x366>
 8008bf6:	4b7a      	ldr	r3, [pc, #488]	; (8008de0 <tcp_input+0x52c>)
 8008bf8:	f240 1215 	movw	r2, #277	; 0x115
 8008bfc:	497c      	ldr	r1, [pc, #496]	; (8008df0 <tcp_input+0x53c>)
 8008bfe:	487a      	ldr	r0, [pc, #488]	; (8008de8 <tcp_input+0x534>)
 8008c00:	f008 fc1a 	bl	8011438 <iprintf>
      break;
 8008c04:	e009      	b.n	8008c1a <tcp_input+0x366>
    }
    prev = pcb;
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	61fb      	str	r3, [r7, #28]
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f47f af5e 	bne.w	8008ad4 <tcp_input+0x220>
 8008c18:	e000      	b.n	8008c1c <tcp_input+0x368>
      break;
 8008c1a:	bf00      	nop
  }

  if (pcb == NULL) {
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f040 8095 	bne.w	8008d4e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c24:	4b73      	ldr	r3, [pc, #460]	; (8008df4 <tcp_input+0x540>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	61fb      	str	r3, [r7, #28]
 8008c2a:	e03f      	b.n	8008cac <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	7d1b      	ldrb	r3, [r3, #20]
 8008c30:	2b0a      	cmp	r3, #10
 8008c32:	d006      	beq.n	8008c42 <tcp_input+0x38e>
 8008c34:	4b6a      	ldr	r3, [pc, #424]	; (8008de0 <tcp_input+0x52c>)
 8008c36:	f240 121f 	movw	r2, #287	; 0x11f
 8008c3a:	496f      	ldr	r1, [pc, #444]	; (8008df8 <tcp_input+0x544>)
 8008c3c:	486a      	ldr	r0, [pc, #424]	; (8008de8 <tcp_input+0x534>)
 8008c3e:	f008 fbfb 	bl	8011438 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	7a1b      	ldrb	r3, [r3, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d009      	beq.n	8008c5e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	7a1a      	ldrb	r2, [r3, #8]
 8008c4e:	4b63      	ldr	r3, [pc, #396]	; (8008ddc <tcp_input+0x528>)
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c56:	3301      	adds	r3, #1
 8008c58:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d122      	bne.n	8008ca4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	8b1a      	ldrh	r2, [r3, #24]
 8008c62:	4b5d      	ldr	r3, [pc, #372]	; (8008dd8 <tcp_input+0x524>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d11b      	bne.n	8008ca6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	8ada      	ldrh	r2, [r3, #22]
 8008c72:	4b59      	ldr	r3, [pc, #356]	; (8008dd8 <tcp_input+0x524>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	885b      	ldrh	r3, [r3, #2]
 8008c78:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d113      	bne.n	8008ca6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	4b56      	ldr	r3, [pc, #344]	; (8008ddc <tcp_input+0x528>)
 8008c84:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d10d      	bne.n	8008ca6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	4b53      	ldr	r3, [pc, #332]	; (8008ddc <tcp_input+0x528>)
 8008c90:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d107      	bne.n	8008ca6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008c96:	69f8      	ldr	r0, [r7, #28]
 8008c98:	f000 fb54 	bl	8009344 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7fd ffd1 	bl	8006c44 <pbuf_free>
        return;
 8008ca2:	e1f0      	b.n	8009086 <tcp_input+0x7d2>
        continue;
 8008ca4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	61fb      	str	r3, [r7, #28]
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1bc      	bne.n	8008c2c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008cb6:	4b51      	ldr	r3, [pc, #324]	; (8008dfc <tcp_input+0x548>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	617b      	str	r3, [r7, #20]
 8008cbc:	e02a      	b.n	8008d14 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	7a1b      	ldrb	r3, [r3, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00c      	beq.n	8008ce0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	7a1a      	ldrb	r2, [r3, #8]
 8008cca:	4b44      	ldr	r3, [pc, #272]	; (8008ddc <tcp_input+0x528>)
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d002      	beq.n	8008ce0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	61bb      	str	r3, [r7, #24]
        continue;
 8008cde:	e016      	b.n	8008d0e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	8ada      	ldrh	r2, [r3, #22]
 8008ce4:	4b3c      	ldr	r3, [pc, #240]	; (8008dd8 <tcp_input+0x524>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	885b      	ldrh	r3, [r3, #2]
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d10c      	bne.n	8008d0a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	4b39      	ldr	r3, [pc, #228]	; (8008ddc <tcp_input+0x528>)
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d00f      	beq.n	8008d1c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00d      	beq.n	8008d1e <tcp_input+0x46a>
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d009      	beq.n	8008d1e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1d1      	bne.n	8008cbe <tcp_input+0x40a>
 8008d1a:	e000      	b.n	8008d1e <tcp_input+0x46a>
            break;
 8008d1c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d014      	beq.n	8008d4e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	68da      	ldr	r2, [r3, #12]
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008d32:	4b32      	ldr	r3, [pc, #200]	; (8008dfc <tcp_input+0x548>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008d3a:	4a30      	ldr	r2, [pc, #192]	; (8008dfc <tcp_input+0x548>)
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008d40:	6978      	ldr	r0, [r7, #20]
 8008d42:	f000 fa01 	bl	8009148 <tcp_listen_input>
      }
      pbuf_free(p);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7fd ff7c 	bl	8006c44 <pbuf_free>
      return;
 8008d4c:	e19b      	b.n	8009086 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8160 	beq.w	8009016 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008d56:	4b2a      	ldr	r3, [pc, #168]	; (8008e00 <tcp_input+0x54c>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	891a      	ldrh	r2, [r3, #8]
 8008d60:	4b27      	ldr	r3, [pc, #156]	; (8008e00 <tcp_input+0x54c>)
 8008d62:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008d64:	4a26      	ldr	r2, [pc, #152]	; (8008e00 <tcp_input+0x54c>)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008d6a:	4b1b      	ldr	r3, [pc, #108]	; (8008dd8 <tcp_input+0x524>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a24      	ldr	r2, [pc, #144]	; (8008e00 <tcp_input+0x54c>)
 8008d70:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008d72:	4b24      	ldr	r3, [pc, #144]	; (8008e04 <tcp_input+0x550>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008d78:	4b23      	ldr	r3, [pc, #140]	; (8008e08 <tcp_input+0x554>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008d7e:	4b23      	ldr	r3, [pc, #140]	; (8008e0c <tcp_input+0x558>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008d84:	4b22      	ldr	r3, [pc, #136]	; (8008e10 <tcp_input+0x55c>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f003 0308 	and.w	r3, r3, #8
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d006      	beq.n	8008d9e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	7b5b      	ldrb	r3, [r3, #13]
 8008d94:	f043 0301 	orr.w	r3, r3, #1
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d038      	beq.n	8008e18 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008da6:	69f8      	ldr	r0, [r7, #28]
 8008da8:	f7ff f93e 	bl	8008028 <tcp_process_refused_data>
 8008dac:	4603      	mov	r3, r0
 8008dae:	f113 0f0d 	cmn.w	r3, #13
 8008db2:	d007      	beq.n	8008dc4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d02d      	beq.n	8008e18 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008dbc:	4b15      	ldr	r3, [pc, #84]	; (8008e14 <tcp_input+0x560>)
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d029      	beq.n	8008e18 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f040 8104 	bne.w	8008fd6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008dce:	69f8      	ldr	r0, [r7, #28]
 8008dd0:	f003 f9be 	bl	800c150 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008dd4:	e0ff      	b.n	8008fd6 <tcp_input+0x722>
 8008dd6:	bf00      	nop
 8008dd8:	200000e0 	.word	0x200000e0
 8008ddc:	2000388c 	.word	0x2000388c
 8008de0:	080136c8 	.word	0x080136c8
 8008de4:	080137f4 	.word	0x080137f4
 8008de8:	08013714 	.word	0x08013714
 8008dec:	20006df0 	.word	0x20006df0
 8008df0:	08013820 	.word	0x08013820
 8008df4:	20006e00 	.word	0x20006e00
 8008df8:	0801384c 	.word	0x0801384c
 8008dfc:	20006df8 	.word	0x20006df8
 8008e00:	200000d0 	.word	0x200000d0
 8008e04:	20000100 	.word	0x20000100
 8008e08:	200000fd 	.word	0x200000fd
 8008e0c:	200000f8 	.word	0x200000f8
 8008e10:	200000fc 	.word	0x200000fc
 8008e14:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8008e18:	4a9c      	ldr	r2, [pc, #624]	; (800908c <tcp_input+0x7d8>)
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008e1e:	69f8      	ldr	r0, [r7, #28]
 8008e20:	f000 fb0a 	bl	8009438 <tcp_process>
 8008e24:	4603      	mov	r3, r0
 8008e26:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008e28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e2c:	f113 0f0d 	cmn.w	r3, #13
 8008e30:	f000 80d3 	beq.w	8008fda <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8008e34:	4b96      	ldr	r3, [pc, #600]	; (8009090 <tcp_input+0x7dc>)
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	f003 0308 	and.w	r3, r3, #8
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d015      	beq.n	8008e6c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d008      	beq.n	8008e5c <tcp_input+0x5a8>
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e50:	69fa      	ldr	r2, [r7, #28]
 8008e52:	6912      	ldr	r2, [r2, #16]
 8008e54:	f06f 010d 	mvn.w	r1, #13
 8008e58:	4610      	mov	r0, r2
 8008e5a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008e5c:	69f9      	ldr	r1, [r7, #28]
 8008e5e:	488d      	ldr	r0, [pc, #564]	; (8009094 <tcp_input+0x7e0>)
 8008e60:	f7ff fbb0 	bl	80085c4 <tcp_pcb_remove>
        tcp_free(pcb);
 8008e64:	69f8      	ldr	r0, [r7, #28]
 8008e66:	f7fe f99d 	bl	80071a4 <tcp_free>
 8008e6a:	e0c1      	b.n	8008ff0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008e70:	4b89      	ldr	r3, [pc, #548]	; (8009098 <tcp_input+0x7e4>)
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d01d      	beq.n	8008eb4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008e78:	4b87      	ldr	r3, [pc, #540]	; (8009098 <tcp_input+0x7e4>)
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00a      	beq.n	8008e9e <tcp_input+0x5ea>
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	6910      	ldr	r0, [r2, #16]
 8008e92:	89fa      	ldrh	r2, [r7, #14]
 8008e94:	69f9      	ldr	r1, [r7, #28]
 8008e96:	4798      	blx	r3
 8008e98:	4603      	mov	r3, r0
 8008e9a:	74fb      	strb	r3, [r7, #19]
 8008e9c:	e001      	b.n	8008ea2 <tcp_input+0x5ee>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008ea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ea6:	f113 0f0d 	cmn.w	r3, #13
 8008eaa:	f000 8098 	beq.w	8008fde <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008eae:	4b7a      	ldr	r3, [pc, #488]	; (8009098 <tcp_input+0x7e4>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008eb4:	69f8      	ldr	r0, [r7, #28]
 8008eb6:	f000 f907 	bl	80090c8 <tcp_input_delayed_close>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f040 8090 	bne.w	8008fe2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008ec2:	4b76      	ldr	r3, [pc, #472]	; (800909c <tcp_input+0x7e8>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d041      	beq.n	8008f4e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d006      	beq.n	8008ee0 <tcp_input+0x62c>
 8008ed2:	4b73      	ldr	r3, [pc, #460]	; (80090a0 <tcp_input+0x7ec>)
 8008ed4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008ed8:	4972      	ldr	r1, [pc, #456]	; (80090a4 <tcp_input+0x7f0>)
 8008eda:	4873      	ldr	r0, [pc, #460]	; (80090a8 <tcp_input+0x7f4>)
 8008edc:	f008 faac 	bl	8011438 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	8b5b      	ldrh	r3, [r3, #26]
 8008ee4:	f003 0310 	and.w	r3, r3, #16
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d008      	beq.n	8008efe <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008eec:	4b6b      	ldr	r3, [pc, #428]	; (800909c <tcp_input+0x7e8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fd fea7 	bl	8006c44 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008ef6:	69f8      	ldr	r0, [r7, #28]
 8008ef8:	f7fe fc3c 	bl	8007774 <tcp_abort>
            goto aborted;
 8008efc:	e078      	b.n	8008ff0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00c      	beq.n	8008f22 <tcp_input+0x66e>
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	6918      	ldr	r0, [r3, #16]
 8008f12:	4b62      	ldr	r3, [pc, #392]	; (800909c <tcp_input+0x7e8>)
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	2300      	movs	r3, #0
 8008f18:	69f9      	ldr	r1, [r7, #28]
 8008f1a:	47a0      	blx	r4
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	74fb      	strb	r3, [r7, #19]
 8008f20:	e008      	b.n	8008f34 <tcp_input+0x680>
 8008f22:	4b5e      	ldr	r3, [pc, #376]	; (800909c <tcp_input+0x7e8>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	2300      	movs	r3, #0
 8008f28:	69f9      	ldr	r1, [r7, #28]
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	f7ff f952 	bl	80081d4 <tcp_recv_null>
 8008f30:	4603      	mov	r3, r0
 8008f32:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008f34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f38:	f113 0f0d 	cmn.w	r3, #13
 8008f3c:	d053      	beq.n	8008fe6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008f3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008f46:	4b55      	ldr	r3, [pc, #340]	; (800909c <tcp_input+0x7e8>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008f4e:	4b50      	ldr	r3, [pc, #320]	; (8009090 <tcp_input+0x7dc>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	f003 0320 	and.w	r3, r3, #32
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d030      	beq.n	8008fbc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d009      	beq.n	8008f76 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f66:	7b5a      	ldrb	r2, [r3, #13]
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f6c:	f042 0220 	orr.w	r2, r2, #32
 8008f70:	b2d2      	uxtb	r2, r2
 8008f72:	735a      	strb	r2, [r3, #13]
 8008f74:	e022      	b.n	8008fbc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f7a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008f7e:	d005      	beq.n	8008f8c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f84:	3301      	adds	r3, #1
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00b      	beq.n	8008fae <tcp_input+0x6fa>
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	6918      	ldr	r0, [r3, #16]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	69f9      	ldr	r1, [r7, #28]
 8008fa6:	47a0      	blx	r4
 8008fa8:	4603      	mov	r3, r0
 8008faa:	74fb      	strb	r3, [r7, #19]
 8008fac:	e001      	b.n	8008fb2 <tcp_input+0x6fe>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008fb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008fb6:	f113 0f0d 	cmn.w	r3, #13
 8008fba:	d016      	beq.n	8008fea <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008fbc:	4b33      	ldr	r3, [pc, #204]	; (800908c <tcp_input+0x7d8>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008fc2:	69f8      	ldr	r0, [r7, #28]
 8008fc4:	f000 f880 	bl	80090c8 <tcp_input_delayed_close>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10f      	bne.n	8008fee <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008fce:	69f8      	ldr	r0, [r7, #28]
 8008fd0:	f002 fab8 	bl	800b544 <tcp_output>
 8008fd4:	e00c      	b.n	8008ff0 <tcp_input+0x73c>
        goto aborted;
 8008fd6:	bf00      	nop
 8008fd8:	e00a      	b.n	8008ff0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008fda:	bf00      	nop
 8008fdc:	e008      	b.n	8008ff0 <tcp_input+0x73c>
              goto aborted;
 8008fde:	bf00      	nop
 8008fe0:	e006      	b.n	8008ff0 <tcp_input+0x73c>
          goto aborted;
 8008fe2:	bf00      	nop
 8008fe4:	e004      	b.n	8008ff0 <tcp_input+0x73c>
            goto aborted;
 8008fe6:	bf00      	nop
 8008fe8:	e002      	b.n	8008ff0 <tcp_input+0x73c>
              goto aborted;
 8008fea:	bf00      	nop
 8008fec:	e000      	b.n	8008ff0 <tcp_input+0x73c>
          goto aborted;
 8008fee:	bf00      	nop
    tcp_input_pcb = NULL;
 8008ff0:	4b26      	ldr	r3, [pc, #152]	; (800908c <tcp_input+0x7d8>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008ff6:	4b29      	ldr	r3, [pc, #164]	; (800909c <tcp_input+0x7e8>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008ffc:	4b2b      	ldr	r3, [pc, #172]	; (80090ac <tcp_input+0x7f8>)
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d03f      	beq.n	8009084 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8009004:	4b29      	ldr	r3, [pc, #164]	; (80090ac <tcp_input+0x7f8>)
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	4618      	mov	r0, r3
 800900a:	f7fd fe1b 	bl	8006c44 <pbuf_free>
      inseg.p = NULL;
 800900e:	4b27      	ldr	r3, [pc, #156]	; (80090ac <tcp_input+0x7f8>)
 8009010:	2200      	movs	r2, #0
 8009012:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009014:	e036      	b.n	8009084 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009016:	4b26      	ldr	r3, [pc, #152]	; (80090b0 <tcp_input+0x7fc>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	899b      	ldrh	r3, [r3, #12]
 800901c:	b29b      	uxth	r3, r3
 800901e:	4618      	mov	r0, r3
 8009020:	f7fc fb54 	bl	80056cc <lwip_htons>
 8009024:	4603      	mov	r3, r0
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f003 0304 	and.w	r3, r3, #4
 800902c:	2b00      	cmp	r3, #0
 800902e:	d118      	bne.n	8009062 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009030:	4b20      	ldr	r3, [pc, #128]	; (80090b4 <tcp_input+0x800>)
 8009032:	6819      	ldr	r1, [r3, #0]
 8009034:	4b20      	ldr	r3, [pc, #128]	; (80090b8 <tcp_input+0x804>)
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	4b20      	ldr	r3, [pc, #128]	; (80090bc <tcp_input+0x808>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009040:	4b1b      	ldr	r3, [pc, #108]	; (80090b0 <tcp_input+0x7fc>)
 8009042:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009044:	885b      	ldrh	r3, [r3, #2]
 8009046:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009048:	4a19      	ldr	r2, [pc, #100]	; (80090b0 <tcp_input+0x7fc>)
 800904a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800904c:	8812      	ldrh	r2, [r2, #0]
 800904e:	b292      	uxth	r2, r2
 8009050:	9202      	str	r2, [sp, #8]
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	4b1a      	ldr	r3, [pc, #104]	; (80090c0 <tcp_input+0x80c>)
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	4b1a      	ldr	r3, [pc, #104]	; (80090c4 <tcp_input+0x810>)
 800905a:	4602      	mov	r2, r0
 800905c:	2000      	movs	r0, #0
 800905e:	f003 f825 	bl	800c0ac <tcp_rst>
    pbuf_free(p);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7fd fdee 	bl	8006c44 <pbuf_free>
  return;
 8009068:	e00c      	b.n	8009084 <tcp_input+0x7d0>
    goto dropped;
 800906a:	bf00      	nop
 800906c:	e006      	b.n	800907c <tcp_input+0x7c8>
    goto dropped;
 800906e:	bf00      	nop
 8009070:	e004      	b.n	800907c <tcp_input+0x7c8>
    goto dropped;
 8009072:	bf00      	nop
 8009074:	e002      	b.n	800907c <tcp_input+0x7c8>
      goto dropped;
 8009076:	bf00      	nop
 8009078:	e000      	b.n	800907c <tcp_input+0x7c8>
      goto dropped;
 800907a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7fd fde1 	bl	8006c44 <pbuf_free>
 8009082:	e000      	b.n	8009086 <tcp_input+0x7d2>
  return;
 8009084:	bf00      	nop
}
 8009086:	3724      	adds	r7, #36	; 0x24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd90      	pop	{r4, r7, pc}
 800908c:	20006e04 	.word	0x20006e04
 8009090:	200000fd 	.word	0x200000fd
 8009094:	20006df0 	.word	0x20006df0
 8009098:	200000f8 	.word	0x200000f8
 800909c:	20000100 	.word	0x20000100
 80090a0:	080136c8 	.word	0x080136c8
 80090a4:	0801387c 	.word	0x0801387c
 80090a8:	08013714 	.word	0x08013714
 80090ac:	200000d0 	.word	0x200000d0
 80090b0:	200000e0 	.word	0x200000e0
 80090b4:	200000f4 	.word	0x200000f4
 80090b8:	200000fa 	.word	0x200000fa
 80090bc:	200000f0 	.word	0x200000f0
 80090c0:	2000389c 	.word	0x2000389c
 80090c4:	200038a0 	.word	0x200038a0

080090c8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d106      	bne.n	80090e4 <tcp_input_delayed_close+0x1c>
 80090d6:	4b17      	ldr	r3, [pc, #92]	; (8009134 <tcp_input_delayed_close+0x6c>)
 80090d8:	f240 225a 	movw	r2, #602	; 0x25a
 80090dc:	4916      	ldr	r1, [pc, #88]	; (8009138 <tcp_input_delayed_close+0x70>)
 80090de:	4817      	ldr	r0, [pc, #92]	; (800913c <tcp_input_delayed_close+0x74>)
 80090e0:	f008 f9aa 	bl	8011438 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80090e4:	4b16      	ldr	r3, [pc, #88]	; (8009140 <tcp_input_delayed_close+0x78>)
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	f003 0310 	and.w	r3, r3, #16
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d01c      	beq.n	800912a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	8b5b      	ldrh	r3, [r3, #26]
 80090f4:	f003 0310 	and.w	r3, r3, #16
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10d      	bne.n	8009118 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009102:	2b00      	cmp	r3, #0
 8009104:	d008      	beq.n	8009118 <tcp_input_delayed_close+0x50>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	6912      	ldr	r2, [r2, #16]
 8009110:	f06f 010e 	mvn.w	r1, #14
 8009114:	4610      	mov	r0, r2
 8009116:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009118:	6879      	ldr	r1, [r7, #4]
 800911a:	480a      	ldr	r0, [pc, #40]	; (8009144 <tcp_input_delayed_close+0x7c>)
 800911c:	f7ff fa52 	bl	80085c4 <tcp_pcb_remove>
    tcp_free(pcb);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7fe f83f 	bl	80071a4 <tcp_free>
    return 1;
 8009126:	2301      	movs	r3, #1
 8009128:	e000      	b.n	800912c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	080136c8 	.word	0x080136c8
 8009138:	08013898 	.word	0x08013898
 800913c:	08013714 	.word	0x08013714
 8009140:	200000fd 	.word	0x200000fd
 8009144:	20006df0 	.word	0x20006df0

08009148 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009148:	b590      	push	{r4, r7, lr}
 800914a:	b08b      	sub	sp, #44	; 0x2c
 800914c:	af04      	add	r7, sp, #16
 800914e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009150:	4b6f      	ldr	r3, [pc, #444]	; (8009310 <tcp_listen_input+0x1c8>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	f003 0304 	and.w	r3, r3, #4
 8009158:	2b00      	cmp	r3, #0
 800915a:	f040 80d2 	bne.w	8009302 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d106      	bne.n	8009172 <tcp_listen_input+0x2a>
 8009164:	4b6b      	ldr	r3, [pc, #428]	; (8009314 <tcp_listen_input+0x1cc>)
 8009166:	f240 2281 	movw	r2, #641	; 0x281
 800916a:	496b      	ldr	r1, [pc, #428]	; (8009318 <tcp_listen_input+0x1d0>)
 800916c:	486b      	ldr	r0, [pc, #428]	; (800931c <tcp_listen_input+0x1d4>)
 800916e:	f008 f963 	bl	8011438 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009172:	4b67      	ldr	r3, [pc, #412]	; (8009310 <tcp_listen_input+0x1c8>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	f003 0310 	and.w	r3, r3, #16
 800917a:	2b00      	cmp	r3, #0
 800917c:	d019      	beq.n	80091b2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800917e:	4b68      	ldr	r3, [pc, #416]	; (8009320 <tcp_listen_input+0x1d8>)
 8009180:	6819      	ldr	r1, [r3, #0]
 8009182:	4b68      	ldr	r3, [pc, #416]	; (8009324 <tcp_listen_input+0x1dc>)
 8009184:	881b      	ldrh	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	4b67      	ldr	r3, [pc, #412]	; (8009328 <tcp_listen_input+0x1e0>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800918e:	4b67      	ldr	r3, [pc, #412]	; (800932c <tcp_listen_input+0x1e4>)
 8009190:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009192:	885b      	ldrh	r3, [r3, #2]
 8009194:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009196:	4a65      	ldr	r2, [pc, #404]	; (800932c <tcp_listen_input+0x1e4>)
 8009198:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800919a:	8812      	ldrh	r2, [r2, #0]
 800919c:	b292      	uxth	r2, r2
 800919e:	9202      	str	r2, [sp, #8]
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	4b63      	ldr	r3, [pc, #396]	; (8009330 <tcp_listen_input+0x1e8>)
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	4b63      	ldr	r3, [pc, #396]	; (8009334 <tcp_listen_input+0x1ec>)
 80091a8:	4602      	mov	r2, r0
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f002 ff7e 	bl	800c0ac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80091b0:	e0a9      	b.n	8009306 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80091b2:	4b57      	ldr	r3, [pc, #348]	; (8009310 <tcp_listen_input+0x1c8>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 80a3 	beq.w	8009306 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	7d5b      	ldrb	r3, [r3, #21]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7ff f929 	bl	800841c <tcp_alloc>
 80091ca:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d111      	bne.n	80091f6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <tcp_listen_input+0xa8>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	6910      	ldr	r0, [r2, #16]
 80091e2:	f04f 32ff 	mov.w	r2, #4294967295
 80091e6:	2100      	movs	r1, #0
 80091e8:	4798      	blx	r3
 80091ea:	4603      	mov	r3, r0
 80091ec:	73bb      	strb	r3, [r7, #14]
      return;
 80091ee:	e08b      	b.n	8009308 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80091f0:	23f0      	movs	r3, #240	; 0xf0
 80091f2:	73bb      	strb	r3, [r7, #14]
      return;
 80091f4:	e088      	b.n	8009308 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80091f6:	4b50      	ldr	r3, [pc, #320]	; (8009338 <tcp_listen_input+0x1f0>)
 80091f8:	695a      	ldr	r2, [r3, #20]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80091fe:	4b4e      	ldr	r3, [pc, #312]	; (8009338 <tcp_listen_input+0x1f0>)
 8009200:	691a      	ldr	r2, [r3, #16]
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	8ada      	ldrh	r2, [r3, #22]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800920e:	4b47      	ldr	r3, [pc, #284]	; (800932c <tcp_listen_input+0x1e4>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	b29a      	uxth	r2, r3
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2203      	movs	r2, #3
 800921e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009220:	4b41      	ldr	r3, [pc, #260]	; (8009328 <tcp_listen_input+0x1e0>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	1c5a      	adds	r2, r3, #1
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009232:	6978      	ldr	r0, [r7, #20]
 8009234:	f7ff fa5a 	bl	80086ec <tcp_next_iss>
 8009238:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009252:	4b35      	ldr	r3, [pc, #212]	; (8009328 <tcp_listen_input+0x1e0>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	1e5a      	subs	r2, r3, #1
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	691a      	ldr	r2, [r3, #16]
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	7a5b      	ldrb	r3, [r3, #9]
 800926e:	f003 030c 	and.w	r3, r3, #12
 8009272:	b2da      	uxtb	r2, r3
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	7a1a      	ldrb	r2, [r3, #8]
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009280:	4b2e      	ldr	r3, [pc, #184]	; (800933c <tcp_listen_input+0x1f4>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	60da      	str	r2, [r3, #12]
 8009288:	4a2c      	ldr	r2, [pc, #176]	; (800933c <tcp_listen_input+0x1f4>)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	f003 f8cf 	bl	800c430 <tcp_timer_needed>
 8009292:	4b2b      	ldr	r3, [pc, #172]	; (8009340 <tcp_listen_input+0x1f8>)
 8009294:	2201      	movs	r2, #1
 8009296:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009298:	6978      	ldr	r0, [r7, #20]
 800929a:	f001 fd8d 	bl	800adb8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800929e:	4b23      	ldr	r3, [pc, #140]	; (800932c <tcp_listen_input+0x1e4>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	89db      	ldrh	r3, [r3, #14]
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	3304      	adds	r3, #4
 80092c0:	4618      	mov	r0, r3
 80092c2:	f006 fe6d 	bl	800ffa0 <ip4_route>
 80092c6:	4601      	mov	r1, r0
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	3304      	adds	r3, #4
 80092cc:	461a      	mov	r2, r3
 80092ce:	4620      	mov	r0, r4
 80092d0:	f7ff fa32 	bl	8008738 <tcp_eff_send_mss_netif>
 80092d4:	4603      	mov	r3, r0
 80092d6:	461a      	mov	r2, r3
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80092dc:	2112      	movs	r1, #18
 80092de:	6978      	ldr	r0, [r7, #20]
 80092e0:	f002 f842 	bl	800b368 <tcp_enqueue_flags>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80092e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d004      	beq.n	80092fa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80092f0:	2100      	movs	r1, #0
 80092f2:	6978      	ldr	r0, [r7, #20]
 80092f4:	f7fe f980 	bl	80075f8 <tcp_abandon>
      return;
 80092f8:	e006      	b.n	8009308 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80092fa:	6978      	ldr	r0, [r7, #20]
 80092fc:	f002 f922 	bl	800b544 <tcp_output>
  return;
 8009300:	e001      	b.n	8009306 <tcp_listen_input+0x1be>
    return;
 8009302:	bf00      	nop
 8009304:	e000      	b.n	8009308 <tcp_listen_input+0x1c0>
  return;
 8009306:	bf00      	nop
}
 8009308:	371c      	adds	r7, #28
 800930a:	46bd      	mov	sp, r7
 800930c:	bd90      	pop	{r4, r7, pc}
 800930e:	bf00      	nop
 8009310:	200000fc 	.word	0x200000fc
 8009314:	080136c8 	.word	0x080136c8
 8009318:	080138c0 	.word	0x080138c0
 800931c:	08013714 	.word	0x08013714
 8009320:	200000f4 	.word	0x200000f4
 8009324:	200000fa 	.word	0x200000fa
 8009328:	200000f0 	.word	0x200000f0
 800932c:	200000e0 	.word	0x200000e0
 8009330:	2000389c 	.word	0x2000389c
 8009334:	200038a0 	.word	0x200038a0
 8009338:	2000388c 	.word	0x2000388c
 800933c:	20006df0 	.word	0x20006df0
 8009340:	20006dec 	.word	0x20006dec

08009344 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af04      	add	r7, sp, #16
 800934a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800934c:	4b2f      	ldr	r3, [pc, #188]	; (800940c <tcp_timewait_input+0xc8>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	f003 0304 	and.w	r3, r3, #4
 8009354:	2b00      	cmp	r3, #0
 8009356:	d153      	bne.n	8009400 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d106      	bne.n	800936c <tcp_timewait_input+0x28>
 800935e:	4b2c      	ldr	r3, [pc, #176]	; (8009410 <tcp_timewait_input+0xcc>)
 8009360:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009364:	492b      	ldr	r1, [pc, #172]	; (8009414 <tcp_timewait_input+0xd0>)
 8009366:	482c      	ldr	r0, [pc, #176]	; (8009418 <tcp_timewait_input+0xd4>)
 8009368:	f008 f866 	bl	8011438 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800936c:	4b27      	ldr	r3, [pc, #156]	; (800940c <tcp_timewait_input+0xc8>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d02a      	beq.n	80093ce <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009378:	4b28      	ldr	r3, [pc, #160]	; (800941c <tcp_timewait_input+0xd8>)
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	db2d      	blt.n	80093e2 <tcp_timewait_input+0x9e>
 8009386:	4b25      	ldr	r3, [pc, #148]	; (800941c <tcp_timewait_input+0xd8>)
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	6879      	ldr	r1, [r7, #4]
 8009390:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009392:	440b      	add	r3, r1
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	dc23      	bgt.n	80093e2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800939a:	4b21      	ldr	r3, [pc, #132]	; (8009420 <tcp_timewait_input+0xdc>)
 800939c:	6819      	ldr	r1, [r3, #0]
 800939e:	4b21      	ldr	r3, [pc, #132]	; (8009424 <tcp_timewait_input+0xe0>)
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	4b1d      	ldr	r3, [pc, #116]	; (800941c <tcp_timewait_input+0xd8>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093aa:	4b1f      	ldr	r3, [pc, #124]	; (8009428 <tcp_timewait_input+0xe4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093ae:	885b      	ldrh	r3, [r3, #2]
 80093b0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093b2:	4a1d      	ldr	r2, [pc, #116]	; (8009428 <tcp_timewait_input+0xe4>)
 80093b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093b6:	8812      	ldrh	r2, [r2, #0]
 80093b8:	b292      	uxth	r2, r2
 80093ba:	9202      	str	r2, [sp, #8]
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	4b1b      	ldr	r3, [pc, #108]	; (800942c <tcp_timewait_input+0xe8>)
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	4b1b      	ldr	r3, [pc, #108]	; (8009430 <tcp_timewait_input+0xec>)
 80093c4:	4602      	mov	r2, r0
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f002 fe70 	bl	800c0ac <tcp_rst>
      return;
 80093cc:	e01b      	b.n	8009406 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80093ce:	4b0f      	ldr	r3, [pc, #60]	; (800940c <tcp_timewait_input+0xc8>)
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80093da:	4b16      	ldr	r3, [pc, #88]	; (8009434 <tcp_timewait_input+0xf0>)
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80093e2:	4b10      	ldr	r3, [pc, #64]	; (8009424 <tcp_timewait_input+0xe0>)
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00c      	beq.n	8009404 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	8b5b      	ldrh	r3, [r3, #26]
 80093ee:	f043 0302 	orr.w	r3, r3, #2
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f002 f8a3 	bl	800b544 <tcp_output>
  }
  return;
 80093fe:	e001      	b.n	8009404 <tcp_timewait_input+0xc0>
    return;
 8009400:	bf00      	nop
 8009402:	e000      	b.n	8009406 <tcp_timewait_input+0xc2>
  return;
 8009404:	bf00      	nop
}
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	200000fc 	.word	0x200000fc
 8009410:	080136c8 	.word	0x080136c8
 8009414:	080138e0 	.word	0x080138e0
 8009418:	08013714 	.word	0x08013714
 800941c:	200000f0 	.word	0x200000f0
 8009420:	200000f4 	.word	0x200000f4
 8009424:	200000fa 	.word	0x200000fa
 8009428:	200000e0 	.word	0x200000e0
 800942c:	2000389c 	.word	0x2000389c
 8009430:	200038a0 	.word	0x200038a0
 8009434:	20006df4 	.word	0x20006df4

08009438 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009438:	b590      	push	{r4, r7, lr}
 800943a:	b08d      	sub	sp, #52	; 0x34
 800943c:	af04      	add	r7, sp, #16
 800943e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d106      	bne.n	800945c <tcp_process+0x24>
 800944e:	4ba5      	ldr	r3, [pc, #660]	; (80096e4 <tcp_process+0x2ac>)
 8009450:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009454:	49a4      	ldr	r1, [pc, #656]	; (80096e8 <tcp_process+0x2b0>)
 8009456:	48a5      	ldr	r0, [pc, #660]	; (80096ec <tcp_process+0x2b4>)
 8009458:	f007 ffee 	bl	8011438 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800945c:	4ba4      	ldr	r3, [pc, #656]	; (80096f0 <tcp_process+0x2b8>)
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b00      	cmp	r3, #0
 8009466:	d04e      	beq.n	8009506 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	7d1b      	ldrb	r3, [r3, #20]
 800946c:	2b02      	cmp	r3, #2
 800946e:	d108      	bne.n	8009482 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009474:	4b9f      	ldr	r3, [pc, #636]	; (80096f4 <tcp_process+0x2bc>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d123      	bne.n	80094c4 <tcp_process+0x8c>
        acceptable = 1;
 800947c:	2301      	movs	r3, #1
 800947e:	76fb      	strb	r3, [r7, #27]
 8009480:	e020      	b.n	80094c4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009486:	4b9c      	ldr	r3, [pc, #624]	; (80096f8 <tcp_process+0x2c0>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	429a      	cmp	r2, r3
 800948c:	d102      	bne.n	8009494 <tcp_process+0x5c>
        acceptable = 1;
 800948e:	2301      	movs	r3, #1
 8009490:	76fb      	strb	r3, [r7, #27]
 8009492:	e017      	b.n	80094c4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009494:	4b98      	ldr	r3, [pc, #608]	; (80096f8 <tcp_process+0x2c0>)
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	db10      	blt.n	80094c4 <tcp_process+0x8c>
 80094a2:	4b95      	ldr	r3, [pc, #596]	; (80096f8 <tcp_process+0x2c0>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094ae:	440b      	add	r3, r1
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	dc06      	bgt.n	80094c4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	8b5b      	ldrh	r3, [r3, #26]
 80094ba:	f043 0302 	orr.w	r3, r3, #2
 80094be:	b29a      	uxth	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80094c4:	7efb      	ldrb	r3, [r7, #27]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d01b      	beq.n	8009502 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	7d1b      	ldrb	r3, [r3, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <tcp_process+0xa8>
 80094d2:	4b84      	ldr	r3, [pc, #528]	; (80096e4 <tcp_process+0x2ac>)
 80094d4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80094d8:	4988      	ldr	r1, [pc, #544]	; (80096fc <tcp_process+0x2c4>)
 80094da:	4884      	ldr	r0, [pc, #528]	; (80096ec <tcp_process+0x2b4>)
 80094dc:	f007 ffac 	bl	8011438 <iprintf>
      recv_flags |= TF_RESET;
 80094e0:	4b87      	ldr	r3, [pc, #540]	; (8009700 <tcp_process+0x2c8>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	f043 0308 	orr.w	r3, r3, #8
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	4b85      	ldr	r3, [pc, #532]	; (8009700 <tcp_process+0x2c8>)
 80094ec:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	8b5b      	ldrh	r3, [r3, #26]
 80094f2:	f023 0301 	bic.w	r3, r3, #1
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80094fc:	f06f 030d 	mvn.w	r3, #13
 8009500:	e37a      	b.n	8009bf8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	e378      	b.n	8009bf8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009506:	4b7a      	ldr	r3, [pc, #488]	; (80096f0 <tcp_process+0x2b8>)
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	f003 0302 	and.w	r3, r3, #2
 800950e:	2b00      	cmp	r3, #0
 8009510:	d010      	beq.n	8009534 <tcp_process+0xfc>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	7d1b      	ldrb	r3, [r3, #20]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d00c      	beq.n	8009534 <tcp_process+0xfc>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	7d1b      	ldrb	r3, [r3, #20]
 800951e:	2b03      	cmp	r3, #3
 8009520:	d008      	beq.n	8009534 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	8b5b      	ldrh	r3, [r3, #26]
 8009526:	f043 0302 	orr.w	r3, r3, #2
 800952a:	b29a      	uxth	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	e361      	b.n	8009bf8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	8b5b      	ldrh	r3, [r3, #26]
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b00      	cmp	r3, #0
 800953e:	d103      	bne.n	8009548 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009540:	4b70      	ldr	r3, [pc, #448]	; (8009704 <tcp_process+0x2cc>)
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f001 fc2d 	bl	800adb8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	7d1b      	ldrb	r3, [r3, #20]
 8009562:	3b02      	subs	r3, #2
 8009564:	2b07      	cmp	r3, #7
 8009566:	f200 8337 	bhi.w	8009bd8 <tcp_process+0x7a0>
 800956a:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <tcp_process+0x138>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	08009591 	.word	0x08009591
 8009574:	080097c1 	.word	0x080097c1
 8009578:	08009939 	.word	0x08009939
 800957c:	08009963 	.word	0x08009963
 8009580:	08009a87 	.word	0x08009a87
 8009584:	08009939 	.word	0x08009939
 8009588:	08009b13 	.word	0x08009b13
 800958c:	08009ba3 	.word	0x08009ba3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009590:	4b57      	ldr	r3, [pc, #348]	; (80096f0 <tcp_process+0x2b8>)
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	f003 0310 	and.w	r3, r3, #16
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 80e4 	beq.w	8009766 <tcp_process+0x32e>
 800959e:	4b54      	ldr	r3, [pc, #336]	; (80096f0 <tcp_process+0x2b8>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	f003 0302 	and.w	r3, r3, #2
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 80dd 	beq.w	8009766 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	4b50      	ldr	r3, [pc, #320]	; (80096f4 <tcp_process+0x2bc>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	f040 80d5 	bne.w	8009766 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80095bc:	4b4e      	ldr	r3, [pc, #312]	; (80096f8 <tcp_process+0x2c0>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	1c5a      	adds	r2, r3, #1
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80095ce:	4b49      	ldr	r3, [pc, #292]	; (80096f4 <tcp_process+0x2bc>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80095d6:	4b4c      	ldr	r3, [pc, #304]	; (8009708 <tcp_process+0x2d0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	89db      	ldrh	r3, [r3, #14]
 80095dc:	b29a      	uxth	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80095f0:	4b41      	ldr	r3, [pc, #260]	; (80096f8 <tcp_process+0x2c0>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	1e5a      	subs	r2, r3, #1
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2204      	movs	r2, #4
 80095fe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3304      	adds	r3, #4
 8009608:	4618      	mov	r0, r3
 800960a:	f006 fcc9 	bl	800ffa0 <ip4_route>
 800960e:	4601      	mov	r1, r0
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3304      	adds	r3, #4
 8009614:	461a      	mov	r2, r3
 8009616:	4620      	mov	r0, r4
 8009618:	f7ff f88e 	bl	8008738 <tcp_eff_send_mss_netif>
 800961c:	4603      	mov	r3, r0
 800961e:	461a      	mov	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009628:	009a      	lsls	r2, r3, #2
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	f241 111c 	movw	r1, #4380	; 0x111c
 8009634:	428b      	cmp	r3, r1
 8009636:	bf38      	it	cc
 8009638:	460b      	movcc	r3, r1
 800963a:	429a      	cmp	r2, r3
 800963c:	d204      	bcs.n	8009648 <tcp_process+0x210>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	b29b      	uxth	r3, r3
 8009646:	e00d      	b.n	8009664 <tcp_process+0x22c>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009652:	4293      	cmp	r3, r2
 8009654:	d904      	bls.n	8009660 <tcp_process+0x228>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800965a:	005b      	lsls	r3, r3, #1
 800965c:	b29b      	uxth	r3, r3
 800965e:	e001      	b.n	8009664 <tcp_process+0x22c>
 8009660:	f241 131c 	movw	r3, #4380	; 0x111c
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009670:	2b00      	cmp	r3, #0
 8009672:	d106      	bne.n	8009682 <tcp_process+0x24a>
 8009674:	4b1b      	ldr	r3, [pc, #108]	; (80096e4 <tcp_process+0x2ac>)
 8009676:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800967a:	4924      	ldr	r1, [pc, #144]	; (800970c <tcp_process+0x2d4>)
 800967c:	481b      	ldr	r0, [pc, #108]	; (80096ec <tcp_process+0x2b4>)
 800967e:	f007 fedb 	bl	8011438 <iprintf>
        --pcb->snd_queuelen;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009688:	3b01      	subs	r3, #1
 800968a:	b29a      	uxth	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009696:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d111      	bne.n	80096c2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d106      	bne.n	80096b8 <tcp_process+0x280>
 80096aa:	4b0e      	ldr	r3, [pc, #56]	; (80096e4 <tcp_process+0x2ac>)
 80096ac:	f44f 725d 	mov.w	r2, #884	; 0x374
 80096b0:	4917      	ldr	r1, [pc, #92]	; (8009710 <tcp_process+0x2d8>)
 80096b2:	480e      	ldr	r0, [pc, #56]	; (80096ec <tcp_process+0x2b4>)
 80096b4:	f007 fec0 	bl	8011438 <iprintf>
          pcb->unsent = rseg->next;
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	66da      	str	r2, [r3, #108]	; 0x6c
 80096c0:	e003      	b.n	80096ca <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80096ca:	69f8      	ldr	r0, [r7, #28]
 80096cc:	f7fe fd3d 	bl	800814a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d11d      	bne.n	8009714 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096de:	861a      	strh	r2, [r3, #48]	; 0x30
 80096e0:	e01f      	b.n	8009722 <tcp_process+0x2ea>
 80096e2:	bf00      	nop
 80096e4:	080136c8 	.word	0x080136c8
 80096e8:	08013900 	.word	0x08013900
 80096ec:	08013714 	.word	0x08013714
 80096f0:	200000fc 	.word	0x200000fc
 80096f4:	200000f4 	.word	0x200000f4
 80096f8:	200000f0 	.word	0x200000f0
 80096fc:	0801391c 	.word	0x0801391c
 8009700:	200000fd 	.word	0x200000fd
 8009704:	20006df4 	.word	0x20006df4
 8009708:	200000e0 	.word	0x200000e0
 800970c:	0801393c 	.word	0x0801393c
 8009710:	08013954 	.word	0x08013954
        } else {
          pcb->rtime = 0;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00a      	beq.n	8009742 <tcp_process+0x30a>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	6910      	ldr	r0, [r2, #16]
 8009736:	2200      	movs	r2, #0
 8009738:	6879      	ldr	r1, [r7, #4]
 800973a:	4798      	blx	r3
 800973c:	4603      	mov	r3, r0
 800973e:	76bb      	strb	r3, [r7, #26]
 8009740:	e001      	b.n	8009746 <tcp_process+0x30e>
 8009742:	2300      	movs	r3, #0
 8009744:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009746:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800974a:	f113 0f0d 	cmn.w	r3, #13
 800974e:	d102      	bne.n	8009756 <tcp_process+0x31e>
          return ERR_ABRT;
 8009750:	f06f 030c 	mvn.w	r3, #12
 8009754:	e250      	b.n	8009bf8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	8b5b      	ldrh	r3, [r3, #26]
 800975a:	f043 0302 	orr.w	r3, r3, #2
 800975e:	b29a      	uxth	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009764:	e23a      	b.n	8009bdc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009766:	4b9d      	ldr	r3, [pc, #628]	; (80099dc <tcp_process+0x5a4>)
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	f003 0310 	and.w	r3, r3, #16
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 8234 	beq.w	8009bdc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009774:	4b9a      	ldr	r3, [pc, #616]	; (80099e0 <tcp_process+0x5a8>)
 8009776:	6819      	ldr	r1, [r3, #0]
 8009778:	4b9a      	ldr	r3, [pc, #616]	; (80099e4 <tcp_process+0x5ac>)
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	4b9a      	ldr	r3, [pc, #616]	; (80099e8 <tcp_process+0x5b0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009784:	4b99      	ldr	r3, [pc, #612]	; (80099ec <tcp_process+0x5b4>)
 8009786:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009788:	885b      	ldrh	r3, [r3, #2]
 800978a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800978c:	4a97      	ldr	r2, [pc, #604]	; (80099ec <tcp_process+0x5b4>)
 800978e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009790:	8812      	ldrh	r2, [r2, #0]
 8009792:	b292      	uxth	r2, r2
 8009794:	9202      	str	r2, [sp, #8]
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	4b95      	ldr	r3, [pc, #596]	; (80099f0 <tcp_process+0x5b8>)
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	4b95      	ldr	r3, [pc, #596]	; (80099f4 <tcp_process+0x5bc>)
 800979e:	4602      	mov	r2, r0
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f002 fc83 	bl	800c0ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097ac:	2b05      	cmp	r3, #5
 80097ae:	f200 8215 	bhi.w	8009bdc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f002 fa4d 	bl	800bc58 <tcp_rexmit_rto>
      break;
 80097be:	e20d      	b.n	8009bdc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80097c0:	4b86      	ldr	r3, [pc, #536]	; (80099dc <tcp_process+0x5a4>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	f003 0310 	and.w	r3, r3, #16
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 80a1 	beq.w	8009910 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80097ce:	4b84      	ldr	r3, [pc, #528]	; (80099e0 <tcp_process+0x5a8>)
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	3b01      	subs	r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	db7e      	blt.n	80098dc <tcp_process+0x4a4>
 80097de:	4b80      	ldr	r3, [pc, #512]	; (80099e0 <tcp_process+0x5a8>)
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	dc77      	bgt.n	80098dc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2204      	movs	r2, #4
 80097f0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d102      	bne.n	8009800 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80097fa:	23fa      	movs	r3, #250	; 0xfa
 80097fc:	76bb      	strb	r3, [r7, #26]
 80097fe:	e01d      	b.n	800983c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d106      	bne.n	8009818 <tcp_process+0x3e0>
 800980a:	4b7b      	ldr	r3, [pc, #492]	; (80099f8 <tcp_process+0x5c0>)
 800980c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009810:	497a      	ldr	r1, [pc, #488]	; (80099fc <tcp_process+0x5c4>)
 8009812:	487b      	ldr	r0, [pc, #492]	; (8009a00 <tcp_process+0x5c8>)
 8009814:	f007 fe10 	bl	8011438 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00a      	beq.n	8009838 <tcp_process+0x400>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6910      	ldr	r0, [r2, #16]
 800982c:	2200      	movs	r2, #0
 800982e:	6879      	ldr	r1, [r7, #4]
 8009830:	4798      	blx	r3
 8009832:	4603      	mov	r3, r0
 8009834:	76bb      	strb	r3, [r7, #26]
 8009836:	e001      	b.n	800983c <tcp_process+0x404>
 8009838:	23f0      	movs	r3, #240	; 0xf0
 800983a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800983c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00a      	beq.n	800985a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009844:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009848:	f113 0f0d 	cmn.w	r3, #13
 800984c:	d002      	beq.n	8009854 <tcp_process+0x41c>
              tcp_abort(pcb);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7fd ff90 	bl	8007774 <tcp_abort>
            }
            return ERR_ABRT;
 8009854:	f06f 030c 	mvn.w	r3, #12
 8009858:	e1ce      	b.n	8009bf8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fae0 	bl	8009e20 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009860:	4b68      	ldr	r3, [pc, #416]	; (8009a04 <tcp_process+0x5cc>)
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d005      	beq.n	8009874 <tcp_process+0x43c>
            recv_acked--;
 8009868:	4b66      	ldr	r3, [pc, #408]	; (8009a04 <tcp_process+0x5cc>)
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	3b01      	subs	r3, #1
 800986e:	b29a      	uxth	r2, r3
 8009870:	4b64      	ldr	r3, [pc, #400]	; (8009a04 <tcp_process+0x5cc>)
 8009872:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009878:	009a      	lsls	r2, r3, #2
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800987e:	005b      	lsls	r3, r3, #1
 8009880:	f241 111c 	movw	r1, #4380	; 0x111c
 8009884:	428b      	cmp	r3, r1
 8009886:	bf38      	it	cc
 8009888:	460b      	movcc	r3, r1
 800988a:	429a      	cmp	r2, r3
 800988c:	d204      	bcs.n	8009898 <tcp_process+0x460>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	b29b      	uxth	r3, r3
 8009896:	e00d      	b.n	80098b4 <tcp_process+0x47c>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	f241 121c 	movw	r2, #4380	; 0x111c
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d904      	bls.n	80098b0 <tcp_process+0x478>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098aa:	005b      	lsls	r3, r3, #1
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	e001      	b.n	80098b4 <tcp_process+0x47c>
 80098b0:	f241 131c 	movw	r3, #4380	; 0x111c
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80098ba:	4b53      	ldr	r3, [pc, #332]	; (8009a08 <tcp_process+0x5d0>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	f003 0320 	and.w	r3, r3, #32
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d037      	beq.n	8009936 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	8b5b      	ldrh	r3, [r3, #26]
 80098ca:	f043 0302 	orr.w	r3, r3, #2
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2207      	movs	r2, #7
 80098d8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80098da:	e02c      	b.n	8009936 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098dc:	4b40      	ldr	r3, [pc, #256]	; (80099e0 <tcp_process+0x5a8>)
 80098de:	6819      	ldr	r1, [r3, #0]
 80098e0:	4b40      	ldr	r3, [pc, #256]	; (80099e4 <tcp_process+0x5ac>)
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	461a      	mov	r2, r3
 80098e6:	4b40      	ldr	r3, [pc, #256]	; (80099e8 <tcp_process+0x5b0>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098ec:	4b3f      	ldr	r3, [pc, #252]	; (80099ec <tcp_process+0x5b4>)
 80098ee:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098f0:	885b      	ldrh	r3, [r3, #2]
 80098f2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098f4:	4a3d      	ldr	r2, [pc, #244]	; (80099ec <tcp_process+0x5b4>)
 80098f6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098f8:	8812      	ldrh	r2, [r2, #0]
 80098fa:	b292      	uxth	r2, r2
 80098fc:	9202      	str	r2, [sp, #8]
 80098fe:	9301      	str	r3, [sp, #4]
 8009900:	4b3b      	ldr	r3, [pc, #236]	; (80099f0 <tcp_process+0x5b8>)
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	4b3b      	ldr	r3, [pc, #236]	; (80099f4 <tcp_process+0x5bc>)
 8009906:	4602      	mov	r2, r0
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f002 fbcf 	bl	800c0ac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800990e:	e167      	b.n	8009be0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009910:	4b32      	ldr	r3, [pc, #200]	; (80099dc <tcp_process+0x5a4>)
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	f003 0302 	and.w	r3, r3, #2
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8161 	beq.w	8009be0 <tcp_process+0x7a8>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	1e5a      	subs	r2, r3, #1
 8009924:	4b30      	ldr	r3, [pc, #192]	; (80099e8 <tcp_process+0x5b0>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	429a      	cmp	r2, r3
 800992a:	f040 8159 	bne.w	8009be0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f002 f9b4 	bl	800bc9c <tcp_rexmit>
      break;
 8009934:	e154      	b.n	8009be0 <tcp_process+0x7a8>
 8009936:	e153      	b.n	8009be0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fa71 	bl	8009e20 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800993e:	4b32      	ldr	r3, [pc, #200]	; (8009a08 <tcp_process+0x5d0>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	f003 0320 	and.w	r3, r3, #32
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 814c 	beq.w	8009be4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	8b5b      	ldrh	r3, [r3, #26]
 8009950:	f043 0302 	orr.w	r3, r3, #2
 8009954:	b29a      	uxth	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2207      	movs	r2, #7
 800995e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009960:	e140      	b.n	8009be4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fa5c 	bl	8009e20 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009968:	4b27      	ldr	r3, [pc, #156]	; (8009a08 <tcp_process+0x5d0>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b00      	cmp	r3, #0
 8009972:	d071      	beq.n	8009a58 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009974:	4b19      	ldr	r3, [pc, #100]	; (80099dc <tcp_process+0x5a4>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	f003 0310 	and.w	r3, r3, #16
 800997c:	2b00      	cmp	r3, #0
 800997e:	d060      	beq.n	8009a42 <tcp_process+0x60a>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009984:	4b16      	ldr	r3, [pc, #88]	; (80099e0 <tcp_process+0x5a8>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	429a      	cmp	r2, r3
 800998a:	d15a      	bne.n	8009a42 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009990:	2b00      	cmp	r3, #0
 8009992:	d156      	bne.n	8009a42 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	8b5b      	ldrh	r3, [r3, #26]
 8009998:	f043 0302 	orr.w	r3, r3, #2
 800999c:	b29a      	uxth	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7fe fdbe 	bl	8008524 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80099a8:	4b18      	ldr	r3, [pc, #96]	; (8009a0c <tcp_process+0x5d4>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d105      	bne.n	80099be <tcp_process+0x586>
 80099b2:	4b16      	ldr	r3, [pc, #88]	; (8009a0c <tcp_process+0x5d4>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	4a14      	ldr	r2, [pc, #80]	; (8009a0c <tcp_process+0x5d4>)
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	e02e      	b.n	8009a1c <tcp_process+0x5e4>
 80099be:	4b13      	ldr	r3, [pc, #76]	; (8009a0c <tcp_process+0x5d4>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	e027      	b.n	8009a16 <tcp_process+0x5de>
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d11f      	bne.n	8009a10 <tcp_process+0x5d8>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	68da      	ldr	r2, [r3, #12]
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	60da      	str	r2, [r3, #12]
 80099d8:	e020      	b.n	8009a1c <tcp_process+0x5e4>
 80099da:	bf00      	nop
 80099dc:	200000fc 	.word	0x200000fc
 80099e0:	200000f4 	.word	0x200000f4
 80099e4:	200000fa 	.word	0x200000fa
 80099e8:	200000f0 	.word	0x200000f0
 80099ec:	200000e0 	.word	0x200000e0
 80099f0:	2000389c 	.word	0x2000389c
 80099f4:	200038a0 	.word	0x200038a0
 80099f8:	080136c8 	.word	0x080136c8
 80099fc:	08013968 	.word	0x08013968
 8009a00:	08013714 	.word	0x08013714
 8009a04:	200000f8 	.word	0x200000f8
 8009a08:	200000fd 	.word	0x200000fd
 8009a0c:	20006df0 	.word	0x20006df0
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	617b      	str	r3, [r7, #20]
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1d4      	bne.n	80099c6 <tcp_process+0x58e>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	60da      	str	r2, [r3, #12]
 8009a22:	4b77      	ldr	r3, [pc, #476]	; (8009c00 <tcp_process+0x7c8>)
 8009a24:	2201      	movs	r2, #1
 8009a26:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	220a      	movs	r2, #10
 8009a2c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009a2e:	4b75      	ldr	r3, [pc, #468]	; (8009c04 <tcp_process+0x7cc>)
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	60da      	str	r2, [r3, #12]
 8009a36:	4a73      	ldr	r2, [pc, #460]	; (8009c04 <tcp_process+0x7cc>)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6013      	str	r3, [r2, #0]
 8009a3c:	f002 fcf8 	bl	800c430 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009a40:	e0d2      	b.n	8009be8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	8b5b      	ldrh	r3, [r3, #26]
 8009a46:	f043 0302 	orr.w	r3, r3, #2
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2208      	movs	r2, #8
 8009a54:	751a      	strb	r2, [r3, #20]
      break;
 8009a56:	e0c7      	b.n	8009be8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a58:	4b6b      	ldr	r3, [pc, #428]	; (8009c08 <tcp_process+0x7d0>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	f003 0310 	and.w	r3, r3, #16
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 80c1 	beq.w	8009be8 <tcp_process+0x7b0>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a6a:	4b68      	ldr	r3, [pc, #416]	; (8009c0c <tcp_process+0x7d4>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	f040 80ba 	bne.w	8009be8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f040 80b5 	bne.w	8009be8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2206      	movs	r2, #6
 8009a82:	751a      	strb	r2, [r3, #20]
      break;
 8009a84:	e0b0      	b.n	8009be8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f9ca 	bl	8009e20 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009a8c:	4b60      	ldr	r3, [pc, #384]	; (8009c10 <tcp_process+0x7d8>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	f003 0320 	and.w	r3, r3, #32
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f000 80a9 	beq.w	8009bec <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	8b5b      	ldrh	r3, [r3, #26]
 8009a9e:	f043 0302 	orr.w	r3, r3, #2
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7fe fd3b 	bl	8008524 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009aae:	4b59      	ldr	r3, [pc, #356]	; (8009c14 <tcp_process+0x7dc>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d105      	bne.n	8009ac4 <tcp_process+0x68c>
 8009ab8:	4b56      	ldr	r3, [pc, #344]	; (8009c14 <tcp_process+0x7dc>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	4a55      	ldr	r2, [pc, #340]	; (8009c14 <tcp_process+0x7dc>)
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	e013      	b.n	8009aec <tcp_process+0x6b4>
 8009ac4:	4b53      	ldr	r3, [pc, #332]	; (8009c14 <tcp_process+0x7dc>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	613b      	str	r3, [r7, #16]
 8009aca:	e00c      	b.n	8009ae6 <tcp_process+0x6ae>
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d104      	bne.n	8009ae0 <tcp_process+0x6a8>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	60da      	str	r2, [r3, #12]
 8009ade:	e005      	b.n	8009aec <tcp_process+0x6b4>
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	613b      	str	r3, [r7, #16]
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1ef      	bne.n	8009acc <tcp_process+0x694>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	60da      	str	r2, [r3, #12]
 8009af2:	4b43      	ldr	r3, [pc, #268]	; (8009c00 <tcp_process+0x7c8>)
 8009af4:	2201      	movs	r2, #1
 8009af6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	220a      	movs	r2, #10
 8009afc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009afe:	4b41      	ldr	r3, [pc, #260]	; (8009c04 <tcp_process+0x7cc>)
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	60da      	str	r2, [r3, #12]
 8009b06:	4a3f      	ldr	r2, [pc, #252]	; (8009c04 <tcp_process+0x7cc>)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	f002 fc90 	bl	800c430 <tcp_timer_needed>
      }
      break;
 8009b10:	e06c      	b.n	8009bec <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f984 	bl	8009e20 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009b18:	4b3b      	ldr	r3, [pc, #236]	; (8009c08 <tcp_process+0x7d0>)
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	f003 0310 	and.w	r3, r3, #16
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d065      	beq.n	8009bf0 <tcp_process+0x7b8>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b28:	4b38      	ldr	r3, [pc, #224]	; (8009c0c <tcp_process+0x7d4>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d15f      	bne.n	8009bf0 <tcp_process+0x7b8>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d15b      	bne.n	8009bf0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7fe fcf3 	bl	8008524 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009b3e:	4b35      	ldr	r3, [pc, #212]	; (8009c14 <tcp_process+0x7dc>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d105      	bne.n	8009b54 <tcp_process+0x71c>
 8009b48:	4b32      	ldr	r3, [pc, #200]	; (8009c14 <tcp_process+0x7dc>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	4a31      	ldr	r2, [pc, #196]	; (8009c14 <tcp_process+0x7dc>)
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	e013      	b.n	8009b7c <tcp_process+0x744>
 8009b54:	4b2f      	ldr	r3, [pc, #188]	; (8009c14 <tcp_process+0x7dc>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	60fb      	str	r3, [r7, #12]
 8009b5a:	e00c      	b.n	8009b76 <tcp_process+0x73e>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d104      	bne.n	8009b70 <tcp_process+0x738>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	68da      	ldr	r2, [r3, #12]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	60da      	str	r2, [r3, #12]
 8009b6e:	e005      	b.n	8009b7c <tcp_process+0x744>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	60fb      	str	r3, [r7, #12]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1ef      	bne.n	8009b5c <tcp_process+0x724>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	60da      	str	r2, [r3, #12]
 8009b82:	4b1f      	ldr	r3, [pc, #124]	; (8009c00 <tcp_process+0x7c8>)
 8009b84:	2201      	movs	r2, #1
 8009b86:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	220a      	movs	r2, #10
 8009b8c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009b8e:	4b1d      	ldr	r3, [pc, #116]	; (8009c04 <tcp_process+0x7cc>)
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	60da      	str	r2, [r3, #12]
 8009b96:	4a1b      	ldr	r2, [pc, #108]	; (8009c04 <tcp_process+0x7cc>)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6013      	str	r3, [r2, #0]
 8009b9c:	f002 fc48 	bl	800c430 <tcp_timer_needed>
      }
      break;
 8009ba0:	e026      	b.n	8009bf0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f93c 	bl	8009e20 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009ba8:	4b17      	ldr	r3, [pc, #92]	; (8009c08 <tcp_process+0x7d0>)
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	f003 0310 	and.w	r3, r3, #16
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d01f      	beq.n	8009bf4 <tcp_process+0x7bc>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bb8:	4b14      	ldr	r3, [pc, #80]	; (8009c0c <tcp_process+0x7d4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d119      	bne.n	8009bf4 <tcp_process+0x7bc>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d115      	bne.n	8009bf4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009bc8:	4b11      	ldr	r3, [pc, #68]	; (8009c10 <tcp_process+0x7d8>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	f043 0310 	orr.w	r3, r3, #16
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	4b0f      	ldr	r3, [pc, #60]	; (8009c10 <tcp_process+0x7d8>)
 8009bd4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009bd6:	e00d      	b.n	8009bf4 <tcp_process+0x7bc>
    default:
      break;
 8009bd8:	bf00      	nop
 8009bda:	e00c      	b.n	8009bf6 <tcp_process+0x7be>
      break;
 8009bdc:	bf00      	nop
 8009bde:	e00a      	b.n	8009bf6 <tcp_process+0x7be>
      break;
 8009be0:	bf00      	nop
 8009be2:	e008      	b.n	8009bf6 <tcp_process+0x7be>
      break;
 8009be4:	bf00      	nop
 8009be6:	e006      	b.n	8009bf6 <tcp_process+0x7be>
      break;
 8009be8:	bf00      	nop
 8009bea:	e004      	b.n	8009bf6 <tcp_process+0x7be>
      break;
 8009bec:	bf00      	nop
 8009bee:	e002      	b.n	8009bf6 <tcp_process+0x7be>
      break;
 8009bf0:	bf00      	nop
 8009bf2:	e000      	b.n	8009bf6 <tcp_process+0x7be>
      break;
 8009bf4:	bf00      	nop
  }
  return ERR_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3724      	adds	r7, #36	; 0x24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd90      	pop	{r4, r7, pc}
 8009c00:	20006dec 	.word	0x20006dec
 8009c04:	20006e00 	.word	0x20006e00
 8009c08:	200000fc 	.word	0x200000fc
 8009c0c:	200000f4 	.word	0x200000f4
 8009c10:	200000fd 	.word	0x200000fd
 8009c14:	20006df0 	.word	0x20006df0

08009c18 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009c18:	b590      	push	{r4, r7, lr}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d106      	bne.n	8009c36 <tcp_oos_insert_segment+0x1e>
 8009c28:	4b3b      	ldr	r3, [pc, #236]	; (8009d18 <tcp_oos_insert_segment+0x100>)
 8009c2a:	f240 421f 	movw	r2, #1055	; 0x41f
 8009c2e:	493b      	ldr	r1, [pc, #236]	; (8009d1c <tcp_oos_insert_segment+0x104>)
 8009c30:	483b      	ldr	r0, [pc, #236]	; (8009d20 <tcp_oos_insert_segment+0x108>)
 8009c32:	f007 fc01 	bl	8011438 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	899b      	ldrh	r3, [r3, #12]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fb fd44 	bl	80056cc <lwip_htons>
 8009c44:	4603      	mov	r3, r0
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d028      	beq.n	8009ca2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009c50:	6838      	ldr	r0, [r7, #0]
 8009c52:	f7fe fa65 	bl	8008120 <tcp_segs_free>
    next = NULL;
 8009c56:	2300      	movs	r3, #0
 8009c58:	603b      	str	r3, [r7, #0]
 8009c5a:	e056      	b.n	8009d0a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	899b      	ldrh	r3, [r3, #12]
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fb fd31 	bl	80056cc <lwip_htons>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00d      	beq.n	8009c92 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	899b      	ldrh	r3, [r3, #12]
 8009c7c:	b29c      	uxth	r4, r3
 8009c7e:	2001      	movs	r0, #1
 8009c80:	f7fb fd24 	bl	80056cc <lwip_htons>
 8009c84:	4603      	mov	r3, r0
 8009c86:	461a      	mov	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	4322      	orrs	r2, r4
 8009c8e:	b292      	uxth	r2, r2
 8009c90:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f7fe fa54 	bl	800814a <tcp_seg_free>
    while (next &&
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00e      	beq.n	8009cc6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	891b      	ldrh	r3, [r3, #8]
 8009cac:	461a      	mov	r2, r3
 8009cae:	4b1d      	ldr	r3, [pc, #116]	; (8009d24 <tcp_oos_insert_segment+0x10c>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	441a      	add	r2, r3
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	8909      	ldrh	r1, [r1, #8]
 8009cbe:	440b      	add	r3, r1
 8009cc0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	daca      	bge.n	8009c5c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01e      	beq.n	8009d0a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	891b      	ldrh	r3, [r3, #8]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	4b14      	ldr	r3, [pc, #80]	; (8009d24 <tcp_oos_insert_segment+0x10c>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	441a      	add	r2, r3
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	dd12      	ble.n	8009d0a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	4b0d      	ldr	r3, [pc, #52]	; (8009d24 <tcp_oos_insert_segment+0x10c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	891b      	ldrh	r3, [r3, #8]
 8009d02:	4619      	mov	r1, r3
 8009d04:	4610      	mov	r0, r2
 8009d06:	f7fc fe17 	bl	8006938 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	683a      	ldr	r2, [r7, #0]
 8009d0e:	601a      	str	r2, [r3, #0]
}
 8009d10:	bf00      	nop
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd90      	pop	{r4, r7, pc}
 8009d18:	080136c8 	.word	0x080136c8
 8009d1c:	08013988 	.word	0x08013988
 8009d20:	08013714 	.word	0x08013714
 8009d24:	200000f0 	.word	0x200000f0

08009d28 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009d28:	b5b0      	push	{r4, r5, r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009d36:	e03e      	b.n	8009db6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fd f804 	bl	8006d54 <pbuf_clen>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d56:	8a7a      	ldrh	r2, [r7, #18]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d906      	bls.n	8009d6a <tcp_free_acked_segments+0x42>
 8009d5c:	4b2a      	ldr	r3, [pc, #168]	; (8009e08 <tcp_free_acked_segments+0xe0>)
 8009d5e:	f240 4257 	movw	r2, #1111	; 0x457
 8009d62:	492a      	ldr	r1, [pc, #168]	; (8009e0c <tcp_free_acked_segments+0xe4>)
 8009d64:	482a      	ldr	r0, [pc, #168]	; (8009e10 <tcp_free_acked_segments+0xe8>)
 8009d66:	f007 fb67 	bl	8011438 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009d70:	8a7b      	ldrh	r3, [r7, #18]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	891a      	ldrh	r2, [r3, #8]
 8009d80:	4b24      	ldr	r3, [pc, #144]	; (8009e14 <tcp_free_acked_segments+0xec>)
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	4413      	add	r3, r2
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	4b22      	ldr	r3, [pc, #136]	; (8009e14 <tcp_free_acked_segments+0xec>)
 8009d8a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009d8c:	6978      	ldr	r0, [r7, #20]
 8009d8e:	f7fe f9dc 	bl	800814a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00c      	beq.n	8009db6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d109      	bne.n	8009db6 <tcp_free_acked_segments+0x8e>
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d106      	bne.n	8009db6 <tcp_free_acked_segments+0x8e>
 8009da8:	4b17      	ldr	r3, [pc, #92]	; (8009e08 <tcp_free_acked_segments+0xe0>)
 8009daa:	f240 4261 	movw	r2, #1121	; 0x461
 8009dae:	491a      	ldr	r1, [pc, #104]	; (8009e18 <tcp_free_acked_segments+0xf0>)
 8009db0:	4817      	ldr	r0, [pc, #92]	; (8009e10 <tcp_free_acked_segments+0xe8>)
 8009db2:	f007 fb41 	bl	8011438 <iprintf>
  while (seg_list != NULL &&
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d020      	beq.n	8009dfe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fb fc97 	bl	80056f6 <lwip_htonl>
 8009dc8:	4604      	mov	r4, r0
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	891b      	ldrh	r3, [r3, #8]
 8009dce:	461d      	mov	r5, r3
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	899b      	ldrh	r3, [r3, #12]
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fb fc77 	bl	80056cc <lwip_htons>
 8009dde:	4603      	mov	r3, r0
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	f003 0303 	and.w	r3, r3, #3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <tcp_free_acked_segments+0xc6>
 8009dea:	2301      	movs	r3, #1
 8009dec:	e000      	b.n	8009df0 <tcp_free_acked_segments+0xc8>
 8009dee:	2300      	movs	r3, #0
 8009df0:	442b      	add	r3, r5
 8009df2:	18e2      	adds	r2, r4, r3
 8009df4:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <tcp_free_acked_segments+0xf4>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	dd9c      	ble.n	8009d38 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009dfe:	68bb      	ldr	r3, [r7, #8]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bdb0      	pop	{r4, r5, r7, pc}
 8009e08:	080136c8 	.word	0x080136c8
 8009e0c:	080139b0 	.word	0x080139b0
 8009e10:	08013714 	.word	0x08013714
 8009e14:	200000f8 	.word	0x200000f8
 8009e18:	080139d8 	.word	0x080139d8
 8009e1c:	200000f4 	.word	0x200000f4

08009e20 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009e20:	b5b0      	push	{r4, r5, r7, lr}
 8009e22:	b094      	sub	sp, #80	; 0x50
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d106      	bne.n	8009e40 <tcp_receive+0x20>
 8009e32:	4ba6      	ldr	r3, [pc, #664]	; (800a0cc <tcp_receive+0x2ac>)
 8009e34:	f240 427b 	movw	r2, #1147	; 0x47b
 8009e38:	49a5      	ldr	r1, [pc, #660]	; (800a0d0 <tcp_receive+0x2b0>)
 8009e3a:	48a6      	ldr	r0, [pc, #664]	; (800a0d4 <tcp_receive+0x2b4>)
 8009e3c:	f007 fafc 	bl	8011438 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	7d1b      	ldrb	r3, [r3, #20]
 8009e44:	2b03      	cmp	r3, #3
 8009e46:	d806      	bhi.n	8009e56 <tcp_receive+0x36>
 8009e48:	4ba0      	ldr	r3, [pc, #640]	; (800a0cc <tcp_receive+0x2ac>)
 8009e4a:	f240 427c 	movw	r2, #1148	; 0x47c
 8009e4e:	49a2      	ldr	r1, [pc, #648]	; (800a0d8 <tcp_receive+0x2b8>)
 8009e50:	48a0      	ldr	r0, [pc, #640]	; (800a0d4 <tcp_receive+0x2b4>)
 8009e52:	f007 faf1 	bl	8011438 <iprintf>

  if (flags & TCP_ACK) {
 8009e56:	4ba1      	ldr	r3, [pc, #644]	; (800a0dc <tcp_receive+0x2bc>)
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	f003 0310 	and.w	r3, r3, #16
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 8263 	beq.w	800a32a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e70:	4413      	add	r3, r2
 8009e72:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e78:	4b99      	ldr	r3, [pc, #612]	; (800a0e0 <tcp_receive+0x2c0>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	db1b      	blt.n	8009eba <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e86:	4b96      	ldr	r3, [pc, #600]	; (800a0e0 <tcp_receive+0x2c0>)
 8009e88:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d106      	bne.n	8009e9c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e92:	4b94      	ldr	r3, [pc, #592]	; (800a0e4 <tcp_receive+0x2c4>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	db0e      	blt.n	8009eba <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ea0:	4b90      	ldr	r3, [pc, #576]	; (800a0e4 <tcp_receive+0x2c4>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d125      	bne.n	8009ef4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009ea8:	4b8f      	ldr	r3, [pc, #572]	; (800a0e8 <tcp_receive+0x2c8>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	89db      	ldrh	r3, [r3, #14]
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d91c      	bls.n	8009ef4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009eba:	4b8b      	ldr	r3, [pc, #556]	; (800a0e8 <tcp_receive+0x2c8>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	89db      	ldrh	r3, [r3, #14]
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d205      	bcs.n	8009ee4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009ee4:	4b7e      	ldr	r3, [pc, #504]	; (800a0e0 <tcp_receive+0x2c0>)
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009eec:	4b7d      	ldr	r3, [pc, #500]	; (800a0e4 <tcp_receive+0x2c4>)
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009ef4:	4b7b      	ldr	r3, [pc, #492]	; (800a0e4 <tcp_receive+0x2c4>)
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	dc58      	bgt.n	8009fb4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009f02:	4b7a      	ldr	r3, [pc, #488]	; (800a0ec <tcp_receive+0x2cc>)
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d14b      	bne.n	8009fa2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009f14:	4413      	add	r3, r2
 8009f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d142      	bne.n	8009fa2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	db3d      	blt.n	8009fa2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f2a:	4b6e      	ldr	r3, [pc, #440]	; (800a0e4 <tcp_receive+0x2c4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d137      	bne.n	8009fa2 <tcp_receive+0x182>
              found_dupack = 1;
 8009f32:	2301      	movs	r3, #1
 8009f34:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f3c:	2bff      	cmp	r3, #255	; 0xff
 8009f3e:	d007      	beq.n	8009f50 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f46:	3301      	adds	r3, #1
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d91b      	bls.n	8009f92 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f64:	4413      	add	r3, r2
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d30a      	bcc.n	8009f88 <tcp_receive+0x168>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f7c:	4413      	add	r3, r2
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009f86:	e004      	b.n	8009f92 <tcp_receive+0x172>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d902      	bls.n	8009fa2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 fee9 	bl	800bd74 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f040 8160 	bne.w	800a26a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fb2:	e15a      	b.n	800a26a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009fb4:	4b4b      	ldr	r3, [pc, #300]	; (800a0e4 <tcp_receive+0x2c4>)
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f2c0 814d 	blt.w	800a260 <tcp_receive+0x440>
 8009fc6:	4b47      	ldr	r3, [pc, #284]	; (800a0e4 <tcp_receive+0x2c4>)
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f300 8145 	bgt.w	800a260 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	8b5b      	ldrh	r3, [r3, #26]
 8009fda:	f003 0304 	and.w	r3, r3, #4
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d010      	beq.n	800a004 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	8b5b      	ldrh	r3, [r3, #26]
 8009fe6:	f023 0304 	bic.w	r3, r3, #4
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a012:	10db      	asrs	r3, r3, #3
 800a014:	b21b      	sxth	r3, r3
 800a016:	b29a      	uxth	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a01e:	b29b      	uxth	r3, r3
 800a020:	4413      	add	r3, r2
 800a022:	b29b      	uxth	r3, r3
 800a024:	b21a      	sxth	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a02c:	4b2d      	ldr	r3, [pc, #180]	; (800a0e4 <tcp_receive+0x2c4>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	b29a      	uxth	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a036:	b29b      	uxth	r3, r3
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a044:	4b27      	ldr	r3, [pc, #156]	; (800a0e4 <tcp_receive+0x2c4>)
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	7d1b      	ldrb	r3, [r3, #20]
 800a050:	2b03      	cmp	r3, #3
 800a052:	f240 8096 	bls.w	800a182 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a062:	429a      	cmp	r2, r3
 800a064:	d244      	bcs.n	800a0f0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	8b5b      	ldrh	r3, [r3, #26]
 800a06a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d001      	beq.n	800a076 <tcp_receive+0x256>
 800a072:	2301      	movs	r3, #1
 800a074:	e000      	b.n	800a078 <tcp_receive+0x258>
 800a076:	2302      	movs	r3, #2
 800a078:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a07c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a080:	b29a      	uxth	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a086:	fb12 f303 	smulbb	r3, r2, r3
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a08e:	4293      	cmp	r3, r2
 800a090:	bf28      	it	cs
 800a092:	4613      	movcs	r3, r2
 800a094:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a09c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a09e:	4413      	add	r3, r2
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d309      	bcc.n	800a0c0 <tcp_receive+0x2a0>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a0b4:	4413      	add	r3, r2
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a0be:	e060      	b.n	800a182 <tcp_receive+0x362>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a0ca:	e05a      	b.n	800a182 <tcp_receive+0x362>
 800a0cc:	080136c8 	.word	0x080136c8
 800a0d0:	080139f8 	.word	0x080139f8
 800a0d4:	08013714 	.word	0x08013714
 800a0d8:	08013a14 	.word	0x08013a14
 800a0dc:	200000fc 	.word	0x200000fc
 800a0e0:	200000f0 	.word	0x200000f0
 800a0e4:	200000f4 	.word	0x200000f4
 800a0e8:	200000e0 	.word	0x200000e0
 800a0ec:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a0f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0f8:	4413      	add	r3, r2
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a102:	429a      	cmp	r2, r3
 800a104:	d309      	bcc.n	800a11a <tcp_receive+0x2fa>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a10c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a10e:	4413      	add	r3, r2
 800a110:	b29a      	uxth	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a118:	e004      	b.n	800a124 <tcp_receive+0x304>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a120:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a130:	429a      	cmp	r2, r3
 800a132:	d326      	bcc.n	800a182 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	b29a      	uxth	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a154:	4413      	add	r3, r2
 800a156:	b29a      	uxth	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a15e:	429a      	cmp	r2, r3
 800a160:	d30a      	bcc.n	800a178 <tcp_receive+0x358>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a16c:	4413      	add	r3, r2
 800a16e:	b29a      	uxth	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a176:	e004      	b.n	800a182 <tcp_receive+0x362>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a17e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a18a:	4a98      	ldr	r2, [pc, #608]	; (800a3ec <tcp_receive+0x5cc>)
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7ff fdcb 	bl	8009d28 <tcp_free_acked_segments>
 800a192:	4602      	mov	r2, r0
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a0:	4a93      	ldr	r2, [pc, #588]	; (800a3f0 <tcp_receive+0x5d0>)
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7ff fdc0 	bl	8009d28 <tcp_free_acked_segments>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d104      	bne.n	800a1c0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1bc:	861a      	strh	r2, [r3, #48]	; 0x30
 800a1be:	e002      	b.n	800a1c6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d103      	bne.n	800a1dc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a1e2:	4b84      	ldr	r3, [pc, #528]	; (800a3f4 <tcp_receive+0x5d4>)
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	8b5b      	ldrh	r3, [r3, #26]
 800a1f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d035      	beq.n	800a268 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a200:	2b00      	cmp	r3, #0
 800a202:	d118      	bne.n	800a236 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00c      	beq.n	800a226 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fb fa6c 	bl	80056f6 <lwip_htonl>
 800a21e:	4603      	mov	r3, r0
 800a220:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a222:	2b00      	cmp	r3, #0
 800a224:	dc20      	bgt.n	800a268 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	8b5b      	ldrh	r3, [r3, #26]
 800a22a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a22e:	b29a      	uxth	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a234:	e018      	b.n	800a268 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	4618      	mov	r0, r3
 800a244:	f7fb fa57 	bl	80056f6 <lwip_htonl>
 800a248:	4603      	mov	r3, r0
 800a24a:	1ae3      	subs	r3, r4, r3
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	dc0b      	bgt.n	800a268 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	8b5b      	ldrh	r3, [r3, #26]
 800a254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a258:	b29a      	uxth	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a25e:	e003      	b.n	800a268 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 ff75 	bl	800c150 <tcp_send_empty_ack>
 800a266:	e000      	b.n	800a26a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a268:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d05b      	beq.n	800a32a <tcp_receive+0x50a>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a276:	4b60      	ldr	r3, [pc, #384]	; (800a3f8 <tcp_receive+0x5d8>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	da54      	bge.n	800a32a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a280:	4b5e      	ldr	r3, [pc, #376]	; (800a3fc <tcp_receive+0x5dc>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	b29a      	uxth	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	b29b      	uxth	r3, r3
 800a290:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a294:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a29e:	10db      	asrs	r3, r3, #3
 800a2a0:	b21b      	sxth	r3, r3
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2b8:	4413      	add	r3, r2
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	b21a      	sxth	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a2c2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	da05      	bge.n	800a2d6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800a2ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2ce:	425b      	negs	r3, r3
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a2d6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a2e0:	109b      	asrs	r3, r3, #2
 800a2e2:	b21b      	sxth	r3, r3
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2fa:	4413      	add	r3, r2
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	b21a      	sxth	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a30a:	10db      	asrs	r3, r3, #3
 800a30c:	b21b      	sxth	r3, r3
 800a30e:	b29a      	uxth	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a316:	b29b      	uxth	r3, r3
 800a318:	4413      	add	r3, r2
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	b21a      	sxth	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a32a:	4b35      	ldr	r3, [pc, #212]	; (800a400 <tcp_receive+0x5e0>)
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f000 84e1 	beq.w	800acf6 <tcp_receive+0xed6>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	7d1b      	ldrb	r3, [r3, #20]
 800a338:	2b06      	cmp	r3, #6
 800a33a:	f200 84dc 	bhi.w	800acf6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a342:	4b30      	ldr	r3, [pc, #192]	; (800a404 <tcp_receive+0x5e4>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	3b01      	subs	r3, #1
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f2c0 808e 	blt.w	800a46c <tcp_receive+0x64c>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a354:	4b2a      	ldr	r3, [pc, #168]	; (800a400 <tcp_receive+0x5e0>)
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	4619      	mov	r1, r3
 800a35a:	4b2a      	ldr	r3, [pc, #168]	; (800a404 <tcp_receive+0x5e4>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	440b      	add	r3, r1
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	3301      	adds	r3, #1
 800a364:	2b00      	cmp	r3, #0
 800a366:	f300 8081 	bgt.w	800a46c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a36a:	4b27      	ldr	r3, [pc, #156]	; (800a408 <tcp_receive+0x5e8>)
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a374:	4b23      	ldr	r3, [pc, #140]	; (800a404 <tcp_receive+0x5e4>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a37c:	4b22      	ldr	r3, [pc, #136]	; (800a408 <tcp_receive+0x5e8>)
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d106      	bne.n	800a392 <tcp_receive+0x572>
 800a384:	4b21      	ldr	r3, [pc, #132]	; (800a40c <tcp_receive+0x5ec>)
 800a386:	f240 5294 	movw	r2, #1428	; 0x594
 800a38a:	4921      	ldr	r1, [pc, #132]	; (800a410 <tcp_receive+0x5f0>)
 800a38c:	4821      	ldr	r0, [pc, #132]	; (800a414 <tcp_receive+0x5f4>)
 800a38e:	f007 f853 	bl	8011438 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a398:	4293      	cmp	r3, r2
 800a39a:	d906      	bls.n	800a3aa <tcp_receive+0x58a>
 800a39c:	4b1b      	ldr	r3, [pc, #108]	; (800a40c <tcp_receive+0x5ec>)
 800a39e:	f240 5295 	movw	r2, #1429	; 0x595
 800a3a2:	491d      	ldr	r1, [pc, #116]	; (800a418 <tcp_receive+0x5f8>)
 800a3a4:	481b      	ldr	r0, [pc, #108]	; (800a414 <tcp_receive+0x5f4>)
 800a3a6:	f007 f847 	bl	8011438 <iprintf>
      off = (u16_t)off32;
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a3b0:	4b15      	ldr	r3, [pc, #84]	; (800a408 <tcp_receive+0x5e8>)
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	891b      	ldrh	r3, [r3, #8]
 800a3b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d906      	bls.n	800a3cc <tcp_receive+0x5ac>
 800a3be:	4b13      	ldr	r3, [pc, #76]	; (800a40c <tcp_receive+0x5ec>)
 800a3c0:	f240 5297 	movw	r2, #1431	; 0x597
 800a3c4:	4915      	ldr	r1, [pc, #84]	; (800a41c <tcp_receive+0x5fc>)
 800a3c6:	4813      	ldr	r0, [pc, #76]	; (800a414 <tcp_receive+0x5f4>)
 800a3c8:	f007 f836 	bl	8011438 <iprintf>
      inseg.len -= off;
 800a3cc:	4b0e      	ldr	r3, [pc, #56]	; (800a408 <tcp_receive+0x5e8>)
 800a3ce:	891a      	ldrh	r2, [r3, #8]
 800a3d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	4b0b      	ldr	r3, [pc, #44]	; (800a408 <tcp_receive+0x5e8>)
 800a3da:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a3dc:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <tcp_receive+0x5e8>)
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	891a      	ldrh	r2, [r3, #8]
 800a3e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a3ea:	e029      	b.n	800a440 <tcp_receive+0x620>
 800a3ec:	08013a30 	.word	0x08013a30
 800a3f0:	08013a38 	.word	0x08013a38
 800a3f4:	200000f8 	.word	0x200000f8
 800a3f8:	200000f4 	.word	0x200000f4
 800a3fc:	20006df4 	.word	0x20006df4
 800a400:	200000fa 	.word	0x200000fa
 800a404:	200000f0 	.word	0x200000f0
 800a408:	200000d0 	.word	0x200000d0
 800a40c:	080136c8 	.word	0x080136c8
 800a410:	08013a40 	.word	0x08013a40
 800a414:	08013714 	.word	0x08013714
 800a418:	08013a50 	.word	0x08013a50
 800a41c:	08013a60 	.word	0x08013a60
        off -= p->len;
 800a420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a422:	895b      	ldrh	r3, [r3, #10]
 800a424:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a42e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a430:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a432:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a436:	2200      	movs	r2, #0
 800a438:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a43a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a442:	895b      	ldrh	r3, [r3, #10]
 800a444:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a448:	429a      	cmp	r2, r3
 800a44a:	d8e9      	bhi.n	800a420 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a44c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a450:	4619      	mov	r1, r3
 800a452:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a454:	f7fc fb70 	bl	8006b38 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	4a91      	ldr	r2, [pc, #580]	; (800a6a4 <tcp_receive+0x884>)
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	4b91      	ldr	r3, [pc, #580]	; (800a6a8 <tcp_receive+0x888>)
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	4a8f      	ldr	r2, [pc, #572]	; (800a6a4 <tcp_receive+0x884>)
 800a466:	6812      	ldr	r2, [r2, #0]
 800a468:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a46a:	e00d      	b.n	800a488 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a46c:	4b8d      	ldr	r3, [pc, #564]	; (800a6a4 <tcp_receive+0x884>)
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	da06      	bge.n	800a488 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	8b5b      	ldrh	r3, [r3, #26]
 800a47e:	f043 0302 	orr.w	r3, r3, #2
 800a482:	b29a      	uxth	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a488:	4b86      	ldr	r3, [pc, #536]	; (800a6a4 <tcp_receive+0x884>)
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	f2c0 842a 	blt.w	800acec <tcp_receive+0xecc>
 800a498:	4b82      	ldr	r3, [pc, #520]	; (800a6a4 <tcp_receive+0x884>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a0:	6879      	ldr	r1, [r7, #4]
 800a4a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a4a4:	440b      	add	r3, r1
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f300 841e 	bgt.w	800acec <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4b4:	4b7b      	ldr	r3, [pc, #492]	; (800a6a4 <tcp_receive+0x884>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	f040 829a 	bne.w	800a9f2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a4be:	4b7a      	ldr	r3, [pc, #488]	; (800a6a8 <tcp_receive+0x888>)
 800a4c0:	891c      	ldrh	r4, [r3, #8]
 800a4c2:	4b79      	ldr	r3, [pc, #484]	; (800a6a8 <tcp_receive+0x888>)
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	899b      	ldrh	r3, [r3, #12]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fb f8fe 	bl	80056cc <lwip_htons>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	f003 0303 	and.w	r3, r3, #3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <tcp_receive+0x6c0>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e000      	b.n	800a4e2 <tcp_receive+0x6c2>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	4423      	add	r3, r4
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	4b71      	ldr	r3, [pc, #452]	; (800a6ac <tcp_receive+0x88c>)
 800a4e8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a4ee:	4b6f      	ldr	r3, [pc, #444]	; (800a6ac <tcp_receive+0x88c>)
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d275      	bcs.n	800a5e2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a4f6:	4b6c      	ldr	r3, [pc, #432]	; (800a6a8 <tcp_receive+0x888>)
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	899b      	ldrh	r3, [r3, #12]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fb f8e4 	bl	80056cc <lwip_htons>
 800a504:	4603      	mov	r3, r0
 800a506:	b2db      	uxtb	r3, r3
 800a508:	f003 0301 	and.w	r3, r3, #1
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d01f      	beq.n	800a550 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a510:	4b65      	ldr	r3, [pc, #404]	; (800a6a8 <tcp_receive+0x888>)
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	899b      	ldrh	r3, [r3, #12]
 800a516:	b29b      	uxth	r3, r3
 800a518:	b21b      	sxth	r3, r3
 800a51a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a51e:	b21c      	sxth	r4, r3
 800a520:	4b61      	ldr	r3, [pc, #388]	; (800a6a8 <tcp_receive+0x888>)
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	899b      	ldrh	r3, [r3, #12]
 800a526:	b29b      	uxth	r3, r3
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fb f8cf 	bl	80056cc <lwip_htons>
 800a52e:	4603      	mov	r3, r0
 800a530:	b2db      	uxtb	r3, r3
 800a532:	b29b      	uxth	r3, r3
 800a534:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a538:	b29b      	uxth	r3, r3
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fb f8c6 	bl	80056cc <lwip_htons>
 800a540:	4603      	mov	r3, r0
 800a542:	b21b      	sxth	r3, r3
 800a544:	4323      	orrs	r3, r4
 800a546:	b21a      	sxth	r2, r3
 800a548:	4b57      	ldr	r3, [pc, #348]	; (800a6a8 <tcp_receive+0x888>)
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	b292      	uxth	r2, r2
 800a54e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a554:	4b54      	ldr	r3, [pc, #336]	; (800a6a8 <tcp_receive+0x888>)
 800a556:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a558:	4b53      	ldr	r3, [pc, #332]	; (800a6a8 <tcp_receive+0x888>)
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	899b      	ldrh	r3, [r3, #12]
 800a55e:	b29b      	uxth	r3, r3
 800a560:	4618      	mov	r0, r3
 800a562:	f7fb f8b3 	bl	80056cc <lwip_htons>
 800a566:	4603      	mov	r3, r0
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	f003 0302 	and.w	r3, r3, #2
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d005      	beq.n	800a57e <tcp_receive+0x75e>
            inseg.len -= 1;
 800a572:	4b4d      	ldr	r3, [pc, #308]	; (800a6a8 <tcp_receive+0x888>)
 800a574:	891b      	ldrh	r3, [r3, #8]
 800a576:	3b01      	subs	r3, #1
 800a578:	b29a      	uxth	r2, r3
 800a57a:	4b4b      	ldr	r3, [pc, #300]	; (800a6a8 <tcp_receive+0x888>)
 800a57c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a57e:	4b4a      	ldr	r3, [pc, #296]	; (800a6a8 <tcp_receive+0x888>)
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	4a49      	ldr	r2, [pc, #292]	; (800a6a8 <tcp_receive+0x888>)
 800a584:	8912      	ldrh	r2, [r2, #8]
 800a586:	4611      	mov	r1, r2
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fc f9d5 	bl	8006938 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a58e:	4b46      	ldr	r3, [pc, #280]	; (800a6a8 <tcp_receive+0x888>)
 800a590:	891c      	ldrh	r4, [r3, #8]
 800a592:	4b45      	ldr	r3, [pc, #276]	; (800a6a8 <tcp_receive+0x888>)
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	899b      	ldrh	r3, [r3, #12]
 800a598:	b29b      	uxth	r3, r3
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fb f896 	bl	80056cc <lwip_htons>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	f003 0303 	and.w	r3, r3, #3
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <tcp_receive+0x790>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e000      	b.n	800a5b2 <tcp_receive+0x792>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	4423      	add	r3, r4
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	4b3d      	ldr	r3, [pc, #244]	; (800a6ac <tcp_receive+0x88c>)
 800a5b8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a5ba:	4b3c      	ldr	r3, [pc, #240]	; (800a6ac <tcp_receive+0x88c>)
 800a5bc:	881b      	ldrh	r3, [r3, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	4b38      	ldr	r3, [pc, #224]	; (800a6a4 <tcp_receive+0x884>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	441a      	add	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ca:	6879      	ldr	r1, [r7, #4]
 800a5cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5ce:	440b      	add	r3, r1
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d006      	beq.n	800a5e2 <tcp_receive+0x7c2>
 800a5d4:	4b36      	ldr	r3, [pc, #216]	; (800a6b0 <tcp_receive+0x890>)
 800a5d6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a5da:	4936      	ldr	r1, [pc, #216]	; (800a6b4 <tcp_receive+0x894>)
 800a5dc:	4836      	ldr	r0, [pc, #216]	; (800a6b8 <tcp_receive+0x898>)
 800a5de:	f006 ff2b 	bl	8011438 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f000 80e7 	beq.w	800a7ba <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a5ec:	4b2e      	ldr	r3, [pc, #184]	; (800a6a8 <tcp_receive+0x888>)
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	899b      	ldrh	r3, [r3, #12]
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fb f869 	bl	80056cc <lwip_htons>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	2b00      	cmp	r3, #0
 800a604:	d010      	beq.n	800a628 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a606:	e00a      	b.n	800a61e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a60c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f7fd fd96 	bl	800814a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1f0      	bne.n	800a608 <tcp_receive+0x7e8>
 800a626:	e0c8      	b.n	800a7ba <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a62c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a62e:	e052      	b.n	800a6d6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	899b      	ldrh	r3, [r3, #12]
 800a636:	b29b      	uxth	r3, r3
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fb f847 	bl	80056cc <lwip_htons>
 800a63e:	4603      	mov	r3, r0
 800a640:	b2db      	uxtb	r3, r3
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	2b00      	cmp	r3, #0
 800a648:	d03d      	beq.n	800a6c6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a64a:	4b17      	ldr	r3, [pc, #92]	; (800a6a8 <tcp_receive+0x888>)
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	899b      	ldrh	r3, [r3, #12]
 800a650:	b29b      	uxth	r3, r3
 800a652:	4618      	mov	r0, r3
 800a654:	f7fb f83a 	bl	80056cc <lwip_htons>
 800a658:	4603      	mov	r3, r0
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a660:	2b00      	cmp	r3, #0
 800a662:	d130      	bne.n	800a6c6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a664:	4b10      	ldr	r3, [pc, #64]	; (800a6a8 <tcp_receive+0x888>)
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	899b      	ldrh	r3, [r3, #12]
 800a66a:	b29c      	uxth	r4, r3
 800a66c:	2001      	movs	r0, #1
 800a66e:	f7fb f82d 	bl	80056cc <lwip_htons>
 800a672:	4603      	mov	r3, r0
 800a674:	461a      	mov	r2, r3
 800a676:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <tcp_receive+0x888>)
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	4322      	orrs	r2, r4
 800a67c:	b292      	uxth	r2, r2
 800a67e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a680:	4b09      	ldr	r3, [pc, #36]	; (800a6a8 <tcp_receive+0x888>)
 800a682:	891c      	ldrh	r4, [r3, #8]
 800a684:	4b08      	ldr	r3, [pc, #32]	; (800a6a8 <tcp_receive+0x888>)
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	899b      	ldrh	r3, [r3, #12]
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fb f81d 	bl	80056cc <lwip_htons>
 800a692:	4603      	mov	r3, r0
 800a694:	b2db      	uxtb	r3, r3
 800a696:	f003 0303 	and.w	r3, r3, #3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00e      	beq.n	800a6bc <tcp_receive+0x89c>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e00d      	b.n	800a6be <tcp_receive+0x89e>
 800a6a2:	bf00      	nop
 800a6a4:	200000f0 	.word	0x200000f0
 800a6a8:	200000d0 	.word	0x200000d0
 800a6ac:	200000fa 	.word	0x200000fa
 800a6b0:	080136c8 	.word	0x080136c8
 800a6b4:	08013a70 	.word	0x08013a70
 800a6b8:	08013714 	.word	0x08013714
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4423      	add	r3, r4
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	4b98      	ldr	r3, [pc, #608]	; (800a924 <tcp_receive+0xb04>)
 800a6c4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6c8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a6d0:	6938      	ldr	r0, [r7, #16]
 800a6d2:	f7fd fd3a 	bl	800814a <tcp_seg_free>
            while (next &&
 800a6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00e      	beq.n	800a6fa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a6dc:	4b91      	ldr	r3, [pc, #580]	; (800a924 <tcp_receive+0xb04>)
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4b91      	ldr	r3, [pc, #580]	; (800a928 <tcp_receive+0xb08>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	441a      	add	r2, r3
 800a6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6f0:	8909      	ldrh	r1, [r1, #8]
 800a6f2:	440b      	add	r3, r1
 800a6f4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	da9a      	bge.n	800a630 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a6fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d059      	beq.n	800a7b4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a700:	4b88      	ldr	r3, [pc, #544]	; (800a924 <tcp_receive+0xb04>)
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	461a      	mov	r2, r3
 800a706:	4b88      	ldr	r3, [pc, #544]	; (800a928 <tcp_receive+0xb08>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	441a      	add	r2, r3
 800a70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a714:	2b00      	cmp	r3, #0
 800a716:	dd4d      	ble.n	800a7b4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	b29a      	uxth	r2, r3
 800a720:	4b81      	ldr	r3, [pc, #516]	; (800a928 <tcp_receive+0xb08>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	b29b      	uxth	r3, r3
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	b29a      	uxth	r2, r3
 800a72a:	4b80      	ldr	r3, [pc, #512]	; (800a92c <tcp_receive+0xb0c>)
 800a72c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a72e:	4b7f      	ldr	r3, [pc, #508]	; (800a92c <tcp_receive+0xb0c>)
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	899b      	ldrh	r3, [r3, #12]
 800a734:	b29b      	uxth	r3, r3
 800a736:	4618      	mov	r0, r3
 800a738:	f7fa ffc8 	bl	80056cc <lwip_htons>
 800a73c:	4603      	mov	r3, r0
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	f003 0302 	and.w	r3, r3, #2
 800a744:	2b00      	cmp	r3, #0
 800a746:	d005      	beq.n	800a754 <tcp_receive+0x934>
                inseg.len -= 1;
 800a748:	4b78      	ldr	r3, [pc, #480]	; (800a92c <tcp_receive+0xb0c>)
 800a74a:	891b      	ldrh	r3, [r3, #8]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	b29a      	uxth	r2, r3
 800a750:	4b76      	ldr	r3, [pc, #472]	; (800a92c <tcp_receive+0xb0c>)
 800a752:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a754:	4b75      	ldr	r3, [pc, #468]	; (800a92c <tcp_receive+0xb0c>)
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	4a74      	ldr	r2, [pc, #464]	; (800a92c <tcp_receive+0xb0c>)
 800a75a:	8912      	ldrh	r2, [r2, #8]
 800a75c:	4611      	mov	r1, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fc f8ea 	bl	8006938 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a764:	4b71      	ldr	r3, [pc, #452]	; (800a92c <tcp_receive+0xb0c>)
 800a766:	891c      	ldrh	r4, [r3, #8]
 800a768:	4b70      	ldr	r3, [pc, #448]	; (800a92c <tcp_receive+0xb0c>)
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	899b      	ldrh	r3, [r3, #12]
 800a76e:	b29b      	uxth	r3, r3
 800a770:	4618      	mov	r0, r3
 800a772:	f7fa ffab 	bl	80056cc <lwip_htons>
 800a776:	4603      	mov	r3, r0
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	f003 0303 	and.w	r3, r3, #3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <tcp_receive+0x966>
 800a782:	2301      	movs	r3, #1
 800a784:	e000      	b.n	800a788 <tcp_receive+0x968>
 800a786:	2300      	movs	r3, #0
 800a788:	4423      	add	r3, r4
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	4b65      	ldr	r3, [pc, #404]	; (800a924 <tcp_receive+0xb04>)
 800a78e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a790:	4b64      	ldr	r3, [pc, #400]	; (800a924 <tcp_receive+0xb04>)
 800a792:	881b      	ldrh	r3, [r3, #0]
 800a794:	461a      	mov	r2, r3
 800a796:	4b64      	ldr	r3, [pc, #400]	; (800a928 <tcp_receive+0xb08>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	441a      	add	r2, r3
 800a79c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d006      	beq.n	800a7b4 <tcp_receive+0x994>
 800a7a6:	4b62      	ldr	r3, [pc, #392]	; (800a930 <tcp_receive+0xb10>)
 800a7a8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a7ac:	4961      	ldr	r1, [pc, #388]	; (800a934 <tcp_receive+0xb14>)
 800a7ae:	4862      	ldr	r0, [pc, #392]	; (800a938 <tcp_receive+0xb18>)
 800a7b0:	f006 fe42 	bl	8011438 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7b8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a7ba:	4b5a      	ldr	r3, [pc, #360]	; (800a924 <tcp_receive+0xb04>)
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	4b59      	ldr	r3, [pc, #356]	; (800a928 <tcp_receive+0xb08>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	441a      	add	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7ce:	4b55      	ldr	r3, [pc, #340]	; (800a924 <tcp_receive+0xb04>)
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d206      	bcs.n	800a7e4 <tcp_receive+0x9c4>
 800a7d6:	4b56      	ldr	r3, [pc, #344]	; (800a930 <tcp_receive+0xb10>)
 800a7d8:	f240 6207 	movw	r2, #1543	; 0x607
 800a7dc:	4957      	ldr	r1, [pc, #348]	; (800a93c <tcp_receive+0xb1c>)
 800a7de:	4856      	ldr	r0, [pc, #344]	; (800a938 <tcp_receive+0xb18>)
 800a7e0:	f006 fe2a 	bl	8011438 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7e8:	4b4e      	ldr	r3, [pc, #312]	; (800a924 <tcp_receive+0xb04>)
 800a7ea:	881b      	ldrh	r3, [r3, #0]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7fc ffc9 	bl	800778c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a7fa:	4b4c      	ldr	r3, [pc, #304]	; (800a92c <tcp_receive+0xb0c>)
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	891b      	ldrh	r3, [r3, #8]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d006      	beq.n	800a812 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a804:	4b49      	ldr	r3, [pc, #292]	; (800a92c <tcp_receive+0xb0c>)
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	4a4d      	ldr	r2, [pc, #308]	; (800a940 <tcp_receive+0xb20>)
 800a80a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a80c:	4b47      	ldr	r3, [pc, #284]	; (800a92c <tcp_receive+0xb0c>)
 800a80e:	2200      	movs	r2, #0
 800a810:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a812:	4b46      	ldr	r3, [pc, #280]	; (800a92c <tcp_receive+0xb0c>)
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	899b      	ldrh	r3, [r3, #12]
 800a818:	b29b      	uxth	r3, r3
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fa ff56 	bl	80056cc <lwip_htons>
 800a820:	4603      	mov	r3, r0
 800a822:	b2db      	uxtb	r3, r3
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f000 80b8 	beq.w	800a99e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a82e:	4b45      	ldr	r3, [pc, #276]	; (800a944 <tcp_receive+0xb24>)
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	f043 0320 	orr.w	r3, r3, #32
 800a836:	b2da      	uxtb	r2, r3
 800a838:	4b42      	ldr	r3, [pc, #264]	; (800a944 <tcp_receive+0xb24>)
 800a83a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a83c:	e0af      	b.n	800a99e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a842:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	4a36      	ldr	r2, [pc, #216]	; (800a928 <tcp_receive+0xb08>)
 800a84e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	891b      	ldrh	r3, [r3, #8]
 800a854:	461c      	mov	r4, r3
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	899b      	ldrh	r3, [r3, #12]
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fa ff34 	bl	80056cc <lwip_htons>
 800a864:	4603      	mov	r3, r0
 800a866:	b2db      	uxtb	r3, r3
 800a868:	f003 0303 	and.w	r3, r3, #3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <tcp_receive+0xa54>
 800a870:	2301      	movs	r3, #1
 800a872:	e000      	b.n	800a876 <tcp_receive+0xa56>
 800a874:	2300      	movs	r3, #0
 800a876:	191a      	adds	r2, r3, r4
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87c:	441a      	add	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a886:	461c      	mov	r4, r3
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	891b      	ldrh	r3, [r3, #8]
 800a88c:	461d      	mov	r5, r3
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	899b      	ldrh	r3, [r3, #12]
 800a894:	b29b      	uxth	r3, r3
 800a896:	4618      	mov	r0, r3
 800a898:	f7fa ff18 	bl	80056cc <lwip_htons>
 800a89c:	4603      	mov	r3, r0
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	f003 0303 	and.w	r3, r3, #3
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d001      	beq.n	800a8ac <tcp_receive+0xa8c>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e000      	b.n	800a8ae <tcp_receive+0xa8e>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	442b      	add	r3, r5
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	d206      	bcs.n	800a8c2 <tcp_receive+0xaa2>
 800a8b4:	4b1e      	ldr	r3, [pc, #120]	; (800a930 <tcp_receive+0xb10>)
 800a8b6:	f240 622b 	movw	r2, #1579	; 0x62b
 800a8ba:	4923      	ldr	r1, [pc, #140]	; (800a948 <tcp_receive+0xb28>)
 800a8bc:	481e      	ldr	r0, [pc, #120]	; (800a938 <tcp_receive+0xb18>)
 800a8be:	f006 fdbb 	bl	8011438 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	891b      	ldrh	r3, [r3, #8]
 800a8c6:	461c      	mov	r4, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	899b      	ldrh	r3, [r3, #12]
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7fa fefb 	bl	80056cc <lwip_htons>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	f003 0303 	and.w	r3, r3, #3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <tcp_receive+0xac6>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e000      	b.n	800a8e8 <tcp_receive+0xac8>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	1919      	adds	r1, r3, r4
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8ee:	b28b      	uxth	r3, r1
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7fc ff47 	bl	800778c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	891b      	ldrh	r3, [r3, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d028      	beq.n	800a95a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a908:	4b0d      	ldr	r3, [pc, #52]	; (800a940 <tcp_receive+0xb20>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01d      	beq.n	800a94c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a910:	4b0b      	ldr	r3, [pc, #44]	; (800a940 <tcp_receive+0xb20>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	4619      	mov	r1, r3
 800a91a:	4610      	mov	r0, r2
 800a91c:	f7fc fa54 	bl	8006dc8 <pbuf_cat>
 800a920:	e018      	b.n	800a954 <tcp_receive+0xb34>
 800a922:	bf00      	nop
 800a924:	200000fa 	.word	0x200000fa
 800a928:	200000f0 	.word	0x200000f0
 800a92c:	200000d0 	.word	0x200000d0
 800a930:	080136c8 	.word	0x080136c8
 800a934:	08013aa8 	.word	0x08013aa8
 800a938:	08013714 	.word	0x08013714
 800a93c:	08013ae4 	.word	0x08013ae4
 800a940:	20000100 	.word	0x20000100
 800a944:	200000fd 	.word	0x200000fd
 800a948:	08013b04 	.word	0x08013b04
            } else {
              recv_data = cseg->p;
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	4a70      	ldr	r2, [pc, #448]	; (800ab14 <tcp_receive+0xcf4>)
 800a952:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2200      	movs	r2, #0
 800a958:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	899b      	ldrh	r3, [r3, #12]
 800a960:	b29b      	uxth	r3, r3
 800a962:	4618      	mov	r0, r3
 800a964:	f7fa feb2 	bl	80056cc <lwip_htons>
 800a968:	4603      	mov	r3, r0
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00d      	beq.n	800a990 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a974:	4b68      	ldr	r3, [pc, #416]	; (800ab18 <tcp_receive+0xcf8>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	f043 0320 	orr.w	r3, r3, #32
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	4b66      	ldr	r3, [pc, #408]	; (800ab18 <tcp_receive+0xcf8>)
 800a980:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	7d1b      	ldrb	r3, [r3, #20]
 800a986:	2b04      	cmp	r3, #4
 800a988:	d102      	bne.n	800a990 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2207      	movs	r2, #7
 800a98e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a998:	68b8      	ldr	r0, [r7, #8]
 800a99a:	f7fd fbd6 	bl	800814a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d008      	beq.n	800a9b8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	f43f af43 	beq.w	800a83e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	8b5b      	ldrh	r3, [r3, #26]
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00e      	beq.n	800a9e2 <tcp_receive+0xbc2>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	8b5b      	ldrh	r3, [r3, #26]
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	835a      	strh	r2, [r3, #26]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	8b5b      	ldrh	r3, [r3, #26]
 800a9d6:	f043 0302 	orr.w	r3, r3, #2
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a9e0:	e188      	b.n	800acf4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	8b5b      	ldrh	r3, [r3, #26]
 800a9e6:	f043 0301 	orr.w	r3, r3, #1
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a9f0:	e180      	b.n	800acf4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d106      	bne.n	800aa08 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a9fa:	4848      	ldr	r0, [pc, #288]	; (800ab1c <tcp_receive+0xcfc>)
 800a9fc:	f7fd fbbe 	bl	800817c <tcp_seg_copy>
 800aa00:	4602      	mov	r2, r0
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	675a      	str	r2, [r3, #116]	; 0x74
 800aa06:	e16d      	b.n	800ace4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa10:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa12:	e157      	b.n	800acc4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800aa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	685a      	ldr	r2, [r3, #4]
 800aa1a:	4b41      	ldr	r3, [pc, #260]	; (800ab20 <tcp_receive+0xd00>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d11d      	bne.n	800aa5e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800aa22:	4b3e      	ldr	r3, [pc, #248]	; (800ab1c <tcp_receive+0xcfc>)
 800aa24:	891a      	ldrh	r2, [r3, #8]
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	891b      	ldrh	r3, [r3, #8]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	f240 814f 	bls.w	800acce <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aa30:	483a      	ldr	r0, [pc, #232]	; (800ab1c <tcp_receive+0xcfc>)
 800aa32:	f7fd fba3 	bl	800817c <tcp_seg_copy>
 800aa36:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 8149 	beq.w	800acd2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800aa40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800aa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	601a      	str	r2, [r3, #0]
 800aa4c:	e002      	b.n	800aa54 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800aa54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa56:	6978      	ldr	r0, [r7, #20]
 800aa58:	f7ff f8de 	bl	8009c18 <tcp_oos_insert_segment>
                }
                break;
 800aa5c:	e139      	b.n	800acd2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800aa5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d117      	bne.n	800aa94 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800aa64:	4b2e      	ldr	r3, [pc, #184]	; (800ab20 <tcp_receive+0xd00>)
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	da57      	bge.n	800ab24 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aa74:	4829      	ldr	r0, [pc, #164]	; (800ab1c <tcp_receive+0xcfc>)
 800aa76:	f7fd fb81 	bl	800817c <tcp_seg_copy>
 800aa7a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f000 8129 	beq.w	800acd6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	69ba      	ldr	r2, [r7, #24]
 800aa88:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800aa8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa8c:	69b8      	ldr	r0, [r7, #24]
 800aa8e:	f7ff f8c3 	bl	8009c18 <tcp_oos_insert_segment>
                  }
                  break;
 800aa92:	e120      	b.n	800acd6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800aa94:	4b22      	ldr	r3, [pc, #136]	; (800ab20 <tcp_receive+0xd00>)
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	db3e      	blt.n	800ab24 <tcp_receive+0xd04>
 800aaa6:	4b1e      	ldr	r3, [pc, #120]	; (800ab20 <tcp_receive+0xd00>)
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	3301      	adds	r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	dc35      	bgt.n	800ab24 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aab8:	4818      	ldr	r0, [pc, #96]	; (800ab1c <tcp_receive+0xcfc>)
 800aaba:	f7fd fb5f 	bl	800817c <tcp_seg_copy>
 800aabe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 8109 	beq.w	800acda <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800aac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aad0:	8912      	ldrh	r2, [r2, #8]
 800aad2:	441a      	add	r2, r3
 800aad4:	4b12      	ldr	r3, [pc, #72]	; (800ab20 <tcp_receive+0xd00>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	dd12      	ble.n	800ab04 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800aade:	4b10      	ldr	r3, [pc, #64]	; (800ab20 <tcp_receive+0xd00>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800aaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aafa:	891b      	ldrh	r3, [r3, #8]
 800aafc:	4619      	mov	r1, r3
 800aafe:	4610      	mov	r0, r2
 800ab00:	f7fb ff1a 	bl	8006938 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ab04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab06:	69fa      	ldr	r2, [r7, #28]
 800ab08:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ab0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab0c:	69f8      	ldr	r0, [r7, #28]
 800ab0e:	f7ff f883 	bl	8009c18 <tcp_oos_insert_segment>
                  }
                  break;
 800ab12:	e0e2      	b.n	800acda <tcp_receive+0xeba>
 800ab14:	20000100 	.word	0x20000100
 800ab18:	200000fd 	.word	0x200000fd
 800ab1c:	200000d0 	.word	0x200000d0
 800ab20:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f040 80c6 	bne.w	800acbe <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ab32:	4b80      	ldr	r3, [pc, #512]	; (800ad34 <tcp_receive+0xf14>)
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f340 80bd 	ble.w	800acbe <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ab44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	899b      	ldrh	r3, [r3, #12]
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fa fdbd 	bl	80056cc <lwip_htons>
 800ab52:	4603      	mov	r3, r0
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f040 80bf 	bne.w	800acde <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ab60:	4875      	ldr	r0, [pc, #468]	; (800ad38 <tcp_receive+0xf18>)
 800ab62:	f7fd fb0b 	bl	800817c <tcp_seg_copy>
 800ab66:	4602      	mov	r2, r0
 800ab68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ab6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 80b6 	beq.w	800ace2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ab76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab7e:	8912      	ldrh	r2, [r2, #8]
 800ab80:	441a      	add	r2, r3
 800ab82:	4b6c      	ldr	r3, [pc, #432]	; (800ad34 <tcp_receive+0xf14>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	dd12      	ble.n	800abb2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ab8c:	4b69      	ldr	r3, [pc, #420]	; (800ad34 <tcp_receive+0xf14>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	685a      	ldr	r2, [r3, #4]
 800aba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba8:	891b      	ldrh	r3, [r3, #8]
 800abaa:	4619      	mov	r1, r3
 800abac:	4610      	mov	r0, r2
 800abae:	f7fb fec3 	bl	8006938 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800abb2:	4b62      	ldr	r3, [pc, #392]	; (800ad3c <tcp_receive+0xf1c>)
 800abb4:	881b      	ldrh	r3, [r3, #0]
 800abb6:	461a      	mov	r2, r3
 800abb8:	4b5e      	ldr	r3, [pc, #376]	; (800ad34 <tcp_receive+0xf14>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	441a      	add	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc2:	6879      	ldr	r1, [r7, #4]
 800abc4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800abc6:	440b      	add	r3, r1
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f340 8089 	ble.w	800ace2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800abd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	899b      	ldrh	r3, [r3, #12]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fa fd76 	bl	80056cc <lwip_htons>
 800abe0:	4603      	mov	r3, r0
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	f003 0301 	and.w	r3, r3, #1
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d022      	beq.n	800ac32 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800abec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	899b      	ldrh	r3, [r3, #12]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	b21b      	sxth	r3, r3
 800abf8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800abfc:	b21c      	sxth	r4, r3
 800abfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	899b      	ldrh	r3, [r3, #12]
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fa fd5f 	bl	80056cc <lwip_htons>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fa fd56 	bl	80056cc <lwip_htons>
 800ac20:	4603      	mov	r3, r0
 800ac22:	b21b      	sxth	r3, r3
 800ac24:	4323      	orrs	r3, r4
 800ac26:	b21a      	sxth	r2, r3
 800ac28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	b292      	uxth	r2, r2
 800ac30:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac3c:	4413      	add	r3, r2
 800ac3e:	b299      	uxth	r1, r3
 800ac40:	4b3c      	ldr	r3, [pc, #240]	; (800ad34 <tcp_receive+0xf14>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	1a8a      	subs	r2, r1, r2
 800ac4c:	b292      	uxth	r2, r2
 800ac4e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ac50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	891b      	ldrh	r3, [r3, #8]
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	4610      	mov	r0, r2
 800ac60:	f7fb fe6a 	bl	8006938 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ac64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	891c      	ldrh	r4, [r3, #8]
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	899b      	ldrh	r3, [r3, #12]
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7fa fd29 	bl	80056cc <lwip_htons>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	f003 0303 	and.w	r3, r3, #3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <tcp_receive+0xe6a>
 800ac86:	2301      	movs	r3, #1
 800ac88:	e000      	b.n	800ac8c <tcp_receive+0xe6c>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	4423      	add	r3, r4
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	4b2a      	ldr	r3, [pc, #168]	; (800ad3c <tcp_receive+0xf1c>)
 800ac92:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ac94:	4b29      	ldr	r3, [pc, #164]	; (800ad3c <tcp_receive+0xf1c>)
 800ac96:	881b      	ldrh	r3, [r3, #0]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	4b26      	ldr	r3, [pc, #152]	; (800ad34 <tcp_receive+0xf14>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	441a      	add	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca4:	6879      	ldr	r1, [r7, #4]
 800aca6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aca8:	440b      	add	r3, r1
 800acaa:	429a      	cmp	r2, r3
 800acac:	d019      	beq.n	800ace2 <tcp_receive+0xec2>
 800acae:	4b24      	ldr	r3, [pc, #144]	; (800ad40 <tcp_receive+0xf20>)
 800acb0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800acb4:	4923      	ldr	r1, [pc, #140]	; (800ad44 <tcp_receive+0xf24>)
 800acb6:	4824      	ldr	r0, [pc, #144]	; (800ad48 <tcp_receive+0xf28>)
 800acb8:	f006 fbbe 	bl	8011438 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800acbc:	e011      	b.n	800ace2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800acc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f47f aea4 	bne.w	800aa14 <tcp_receive+0xbf4>
 800accc:	e00a      	b.n	800ace4 <tcp_receive+0xec4>
                break;
 800acce:	bf00      	nop
 800acd0:	e008      	b.n	800ace4 <tcp_receive+0xec4>
                break;
 800acd2:	bf00      	nop
 800acd4:	e006      	b.n	800ace4 <tcp_receive+0xec4>
                  break;
 800acd6:	bf00      	nop
 800acd8:	e004      	b.n	800ace4 <tcp_receive+0xec4>
                  break;
 800acda:	bf00      	nop
 800acdc:	e002      	b.n	800ace4 <tcp_receive+0xec4>
                  break;
 800acde:	bf00      	nop
 800ace0:	e000      	b.n	800ace4 <tcp_receive+0xec4>
                break;
 800ace2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f001 fa33 	bl	800c150 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800acea:	e003      	b.n	800acf4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f001 fa2f 	bl	800c150 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800acf2:	e01a      	b.n	800ad2a <tcp_receive+0xf0a>
 800acf4:	e019      	b.n	800ad2a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800acf6:	4b0f      	ldr	r3, [pc, #60]	; (800ad34 <tcp_receive+0xf14>)
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	db0a      	blt.n	800ad1a <tcp_receive+0xefa>
 800ad04:	4b0b      	ldr	r3, [pc, #44]	; (800ad34 <tcp_receive+0xf14>)
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0c:	6879      	ldr	r1, [r7, #4]
 800ad0e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad10:	440b      	add	r3, r1
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	3301      	adds	r3, #1
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	dd07      	ble.n	800ad2a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	8b5b      	ldrh	r3, [r3, #26]
 800ad1e:	f043 0302 	orr.w	r3, r3, #2
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ad28:	e7ff      	b.n	800ad2a <tcp_receive+0xf0a>
 800ad2a:	bf00      	nop
 800ad2c:	3750      	adds	r7, #80	; 0x50
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bdb0      	pop	{r4, r5, r7, pc}
 800ad32:	bf00      	nop
 800ad34:	200000f0 	.word	0x200000f0
 800ad38:	200000d0 	.word	0x200000d0
 800ad3c:	200000fa 	.word	0x200000fa
 800ad40:	080136c8 	.word	0x080136c8
 800ad44:	08013a70 	.word	0x08013a70
 800ad48:	08013714 	.word	0x08013714

0800ad4c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ad52:	4b15      	ldr	r3, [pc, #84]	; (800ada8 <tcp_get_next_optbyte+0x5c>)
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	b291      	uxth	r1, r2
 800ad5a:	4a13      	ldr	r2, [pc, #76]	; (800ada8 <tcp_get_next_optbyte+0x5c>)
 800ad5c:	8011      	strh	r1, [r2, #0]
 800ad5e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ad60:	4b12      	ldr	r3, [pc, #72]	; (800adac <tcp_get_next_optbyte+0x60>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d004      	beq.n	800ad72 <tcp_get_next_optbyte+0x26>
 800ad68:	4b11      	ldr	r3, [pc, #68]	; (800adb0 <tcp_get_next_optbyte+0x64>)
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	88fa      	ldrh	r2, [r7, #6]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d208      	bcs.n	800ad84 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ad72:	4b10      	ldr	r3, [pc, #64]	; (800adb4 <tcp_get_next_optbyte+0x68>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	3314      	adds	r3, #20
 800ad78:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ad7a:	88fb      	ldrh	r3, [r7, #6]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	4413      	add	r3, r2
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	e00b      	b.n	800ad9c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ad84:	88fb      	ldrh	r3, [r7, #6]
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	4b09      	ldr	r3, [pc, #36]	; (800adb0 <tcp_get_next_optbyte+0x64>)
 800ad8a:	881b      	ldrh	r3, [r3, #0]
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ad92:	4b06      	ldr	r3, [pc, #24]	; (800adac <tcp_get_next_optbyte+0x60>)
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	797b      	ldrb	r3, [r7, #5]
 800ad98:	4413      	add	r3, r2
 800ad9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	200000ec 	.word	0x200000ec
 800adac:	200000e8 	.word	0x200000e8
 800adb0:	200000e6 	.word	0x200000e6
 800adb4:	200000e0 	.word	0x200000e0

0800adb8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d106      	bne.n	800add4 <tcp_parseopt+0x1c>
 800adc6:	4b32      	ldr	r3, [pc, #200]	; (800ae90 <tcp_parseopt+0xd8>)
 800adc8:	f240 727d 	movw	r2, #1917	; 0x77d
 800adcc:	4931      	ldr	r1, [pc, #196]	; (800ae94 <tcp_parseopt+0xdc>)
 800adce:	4832      	ldr	r0, [pc, #200]	; (800ae98 <tcp_parseopt+0xe0>)
 800add0:	f006 fb32 	bl	8011438 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800add4:	4b31      	ldr	r3, [pc, #196]	; (800ae9c <tcp_parseopt+0xe4>)
 800add6:	881b      	ldrh	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d055      	beq.n	800ae88 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800addc:	4b30      	ldr	r3, [pc, #192]	; (800aea0 <tcp_parseopt+0xe8>)
 800adde:	2200      	movs	r2, #0
 800ade0:	801a      	strh	r2, [r3, #0]
 800ade2:	e045      	b.n	800ae70 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ade4:	f7ff ffb2 	bl	800ad4c <tcp_get_next_optbyte>
 800ade8:	4603      	mov	r3, r0
 800adea:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800adec:	7bfb      	ldrb	r3, [r7, #15]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d006      	beq.n	800ae00 <tcp_parseopt+0x48>
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	dc2b      	bgt.n	800ae4e <tcp_parseopt+0x96>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d041      	beq.n	800ae7e <tcp_parseopt+0xc6>
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d127      	bne.n	800ae4e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800adfe:	e037      	b.n	800ae70 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ae00:	f7ff ffa4 	bl	800ad4c <tcp_get_next_optbyte>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	d13b      	bne.n	800ae82 <tcp_parseopt+0xca>
 800ae0a:	4b25      	ldr	r3, [pc, #148]	; (800aea0 <tcp_parseopt+0xe8>)
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	4a22      	ldr	r2, [pc, #136]	; (800ae9c <tcp_parseopt+0xe4>)
 800ae12:	8812      	ldrh	r2, [r2, #0]
 800ae14:	4293      	cmp	r3, r2
 800ae16:	da34      	bge.n	800ae82 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ae18:	f7ff ff98 	bl	800ad4c <tcp_get_next_optbyte>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	021b      	lsls	r3, r3, #8
 800ae22:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ae24:	f7ff ff92 	bl	800ad4c <tcp_get_next_optbyte>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	89bb      	ldrh	r3, [r7, #12]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ae32:	89bb      	ldrh	r3, [r7, #12]
 800ae34:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ae38:	d804      	bhi.n	800ae44 <tcp_parseopt+0x8c>
 800ae3a:	89bb      	ldrh	r3, [r7, #12]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <tcp_parseopt+0x8c>
 800ae40:	89ba      	ldrh	r2, [r7, #12]
 800ae42:	e001      	b.n	800ae48 <tcp_parseopt+0x90>
 800ae44:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ae4c:	e010      	b.n	800ae70 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ae4e:	f7ff ff7d 	bl	800ad4c <tcp_get_next_optbyte>
 800ae52:	4603      	mov	r3, r0
 800ae54:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ae56:	7afb      	ldrb	r3, [r7, #11]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d914      	bls.n	800ae86 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ae5c:	7afb      	ldrb	r3, [r7, #11]
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	4b0f      	ldr	r3, [pc, #60]	; (800aea0 <tcp_parseopt+0xe8>)
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	4413      	add	r3, r2
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	3b02      	subs	r3, #2
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	4b0c      	ldr	r3, [pc, #48]	; (800aea0 <tcp_parseopt+0xe8>)
 800ae6e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ae70:	4b0b      	ldr	r3, [pc, #44]	; (800aea0 <tcp_parseopt+0xe8>)
 800ae72:	881a      	ldrh	r2, [r3, #0]
 800ae74:	4b09      	ldr	r3, [pc, #36]	; (800ae9c <tcp_parseopt+0xe4>)
 800ae76:	881b      	ldrh	r3, [r3, #0]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d3b3      	bcc.n	800ade4 <tcp_parseopt+0x2c>
 800ae7c:	e004      	b.n	800ae88 <tcp_parseopt+0xd0>
          return;
 800ae7e:	bf00      	nop
 800ae80:	e002      	b.n	800ae88 <tcp_parseopt+0xd0>
            return;
 800ae82:	bf00      	nop
 800ae84:	e000      	b.n	800ae88 <tcp_parseopt+0xd0>
            return;
 800ae86:	bf00      	nop
      }
    }
  }
}
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	080136c8 	.word	0x080136c8
 800ae94:	08013b2c 	.word	0x08013b2c
 800ae98:	08013714 	.word	0x08013714
 800ae9c:	200000e4 	.word	0x200000e4
 800aea0:	200000ec 	.word	0x200000ec

0800aea4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800aea4:	b480      	push	{r7}
 800aea6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800aea8:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <tcp_trigger_input_pcb_close+0x1c>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	f043 0310 	orr.w	r3, r3, #16
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	4b03      	ldr	r3, [pc, #12]	; (800aec0 <tcp_trigger_input_pcb_close+0x1c>)
 800aeb4:	701a      	strb	r2, [r3, #0]
}
 800aeb6:	bf00      	nop
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	200000fd 	.word	0x200000fd

0800aec4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00a      	beq.n	800aeec <tcp_route+0x28>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	7a1b      	ldrb	r3, [r3, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d006      	beq.n	800aeec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	7a1b      	ldrb	r3, [r3, #8]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fb fb4e 	bl	8006584 <netif_get_by_index>
 800aee8:	4603      	mov	r3, r0
 800aeea:	e003      	b.n	800aef4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f005 f857 	bl	800ffa0 <ip4_route>
 800aef2:	4603      	mov	r3, r0
  }
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800aefc:	b590      	push	{r4, r7, lr}
 800aefe:	b087      	sub	sp, #28
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	603b      	str	r3, [r7, #0]
 800af08:	4613      	mov	r3, r2
 800af0a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d105      	bne.n	800af1e <tcp_create_segment+0x22>
 800af12:	4b44      	ldr	r3, [pc, #272]	; (800b024 <tcp_create_segment+0x128>)
 800af14:	22a3      	movs	r2, #163	; 0xa3
 800af16:	4944      	ldr	r1, [pc, #272]	; (800b028 <tcp_create_segment+0x12c>)
 800af18:	4844      	ldr	r0, [pc, #272]	; (800b02c <tcp_create_segment+0x130>)
 800af1a:	f006 fa8d 	bl	8011438 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d105      	bne.n	800af30 <tcp_create_segment+0x34>
 800af24:	4b3f      	ldr	r3, [pc, #252]	; (800b024 <tcp_create_segment+0x128>)
 800af26:	22a4      	movs	r2, #164	; 0xa4
 800af28:	4941      	ldr	r1, [pc, #260]	; (800b030 <tcp_create_segment+0x134>)
 800af2a:	4840      	ldr	r0, [pc, #256]	; (800b02c <tcp_create_segment+0x130>)
 800af2c:	f006 fa84 	bl	8011438 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800af30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	b2db      	uxtb	r3, r3
 800af38:	f003 0304 	and.w	r3, r3, #4
 800af3c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800af3e:	2003      	movs	r0, #3
 800af40:	f7fb f81a 	bl	8005f78 <memp_malloc>
 800af44:	6138      	str	r0, [r7, #16]
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d104      	bne.n	800af56 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800af4c:	68b8      	ldr	r0, [r7, #8]
 800af4e:	f7fb fe79 	bl	8006c44 <pbuf_free>
    return NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	e061      	b.n	800b01a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800af5c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	2200      	movs	r2, #0
 800af62:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	891a      	ldrh	r2, [r3, #8]
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
 800af70:	b29b      	uxth	r3, r3
 800af72:	429a      	cmp	r2, r3
 800af74:	d205      	bcs.n	800af82 <tcp_create_segment+0x86>
 800af76:	4b2b      	ldr	r3, [pc, #172]	; (800b024 <tcp_create_segment+0x128>)
 800af78:	22b0      	movs	r2, #176	; 0xb0
 800af7a:	492e      	ldr	r1, [pc, #184]	; (800b034 <tcp_create_segment+0x138>)
 800af7c:	482b      	ldr	r0, [pc, #172]	; (800b02c <tcp_create_segment+0x130>)
 800af7e:	f006 fa5b 	bl	8011438 <iprintf>
  seg->len = p->tot_len - optlen;
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	891a      	ldrh	r2, [r3, #8]
 800af86:	7dfb      	ldrb	r3, [r7, #23]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800af92:	2114      	movs	r1, #20
 800af94:	68b8      	ldr	r0, [r7, #8]
 800af96:	f7fb fdbf 	bl	8006b18 <pbuf_add_header>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d004      	beq.n	800afaa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800afa0:	6938      	ldr	r0, [r7, #16]
 800afa2:	f7fd f8d2 	bl	800814a <tcp_seg_free>
    return NULL;
 800afa6:	2300      	movs	r3, #0
 800afa8:	e037      	b.n	800b01a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	685a      	ldr	r2, [r3, #4]
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	8ada      	ldrh	r2, [r3, #22]
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	68dc      	ldr	r4, [r3, #12]
 800afbc:	4610      	mov	r0, r2
 800afbe:	f7fa fb85 	bl	80056cc <lwip_htons>
 800afc2:	4603      	mov	r3, r0
 800afc4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	8b1a      	ldrh	r2, [r3, #24]
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	68dc      	ldr	r4, [r3, #12]
 800afce:	4610      	mov	r0, r2
 800afd0:	f7fa fb7c 	bl	80056cc <lwip_htons>
 800afd4:	4603      	mov	r3, r0
 800afd6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	68dc      	ldr	r4, [r3, #12]
 800afdc:	6838      	ldr	r0, [r7, #0]
 800afde:	f7fa fb8a 	bl	80056f6 <lwip_htonl>
 800afe2:	4603      	mov	r3, r0
 800afe4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
 800afe8:	089b      	lsrs	r3, r3, #2
 800afea:	b2db      	uxtb	r3, r3
 800afec:	b29b      	uxth	r3, r3
 800afee:	3305      	adds	r3, #5
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	031b      	lsls	r3, r3, #12
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	79fb      	ldrb	r3, [r7, #7]
 800aff8:	b29b      	uxth	r3, r3
 800affa:	4313      	orrs	r3, r2
 800affc:	b29a      	uxth	r2, r3
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	68dc      	ldr	r4, [r3, #12]
 800b002:	4610      	mov	r0, r2
 800b004:	f7fa fb62 	bl	80056cc <lwip_htons>
 800b008:	4603      	mov	r3, r0
 800b00a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	749a      	strb	r2, [r3, #18]
 800b014:	2200      	movs	r2, #0
 800b016:	74da      	strb	r2, [r3, #19]
  return seg;
 800b018:	693b      	ldr	r3, [r7, #16]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	371c      	adds	r7, #28
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd90      	pop	{r4, r7, pc}
 800b022:	bf00      	nop
 800b024:	08013b48 	.word	0x08013b48
 800b028:	08013b7c 	.word	0x08013b7c
 800b02c:	08013b9c 	.word	0x08013b9c
 800b030:	08013bc4 	.word	0x08013bc4
 800b034:	08013be8 	.word	0x08013be8

0800b038 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b038:	b590      	push	{r4, r7, lr}
 800b03a:	b08b      	sub	sp, #44	; 0x2c
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b044:	2300      	movs	r3, #0
 800b046:	61fb      	str	r3, [r7, #28]
 800b048:	2300      	movs	r3, #0
 800b04a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b04c:	2300      	movs	r3, #0
 800b04e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d106      	bne.n	800b064 <tcp_split_unsent_seg+0x2c>
 800b056:	4b95      	ldr	r3, [pc, #596]	; (800b2ac <tcp_split_unsent_seg+0x274>)
 800b058:	f240 324b 	movw	r2, #843	; 0x34b
 800b05c:	4994      	ldr	r1, [pc, #592]	; (800b2b0 <tcp_split_unsent_seg+0x278>)
 800b05e:	4895      	ldr	r0, [pc, #596]	; (800b2b4 <tcp_split_unsent_seg+0x27c>)
 800b060:	f006 f9ea 	bl	8011438 <iprintf>

  useg = pcb->unsent;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b068:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d102      	bne.n	800b076 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b070:	f04f 33ff 	mov.w	r3, #4294967295
 800b074:	e116      	b.n	800b2a4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b076:	887b      	ldrh	r3, [r7, #2]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d109      	bne.n	800b090 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b07c:	4b8b      	ldr	r3, [pc, #556]	; (800b2ac <tcp_split_unsent_seg+0x274>)
 800b07e:	f240 3253 	movw	r2, #851	; 0x353
 800b082:	498d      	ldr	r1, [pc, #564]	; (800b2b8 <tcp_split_unsent_seg+0x280>)
 800b084:	488b      	ldr	r0, [pc, #556]	; (800b2b4 <tcp_split_unsent_seg+0x27c>)
 800b086:	f006 f9d7 	bl	8011438 <iprintf>
    return ERR_VAL;
 800b08a:	f06f 0305 	mvn.w	r3, #5
 800b08e:	e109      	b.n	800b2a4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	891b      	ldrh	r3, [r3, #8]
 800b094:	887a      	ldrh	r2, [r7, #2]
 800b096:	429a      	cmp	r2, r3
 800b098:	d301      	bcc.n	800b09e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	e102      	b.n	800b2a4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b0a2:	887a      	ldrh	r2, [r7, #2]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d906      	bls.n	800b0b6 <tcp_split_unsent_seg+0x7e>
 800b0a8:	4b80      	ldr	r3, [pc, #512]	; (800b2ac <tcp_split_unsent_seg+0x274>)
 800b0aa:	f240 325b 	movw	r2, #859	; 0x35b
 800b0ae:	4983      	ldr	r1, [pc, #524]	; (800b2bc <tcp_split_unsent_seg+0x284>)
 800b0b0:	4880      	ldr	r0, [pc, #512]	; (800b2b4 <tcp_split_unsent_seg+0x27c>)
 800b0b2:	f006 f9c1 	bl	8011438 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	891b      	ldrh	r3, [r3, #8]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d106      	bne.n	800b0cc <tcp_split_unsent_seg+0x94>
 800b0be:	4b7b      	ldr	r3, [pc, #492]	; (800b2ac <tcp_split_unsent_seg+0x274>)
 800b0c0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b0c4:	497e      	ldr	r1, [pc, #504]	; (800b2c0 <tcp_split_unsent_seg+0x288>)
 800b0c6:	487b      	ldr	r0, [pc, #492]	; (800b2b4 <tcp_split_unsent_seg+0x27c>)
 800b0c8:	f006 f9b6 	bl	8011438 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	7a9b      	ldrb	r3, [r3, #10]
 800b0d0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	f003 0304 	and.w	r3, r3, #4
 800b0dc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	891a      	ldrh	r2, [r3, #8]
 800b0e2:	887b      	ldrh	r3, [r7, #2]
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	89bb      	ldrh	r3, [r7, #12]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	2036      	movs	r0, #54	; 0x36
 800b0fa:	f7fb fabf 	bl	800667c <pbuf_alloc>
 800b0fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 80b7 	beq.w	800b276 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	891a      	ldrh	r2, [r3, #8]
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	891b      	ldrh	r3, [r3, #8]
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	b29a      	uxth	r2, r3
 800b116:	887b      	ldrh	r3, [r7, #2]
 800b118:	4413      	add	r3, r2
 800b11a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	6858      	ldr	r0, [r3, #4]
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	7bbb      	ldrb	r3, [r7, #14]
 800b126:	18d1      	adds	r1, r2, r3
 800b128:	897b      	ldrh	r3, [r7, #10]
 800b12a:	89ba      	ldrh	r2, [r7, #12]
 800b12c:	f7fb ff84 	bl	8007038 <pbuf_copy_partial>
 800b130:	4603      	mov	r3, r0
 800b132:	461a      	mov	r2, r3
 800b134:	89bb      	ldrh	r3, [r7, #12]
 800b136:	4293      	cmp	r3, r2
 800b138:	f040 809f 	bne.w	800b27a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	899b      	ldrh	r3, [r3, #12]
 800b142:	b29b      	uxth	r3, r3
 800b144:	4618      	mov	r0, r3
 800b146:	f7fa fac1 	bl	80056cc <lwip_htons>
 800b14a:	4603      	mov	r3, r0
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b152:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b154:	2300      	movs	r3, #0
 800b156:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b158:	7efb      	ldrb	r3, [r7, #27]
 800b15a:	f003 0308 	and.w	r3, r3, #8
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d007      	beq.n	800b172 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b162:	7efb      	ldrb	r3, [r7, #27]
 800b164:	f023 0308 	bic.w	r3, r3, #8
 800b168:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b16a:	7ebb      	ldrb	r3, [r7, #26]
 800b16c:	f043 0308 	orr.w	r3, r3, #8
 800b170:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b172:	7efb      	ldrb	r3, [r7, #27]
 800b174:	f003 0301 	and.w	r3, r3, #1
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d007      	beq.n	800b18c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b17c:	7efb      	ldrb	r3, [r7, #27]
 800b17e:	f023 0301 	bic.w	r3, r3, #1
 800b182:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b184:	7ebb      	ldrb	r3, [r7, #26]
 800b186:	f043 0301 	orr.w	r3, r3, #1
 800b18a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	4618      	mov	r0, r3
 800b194:	f7fa faaf 	bl	80056f6 <lwip_htonl>
 800b198:	4602      	mov	r2, r0
 800b19a:	887b      	ldrh	r3, [r7, #2]
 800b19c:	18d1      	adds	r1, r2, r3
 800b19e:	7eba      	ldrb	r2, [r7, #26]
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	6939      	ldr	r1, [r7, #16]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f7ff fea7 	bl	800aefc <tcp_create_segment>
 800b1ae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d063      	beq.n	800b27e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fb fdca 	bl	8006d54 <pbuf_clen>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1ca:	1a9b      	subs	r3, r3, r2
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	6858      	ldr	r0, [r3, #4]
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	891a      	ldrh	r2, [r3, #8]
 800b1de:	89bb      	ldrh	r3, [r7, #12]
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	f7fb fba7 	bl	8006938 <pbuf_realloc>
  useg->len -= remainder;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	891a      	ldrh	r2, [r3, #8]
 800b1ee:	89bb      	ldrh	r3, [r7, #12]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	899b      	ldrh	r3, [r3, #12]
 800b1fe:	b29c      	uxth	r4, r3
 800b200:	7efb      	ldrb	r3, [r7, #27]
 800b202:	b29b      	uxth	r3, r3
 800b204:	4618      	mov	r0, r3
 800b206:	f7fa fa61 	bl	80056cc <lwip_htons>
 800b20a:	4603      	mov	r3, r0
 800b20c:	461a      	mov	r2, r3
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	4322      	orrs	r2, r4
 800b214:	b292      	uxth	r2, r2
 800b216:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fb fd99 	bl	8006d54 <pbuf_clen>
 800b222:	4603      	mov	r3, r0
 800b224:	461a      	mov	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b22c:	4413      	add	r3, r2
 800b22e:	b29a      	uxth	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7fb fd8a 	bl	8006d54 <pbuf_clen>
 800b240:	4603      	mov	r3, r0
 800b242:	461a      	mov	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b24a:	4413      	add	r3, r2
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	69fa      	ldr	r2, [r7, #28]
 800b260:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d103      	bne.n	800b272 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	e016      	b.n	800b2a4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b276:	bf00      	nop
 800b278:	e002      	b.n	800b280 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b27a:	bf00      	nop
 800b27c:	e000      	b.n	800b280 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b27e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d006      	beq.n	800b294 <tcp_split_unsent_seg+0x25c>
 800b286:	4b09      	ldr	r3, [pc, #36]	; (800b2ac <tcp_split_unsent_seg+0x274>)
 800b288:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b28c:	490d      	ldr	r1, [pc, #52]	; (800b2c4 <tcp_split_unsent_seg+0x28c>)
 800b28e:	4809      	ldr	r0, [pc, #36]	; (800b2b4 <tcp_split_unsent_seg+0x27c>)
 800b290:	f006 f8d2 	bl	8011438 <iprintf>
  if (p != NULL) {
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d002      	beq.n	800b2a0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b29a:	6938      	ldr	r0, [r7, #16]
 800b29c:	f7fb fcd2 	bl	8006c44 <pbuf_free>
  }

  return ERR_MEM;
 800b2a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3724      	adds	r7, #36	; 0x24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd90      	pop	{r4, r7, pc}
 800b2ac:	08013b48 	.word	0x08013b48
 800b2b0:	08013edc 	.word	0x08013edc
 800b2b4:	08013b9c 	.word	0x08013b9c
 800b2b8:	08013f00 	.word	0x08013f00
 800b2bc:	08013f24 	.word	0x08013f24
 800b2c0:	08013f34 	.word	0x08013f34
 800b2c4:	08013f44 	.word	0x08013f44

0800b2c8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b2c8:	b590      	push	{r4, r7, lr}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d106      	bne.n	800b2e4 <tcp_send_fin+0x1c>
 800b2d6:	4b21      	ldr	r3, [pc, #132]	; (800b35c <tcp_send_fin+0x94>)
 800b2d8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b2dc:	4920      	ldr	r1, [pc, #128]	; (800b360 <tcp_send_fin+0x98>)
 800b2de:	4821      	ldr	r0, [pc, #132]	; (800b364 <tcp_send_fin+0x9c>)
 800b2e0:	f006 f8aa 	bl	8011438 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d02e      	beq.n	800b34a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2f0:	60fb      	str	r3, [r7, #12]
 800b2f2:	e002      	b.n	800b2fa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1f8      	bne.n	800b2f4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	899b      	ldrh	r3, [r3, #12]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fa f9de 	bl	80056cc <lwip_htons>
 800b310:	4603      	mov	r3, r0
 800b312:	b2db      	uxtb	r3, r3
 800b314:	f003 0307 	and.w	r3, r3, #7
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d116      	bne.n	800b34a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	899b      	ldrh	r3, [r3, #12]
 800b322:	b29c      	uxth	r4, r3
 800b324:	2001      	movs	r0, #1
 800b326:	f7fa f9d1 	bl	80056cc <lwip_htons>
 800b32a:	4603      	mov	r3, r0
 800b32c:	461a      	mov	r2, r3
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	4322      	orrs	r2, r4
 800b334:	b292      	uxth	r2, r2
 800b336:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	8b5b      	ldrh	r3, [r3, #26]
 800b33c:	f043 0320 	orr.w	r3, r3, #32
 800b340:	b29a      	uxth	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	e004      	b.n	800b354 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b34a:	2101      	movs	r1, #1
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f80b 	bl	800b368 <tcp_enqueue_flags>
 800b352:	4603      	mov	r3, r0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd90      	pop	{r4, r7, pc}
 800b35c:	08013b48 	.word	0x08013b48
 800b360:	08013f50 	.word	0x08013f50
 800b364:	08013b9c 	.word	0x08013b9c

0800b368 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08a      	sub	sp, #40	; 0x28
 800b36c:	af02      	add	r7, sp, #8
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b378:	2300      	movs	r3, #0
 800b37a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b37c:	78fb      	ldrb	r3, [r7, #3]
 800b37e:	f003 0303 	and.w	r3, r3, #3
 800b382:	2b00      	cmp	r3, #0
 800b384:	d106      	bne.n	800b394 <tcp_enqueue_flags+0x2c>
 800b386:	4b67      	ldr	r3, [pc, #412]	; (800b524 <tcp_enqueue_flags+0x1bc>)
 800b388:	f240 4211 	movw	r2, #1041	; 0x411
 800b38c:	4966      	ldr	r1, [pc, #408]	; (800b528 <tcp_enqueue_flags+0x1c0>)
 800b38e:	4867      	ldr	r0, [pc, #412]	; (800b52c <tcp_enqueue_flags+0x1c4>)
 800b390:	f006 f852 	bl	8011438 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d106      	bne.n	800b3a8 <tcp_enqueue_flags+0x40>
 800b39a:	4b62      	ldr	r3, [pc, #392]	; (800b524 <tcp_enqueue_flags+0x1bc>)
 800b39c:	f240 4213 	movw	r2, #1043	; 0x413
 800b3a0:	4963      	ldr	r1, [pc, #396]	; (800b530 <tcp_enqueue_flags+0x1c8>)
 800b3a2:	4862      	ldr	r0, [pc, #392]	; (800b52c <tcp_enqueue_flags+0x1c4>)
 800b3a4:	f006 f848 	bl	8011438 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b3a8:	78fb      	ldrb	r3, [r7, #3]
 800b3aa:	f003 0302 	and.w	r3, r3, #2
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b3b6:	7ffb      	ldrb	r3, [r7, #31]
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	f003 0304 	and.w	r3, r3, #4
 800b3c0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b3c2:	7dfb      	ldrb	r3, [r7, #23]
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	2036      	movs	r0, #54	; 0x36
 800b3ce:	f7fb f955 	bl	800667c <pbuf_alloc>
 800b3d2:	6138      	str	r0, [r7, #16]
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d109      	bne.n	800b3ee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	8b5b      	ldrh	r3, [r3, #26]
 800b3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ec:	e095      	b.n	800b51a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	895a      	ldrh	r2, [r3, #10]
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d206      	bcs.n	800b408 <tcp_enqueue_flags+0xa0>
 800b3fa:	4b4a      	ldr	r3, [pc, #296]	; (800b524 <tcp_enqueue_flags+0x1bc>)
 800b3fc:	f240 4239 	movw	r2, #1081	; 0x439
 800b400:	494c      	ldr	r1, [pc, #304]	; (800b534 <tcp_enqueue_flags+0x1cc>)
 800b402:	484a      	ldr	r0, [pc, #296]	; (800b52c <tcp_enqueue_flags+0x1c4>)
 800b404:	f006 f818 	bl	8011438 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b40c:	78fa      	ldrb	r2, [r7, #3]
 800b40e:	7ffb      	ldrb	r3, [r7, #31]
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	460b      	mov	r3, r1
 800b414:	6939      	ldr	r1, [r7, #16]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7ff fd70 	bl	800aefc <tcp_create_segment>
 800b41c:	60f8      	str	r0, [r7, #12]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d109      	bne.n	800b438 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	8b5b      	ldrh	r3, [r3, #26]
 800b428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b432:	f04f 33ff 	mov.w	r3, #4294967295
 800b436:	e070      	b.n	800b51a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	f003 0303 	and.w	r3, r3, #3
 800b440:	2b00      	cmp	r3, #0
 800b442:	d006      	beq.n	800b452 <tcp_enqueue_flags+0xea>
 800b444:	4b37      	ldr	r3, [pc, #220]	; (800b524 <tcp_enqueue_flags+0x1bc>)
 800b446:	f240 4242 	movw	r2, #1090	; 0x442
 800b44a:	493b      	ldr	r1, [pc, #236]	; (800b538 <tcp_enqueue_flags+0x1d0>)
 800b44c:	4837      	ldr	r0, [pc, #220]	; (800b52c <tcp_enqueue_flags+0x1c4>)
 800b44e:	f005 fff3 	bl	8011438 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	891b      	ldrh	r3, [r3, #8]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d006      	beq.n	800b468 <tcp_enqueue_flags+0x100>
 800b45a:	4b32      	ldr	r3, [pc, #200]	; (800b524 <tcp_enqueue_flags+0x1bc>)
 800b45c:	f240 4243 	movw	r2, #1091	; 0x443
 800b460:	4936      	ldr	r1, [pc, #216]	; (800b53c <tcp_enqueue_flags+0x1d4>)
 800b462:	4832      	ldr	r0, [pc, #200]	; (800b52c <tcp_enqueue_flags+0x1c4>)
 800b464:	f005 ffe8 	bl	8011438 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d103      	bne.n	800b478 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	66da      	str	r2, [r3, #108]	; 0x6c
 800b476:	e00d      	b.n	800b494 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b47c:	61bb      	str	r3, [r7, #24]
 800b47e:	e002      	b.n	800b486 <tcp_enqueue_flags+0x11e>
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	61bb      	str	r3, [r7, #24]
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1f8      	bne.n	800b480 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b49c:	78fb      	ldrb	r3, [r7, #3]
 800b49e:	f003 0302 	and.w	r3, r3, #2
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d104      	bne.n	800b4b0 <tcp_enqueue_flags+0x148>
 800b4a6:	78fb      	ldrb	r3, [r7, #3]
 800b4a8:	f003 0301 	and.w	r3, r3, #1
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d004      	beq.n	800b4ba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4b4:	1c5a      	adds	r2, r3, #1
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b4ba:	78fb      	ldrb	r3, [r7, #3]
 800b4bc:	f003 0301 	and.w	r3, r3, #1
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d006      	beq.n	800b4d2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8b5b      	ldrh	r3, [r3, #26]
 800b4c8:	f043 0320 	orr.w	r3, r3, #32
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fb fc3c 	bl	8006d54 <pbuf_clen>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	461a      	mov	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b4e6:	4413      	add	r3, r2
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00e      	beq.n	800b518 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10a      	bne.n	800b518 <tcp_enqueue_flags+0x1b0>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b506:	2b00      	cmp	r3, #0
 800b508:	d106      	bne.n	800b518 <tcp_enqueue_flags+0x1b0>
 800b50a:	4b06      	ldr	r3, [pc, #24]	; (800b524 <tcp_enqueue_flags+0x1bc>)
 800b50c:	f240 4265 	movw	r2, #1125	; 0x465
 800b510:	490b      	ldr	r1, [pc, #44]	; (800b540 <tcp_enqueue_flags+0x1d8>)
 800b512:	4806      	ldr	r0, [pc, #24]	; (800b52c <tcp_enqueue_flags+0x1c4>)
 800b514:	f005 ff90 	bl	8011438 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3720      	adds	r7, #32
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	08013b48 	.word	0x08013b48
 800b528:	08013f6c 	.word	0x08013f6c
 800b52c:	08013b9c 	.word	0x08013b9c
 800b530:	08013fc4 	.word	0x08013fc4
 800b534:	08013fe4 	.word	0x08013fe4
 800b538:	08014020 	.word	0x08014020
 800b53c:	08014038 	.word	0x08014038
 800b540:	08014064 	.word	0x08014064

0800b544 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b544:	b5b0      	push	{r4, r5, r7, lr}
 800b546:	b08a      	sub	sp, #40	; 0x28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d106      	bne.n	800b560 <tcp_output+0x1c>
 800b552:	4b9e      	ldr	r3, [pc, #632]	; (800b7cc <tcp_output+0x288>)
 800b554:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b558:	499d      	ldr	r1, [pc, #628]	; (800b7d0 <tcp_output+0x28c>)
 800b55a:	489e      	ldr	r0, [pc, #632]	; (800b7d4 <tcp_output+0x290>)
 800b55c:	f005 ff6c 	bl	8011438 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	7d1b      	ldrb	r3, [r3, #20]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d106      	bne.n	800b576 <tcp_output+0x32>
 800b568:	4b98      	ldr	r3, [pc, #608]	; (800b7cc <tcp_output+0x288>)
 800b56a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b56e:	499a      	ldr	r1, [pc, #616]	; (800b7d8 <tcp_output+0x294>)
 800b570:	4898      	ldr	r0, [pc, #608]	; (800b7d4 <tcp_output+0x290>)
 800b572:	f005 ff61 	bl	8011438 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b576:	4b99      	ldr	r3, [pc, #612]	; (800b7dc <tcp_output+0x298>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d101      	bne.n	800b584 <tcp_output+0x40>
    return ERR_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	e1ce      	b.n	800b922 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b590:	4293      	cmp	r3, r2
 800b592:	bf28      	it	cs
 800b594:	4613      	movcs	r3, r2
 800b596:	b29b      	uxth	r3, r3
 800b598:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b59e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10b      	bne.n	800b5be <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	8b5b      	ldrh	r3, [r3, #26]
 800b5aa:	f003 0302 	and.w	r3, r3, #2
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f000 81aa 	beq.w	800b908 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fdcb 	bl	800c150 <tcp_send_empty_ack>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	e1b1      	b.n	800b922 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b5be:	6879      	ldr	r1, [r7, #4]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7ff fc7c 	bl	800aec4 <tcp_route>
 800b5cc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <tcp_output+0x96>
    return ERR_RTE;
 800b5d4:	f06f 0303 	mvn.w	r3, #3
 800b5d8:	e1a3      	b.n	800b922 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d003      	beq.n	800b5e8 <tcp_output+0xa4>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d111      	bne.n	800b60c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <tcp_output+0xb0>
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	e000      	b.n	800b5f6 <tcp_output+0xb2>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d102      	bne.n	800b604 <tcp_output+0xc0>
      return ERR_RTE;
 800b5fe:	f06f 0303 	mvn.w	r3, #3
 800b602:	e18e      	b.n	800b922 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	4618      	mov	r0, r3
 800b614:	f7fa f86f 	bl	80056f6 <lwip_htonl>
 800b618:	4602      	mov	r2, r0
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b622:	8912      	ldrh	r2, [r2, #8]
 800b624:	4413      	add	r3, r2
 800b626:	69ba      	ldr	r2, [r7, #24]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d227      	bcs.n	800b67c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b632:	461a      	mov	r2, r3
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	4293      	cmp	r3, r2
 800b638:	d114      	bne.n	800b664 <tcp_output+0x120>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d110      	bne.n	800b664 <tcp_output+0x120>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10b      	bne.n	800b664 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	8b5b      	ldrh	r3, [r3, #26]
 800b668:	f003 0302 	and.w	r3, r3, #2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f000 814d 	beq.w	800b90c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 fd6c 	bl	800c150 <tcp_send_empty_ack>
 800b678:	4603      	mov	r3, r0
 800b67a:	e152      	b.n	800b922 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b688:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b68a:	6a3b      	ldr	r3, [r7, #32]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f000 811c 	beq.w	800b8ca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b692:	e002      	b.n	800b69a <tcp_output+0x156>
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	623b      	str	r3, [r7, #32]
 800b69a:	6a3b      	ldr	r3, [r7, #32]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1f8      	bne.n	800b694 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b6a2:	e112      	b.n	800b8ca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	899b      	ldrh	r3, [r3, #12]
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fa f80d 	bl	80056cc <lwip_htons>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	f003 0304 	and.w	r3, r3, #4
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d006      	beq.n	800b6cc <tcp_output+0x188>
 800b6be:	4b43      	ldr	r3, [pc, #268]	; (800b7cc <tcp_output+0x288>)
 800b6c0:	f240 5236 	movw	r2, #1334	; 0x536
 800b6c4:	4946      	ldr	r1, [pc, #280]	; (800b7e0 <tcp_output+0x29c>)
 800b6c6:	4843      	ldr	r0, [pc, #268]	; (800b7d4 <tcp_output+0x290>)
 800b6c8:	f005 feb6 	bl	8011438 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d01f      	beq.n	800b714 <tcp_output+0x1d0>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	8b5b      	ldrh	r3, [r3, #26]
 800b6d8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d119      	bne.n	800b714 <tcp_output+0x1d0>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00b      	beq.n	800b700 <tcp_output+0x1bc>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d110      	bne.n	800b714 <tcp_output+0x1d0>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6f6:	891a      	ldrh	r2, [r3, #8]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d209      	bcs.n	800b714 <tcp_output+0x1d0>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b706:	2b00      	cmp	r3, #0
 800b708:	d004      	beq.n	800b714 <tcp_output+0x1d0>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b710:	2b08      	cmp	r3, #8
 800b712:	d901      	bls.n	800b718 <tcp_output+0x1d4>
 800b714:	2301      	movs	r3, #1
 800b716:	e000      	b.n	800b71a <tcp_output+0x1d6>
 800b718:	2300      	movs	r3, #0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d106      	bne.n	800b72c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	8b5b      	ldrh	r3, [r3, #26]
 800b722:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b726:	2b00      	cmp	r3, #0
 800b728:	f000 80e4 	beq.w	800b8f4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	7d1b      	ldrb	r3, [r3, #20]
 800b730:	2b02      	cmp	r3, #2
 800b732:	d00d      	beq.n	800b750 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	899b      	ldrh	r3, [r3, #12]
 800b73a:	b29c      	uxth	r4, r3
 800b73c:	2010      	movs	r0, #16
 800b73e:	f7f9 ffc5 	bl	80056cc <lwip_htons>
 800b742:	4603      	mov	r3, r0
 800b744:	461a      	mov	r2, r3
 800b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	4322      	orrs	r2, r4
 800b74c:	b292      	uxth	r2, r2
 800b74e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b750:	697a      	ldr	r2, [r7, #20]
 800b752:	6879      	ldr	r1, [r7, #4]
 800b754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b756:	f000 f909 	bl	800b96c <tcp_output_segment>
 800b75a:	4603      	mov	r3, r0
 800b75c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d009      	beq.n	800b77a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	8b5b      	ldrh	r3, [r3, #26]
 800b76a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b76e:	b29a      	uxth	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	835a      	strh	r2, [r3, #26]
      return err;
 800b774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b778:	e0d3      	b.n	800b922 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	7d1b      	ldrb	r3, [r3, #20]
 800b786:	2b02      	cmp	r3, #2
 800b788:	d006      	beq.n	800b798 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	8b5b      	ldrh	r3, [r3, #26]
 800b78e:	f023 0303 	bic.w	r3, r3, #3
 800b792:	b29a      	uxth	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7f9 ffa9 	bl	80056f6 <lwip_htonl>
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	891b      	ldrh	r3, [r3, #8]
 800b7aa:	461d      	mov	r5, r3
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	899b      	ldrh	r3, [r3, #12]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7f9 ff89 	bl	80056cc <lwip_htons>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	f003 0303 	and.w	r3, r3, #3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00e      	beq.n	800b7e4 <tcp_output+0x2a0>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e00d      	b.n	800b7e6 <tcp_output+0x2a2>
 800b7ca:	bf00      	nop
 800b7cc:	08013b48 	.word	0x08013b48
 800b7d0:	0801408c 	.word	0x0801408c
 800b7d4:	08013b9c 	.word	0x08013b9c
 800b7d8:	080140a4 	.word	0x080140a4
 800b7dc:	20006e04 	.word	0x20006e04
 800b7e0:	080140cc 	.word	0x080140cc
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	442b      	add	r3, r5
 800b7e8:	4423      	add	r3, r4
 800b7ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	da02      	bge.n	800b7fe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b800:	891b      	ldrh	r3, [r3, #8]
 800b802:	461c      	mov	r4, r3
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	899b      	ldrh	r3, [r3, #12]
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7f9 ff5d 	bl	80056cc <lwip_htons>
 800b812:	4603      	mov	r3, r0
 800b814:	b2db      	uxtb	r3, r3
 800b816:	f003 0303 	and.w	r3, r3, #3
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d001      	beq.n	800b822 <tcp_output+0x2de>
 800b81e:	2301      	movs	r3, #1
 800b820:	e000      	b.n	800b824 <tcp_output+0x2e0>
 800b822:	2300      	movs	r3, #0
 800b824:	4423      	add	r3, r4
 800b826:	2b00      	cmp	r3, #0
 800b828:	d049      	beq.n	800b8be <tcp_output+0x37a>
      seg->next = NULL;
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b834:	2b00      	cmp	r3, #0
 800b836:	d105      	bne.n	800b844 <tcp_output+0x300>
        pcb->unacked = seg;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b83c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	623b      	str	r3, [r7, #32]
 800b842:	e03f      	b.n	800b8c4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7f9 ff53 	bl	80056f6 <lwip_htonl>
 800b850:	4604      	mov	r4, r0
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	4618      	mov	r0, r3
 800b85a:	f7f9 ff4c 	bl	80056f6 <lwip_htonl>
 800b85e:	4603      	mov	r3, r0
 800b860:	1ae3      	subs	r3, r4, r3
 800b862:	2b00      	cmp	r3, #0
 800b864:	da24      	bge.n	800b8b0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	3370      	adds	r3, #112	; 0x70
 800b86a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b86c:	e002      	b.n	800b874 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d011      	beq.n	800b8a0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	4618      	mov	r0, r3
 800b886:	f7f9 ff36 	bl	80056f6 <lwip_htonl>
 800b88a:	4604      	mov	r4, r0
 800b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	4618      	mov	r0, r3
 800b894:	f7f9 ff2f 	bl	80056f6 <lwip_htonl>
 800b898:	4603      	mov	r3, r0
 800b89a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	dbe6      	blt.n	800b86e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ac:	601a      	str	r2, [r3, #0]
 800b8ae:	e009      	b.n	800b8c4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	623b      	str	r3, [r7, #32]
 800b8bc:	e002      	b.n	800b8c4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b8be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8c0:	f7fc fc43 	bl	800814a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d012      	beq.n	800b8f6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f9 ff0d 	bl	80056f6 <lwip_htonl>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e2:	1ad3      	subs	r3, r2, r3
 800b8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e6:	8912      	ldrh	r2, [r2, #8]
 800b8e8:	4413      	add	r3, r2
  while (seg != NULL &&
 800b8ea:	69ba      	ldr	r2, [r7, #24]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	f4bf aed9 	bcs.w	800b6a4 <tcp_output+0x160>
 800b8f2:	e000      	b.n	800b8f6 <tcp_output+0x3b2>
      break;
 800b8f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d108      	bne.n	800b910 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b906:	e004      	b.n	800b912 <tcp_output+0x3ce>
    goto output_done;
 800b908:	bf00      	nop
 800b90a:	e002      	b.n	800b912 <tcp_output+0x3ce>
    goto output_done;
 800b90c:	bf00      	nop
 800b90e:	e000      	b.n	800b912 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b910:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	8b5b      	ldrh	r3, [r3, #26]
 800b916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	3728      	adds	r7, #40	; 0x28
 800b926:	46bd      	mov	sp, r7
 800b928:	bdb0      	pop	{r4, r5, r7, pc}
 800b92a:	bf00      	nop

0800b92c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d106      	bne.n	800b948 <tcp_output_segment_busy+0x1c>
 800b93a:	4b09      	ldr	r3, [pc, #36]	; (800b960 <tcp_output_segment_busy+0x34>)
 800b93c:	f240 529a 	movw	r2, #1434	; 0x59a
 800b940:	4908      	ldr	r1, [pc, #32]	; (800b964 <tcp_output_segment_busy+0x38>)
 800b942:	4809      	ldr	r0, [pc, #36]	; (800b968 <tcp_output_segment_busy+0x3c>)
 800b944:	f005 fd78 	bl	8011438 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	7b9b      	ldrb	r3, [r3, #14]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d001      	beq.n	800b956 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b952:	2301      	movs	r3, #1
 800b954:	e000      	b.n	800b958 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	08013b48 	.word	0x08013b48
 800b964:	080140e4 	.word	0x080140e4
 800b968:	08013b9c 	.word	0x08013b9c

0800b96c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b96c:	b5b0      	push	{r4, r5, r7, lr}
 800b96e:	b08c      	sub	sp, #48	; 0x30
 800b970:	af04      	add	r7, sp, #16
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d106      	bne.n	800b98c <tcp_output_segment+0x20>
 800b97e:	4b63      	ldr	r3, [pc, #396]	; (800bb0c <tcp_output_segment+0x1a0>)
 800b980:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b984:	4962      	ldr	r1, [pc, #392]	; (800bb10 <tcp_output_segment+0x1a4>)
 800b986:	4863      	ldr	r0, [pc, #396]	; (800bb14 <tcp_output_segment+0x1a8>)
 800b988:	f005 fd56 	bl	8011438 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d106      	bne.n	800b9a0 <tcp_output_segment+0x34>
 800b992:	4b5e      	ldr	r3, [pc, #376]	; (800bb0c <tcp_output_segment+0x1a0>)
 800b994:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b998:	495f      	ldr	r1, [pc, #380]	; (800bb18 <tcp_output_segment+0x1ac>)
 800b99a:	485e      	ldr	r0, [pc, #376]	; (800bb14 <tcp_output_segment+0x1a8>)
 800b99c:	f005 fd4c 	bl	8011438 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d106      	bne.n	800b9b4 <tcp_output_segment+0x48>
 800b9a6:	4b59      	ldr	r3, [pc, #356]	; (800bb0c <tcp_output_segment+0x1a0>)
 800b9a8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b9ac:	495b      	ldr	r1, [pc, #364]	; (800bb1c <tcp_output_segment+0x1b0>)
 800b9ae:	4859      	ldr	r0, [pc, #356]	; (800bb14 <tcp_output_segment+0x1a8>)
 800b9b0:	f005 fd42 	bl	8011438 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f7ff ffb9 	bl	800b92c <tcp_output_segment_busy>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	e09f      	b.n	800bb04 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	68dc      	ldr	r4, [r3, #12]
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	f7f9 fe92 	bl	80056f6 <lwip_htonl>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	68dc      	ldr	r4, [r3, #12]
 800b9de:	4610      	mov	r0, r2
 800b9e0:	f7f9 fe74 	bl	80056cc <lwip_htons>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b9f0:	441a      	add	r2, r3
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	3314      	adds	r3, #20
 800b9fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	7a9b      	ldrb	r3, [r3, #10]
 800ba02:	f003 0301 	and.w	r3, r3, #1
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d015      	beq.n	800ba36 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	461a      	mov	r2, r3
 800ba10:	6879      	ldr	r1, [r7, #4]
 800ba12:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ba16:	f7fc fe8f 	bl	8008738 <tcp_eff_send_mss_netif>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ba1e:	8b7b      	ldrh	r3, [r7, #26]
 800ba20:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f9 fe66 	bl	80056f6 <lwip_htonl>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	3304      	adds	r3, #4
 800ba34:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	da02      	bge.n	800ba46 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	2200      	movs	r2, #0
 800ba44:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10c      	bne.n	800ba68 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ba4e:	4b34      	ldr	r3, [pc, #208]	; (800bb20 <tcp_output_segment+0x1b4>)
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7f9 fe4a 	bl	80056f6 <lwip_htonl>
 800ba62:	4602      	mov	r2, r0
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	68da      	ldr	r2, [r3, #12]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	8959      	ldrh	r1, [r3, #10]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	8b3a      	ldrh	r2, [r7, #24]
 800ba82:	1a8a      	subs	r2, r1, r2
 800ba84:	b292      	uxth	r2, r2
 800ba86:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	8919      	ldrh	r1, [r3, #8]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	8b3a      	ldrh	r2, [r7, #24]
 800ba94:	1a8a      	subs	r2, r1, r2
 800ba96:	b292      	uxth	r2, r2
 800ba98:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	68d2      	ldr	r2, [r2, #12]
 800baa2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	741a      	strb	r2, [r3, #16]
 800baac:	2200      	movs	r2, #0
 800baae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	f103 0214 	add.w	r2, r3, #20
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	7a9b      	ldrb	r3, [r3, #10]
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	f003 0304 	and.w	r3, r3, #4
 800bac2:	4413      	add	r3, r2
 800bac4:	69fa      	ldr	r2, [r7, #28]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d006      	beq.n	800bad8 <tcp_output_segment+0x16c>
 800baca:	4b10      	ldr	r3, [pc, #64]	; (800bb0c <tcp_output_segment+0x1a0>)
 800bacc:	f240 621c 	movw	r2, #1564	; 0x61c
 800bad0:	4914      	ldr	r1, [pc, #80]	; (800bb24 <tcp_output_segment+0x1b8>)
 800bad2:	4810      	ldr	r0, [pc, #64]	; (800bb14 <tcp_output_segment+0x1a8>)
 800bad4:	f005 fcb0 	bl	8011438 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6858      	ldr	r0, [r3, #4]
 800badc:	68b9      	ldr	r1, [r7, #8]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	1d1c      	adds	r4, r3, #4
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	7add      	ldrb	r5, [r3, #11]
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	7a9b      	ldrb	r3, [r3, #10]
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	9202      	str	r2, [sp, #8]
 800baee:	2206      	movs	r2, #6
 800baf0:	9201      	str	r2, [sp, #4]
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	462b      	mov	r3, r5
 800baf6:	4622      	mov	r2, r4
 800baf8:	f004 fc2e 	bl	8010358 <ip4_output_if>
 800bafc:	4603      	mov	r3, r0
 800bafe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bb00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3720      	adds	r7, #32
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bdb0      	pop	{r4, r5, r7, pc}
 800bb0c:	08013b48 	.word	0x08013b48
 800bb10:	0801410c 	.word	0x0801410c
 800bb14:	08013b9c 	.word	0x08013b9c
 800bb18:	0801412c 	.word	0x0801412c
 800bb1c:	0801414c 	.word	0x0801414c
 800bb20:	20006df4 	.word	0x20006df4
 800bb24:	08014170 	.word	0x08014170

0800bb28 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bb28:	b5b0      	push	{r4, r5, r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d106      	bne.n	800bb44 <tcp_rexmit_rto_prepare+0x1c>
 800bb36:	4b31      	ldr	r3, [pc, #196]	; (800bbfc <tcp_rexmit_rto_prepare+0xd4>)
 800bb38:	f240 6263 	movw	r2, #1635	; 0x663
 800bb3c:	4930      	ldr	r1, [pc, #192]	; (800bc00 <tcp_rexmit_rto_prepare+0xd8>)
 800bb3e:	4831      	ldr	r0, [pc, #196]	; (800bc04 <tcp_rexmit_rto_prepare+0xdc>)
 800bb40:	f005 fc7a 	bl	8011438 <iprintf>

  if (pcb->unacked == NULL) {
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d102      	bne.n	800bb52 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bb4c:	f06f 0305 	mvn.w	r3, #5
 800bb50:	e050      	b.n	800bbf4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	e00b      	b.n	800bb72 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f7ff fee6 	bl	800b92c <tcp_output_segment_busy>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bb66:	f06f 0305 	mvn.w	r3, #5
 800bb6a:	e043      	b.n	800bbf4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	60fb      	str	r3, [r7, #12]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1ef      	bne.n	800bb5a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7ff fed6 	bl	800b92c <tcp_output_segment_busy>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d002      	beq.n	800bb8c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bb86:	f06f 0305 	mvn.w	r3, #5
 800bb8a:	e033      	b.n	800bbf4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	8b5b      	ldrh	r3, [r3, #26]
 800bba6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7f9 fd9d 	bl	80056f6 <lwip_htonl>
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	891b      	ldrh	r3, [r3, #8]
 800bbc2:	461d      	mov	r5, r3
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	899b      	ldrh	r3, [r3, #12]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7f9 fd7d 	bl	80056cc <lwip_htons>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	f003 0303 	and.w	r3, r3, #3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <tcp_rexmit_rto_prepare+0xba>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e000      	b.n	800bbe4 <tcp_rexmit_rto_prepare+0xbc>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	442b      	add	r3, r5
 800bbe6:	18e2      	adds	r2, r4, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bdb0      	pop	{r4, r5, r7, pc}
 800bbfc:	08013b48 	.word	0x08013b48
 800bc00:	08014184 	.word	0x08014184
 800bc04:	08013b9c 	.word	0x08013b9c

0800bc08 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d106      	bne.n	800bc24 <tcp_rexmit_rto_commit+0x1c>
 800bc16:	4b0d      	ldr	r3, [pc, #52]	; (800bc4c <tcp_rexmit_rto_commit+0x44>)
 800bc18:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bc1c:	490c      	ldr	r1, [pc, #48]	; (800bc50 <tcp_rexmit_rto_commit+0x48>)
 800bc1e:	480d      	ldr	r0, [pc, #52]	; (800bc54 <tcp_rexmit_rto_commit+0x4c>)
 800bc20:	f005 fc0a 	bl	8011438 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc2a:	2bff      	cmp	r3, #255	; 0xff
 800bc2c:	d007      	beq.n	800bc3e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc34:	3301      	adds	r3, #1
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f7ff fc80 	bl	800b544 <tcp_output>
}
 800bc44:	bf00      	nop
 800bc46:	3708      	adds	r7, #8
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	08013b48 	.word	0x08013b48
 800bc50:	080141a8 	.word	0x080141a8
 800bc54:	08013b9c 	.word	0x08013b9c

0800bc58 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d106      	bne.n	800bc74 <tcp_rexmit_rto+0x1c>
 800bc66:	4b0a      	ldr	r3, [pc, #40]	; (800bc90 <tcp_rexmit_rto+0x38>)
 800bc68:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bc6c:	4909      	ldr	r1, [pc, #36]	; (800bc94 <tcp_rexmit_rto+0x3c>)
 800bc6e:	480a      	ldr	r0, [pc, #40]	; (800bc98 <tcp_rexmit_rto+0x40>)
 800bc70:	f005 fbe2 	bl	8011438 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7ff ff57 	bl	800bb28 <tcp_rexmit_rto_prepare>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d102      	bne.n	800bc86 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7ff ffc1 	bl	800bc08 <tcp_rexmit_rto_commit>
  }
}
 800bc86:	bf00      	nop
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	08013b48 	.word	0x08013b48
 800bc94:	080141cc 	.word	0x080141cc
 800bc98:	08013b9c 	.word	0x08013b9c

0800bc9c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bc9c:	b590      	push	{r4, r7, lr}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d106      	bne.n	800bcb8 <tcp_rexmit+0x1c>
 800bcaa:	4b2f      	ldr	r3, [pc, #188]	; (800bd68 <tcp_rexmit+0xcc>)
 800bcac:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bcb0:	492e      	ldr	r1, [pc, #184]	; (800bd6c <tcp_rexmit+0xd0>)
 800bcb2:	482f      	ldr	r0, [pc, #188]	; (800bd70 <tcp_rexmit+0xd4>)
 800bcb4:	f005 fbc0 	bl	8011438 <iprintf>

  if (pcb->unacked == NULL) {
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d102      	bne.n	800bcc6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bcc0:	f06f 0305 	mvn.w	r3, #5
 800bcc4:	e04c      	b.n	800bd60 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bccc:	68b8      	ldr	r0, [r7, #8]
 800bcce:	f7ff fe2d 	bl	800b92c <tcp_output_segment_busy>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d002      	beq.n	800bcde <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bcd8:	f06f 0305 	mvn.w	r3, #5
 800bcdc:	e040      	b.n	800bd60 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	336c      	adds	r3, #108	; 0x6c
 800bcea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bcec:	e002      	b.n	800bcf4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d011      	beq.n	800bd20 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7f9 fcf6 	bl	80056f6 <lwip_htonl>
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7f9 fcef 	bl	80056f6 <lwip_htonl>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	dbe6      	blt.n	800bcee <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d103      	bne.n	800bd3e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd44:	2bff      	cmp	r3, #255	; 0xff
 800bd46:	d007      	beq.n	800bd58 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd4e:	3301      	adds	r3, #1
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd90      	pop	{r4, r7, pc}
 800bd68:	08013b48 	.word	0x08013b48
 800bd6c:	080141e8 	.word	0x080141e8
 800bd70:	08013b9c 	.word	0x08013b9c

0800bd74 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d106      	bne.n	800bd90 <tcp_rexmit_fast+0x1c>
 800bd82:	4b2a      	ldr	r3, [pc, #168]	; (800be2c <tcp_rexmit_fast+0xb8>)
 800bd84:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bd88:	4929      	ldr	r1, [pc, #164]	; (800be30 <tcp_rexmit_fast+0xbc>)
 800bd8a:	482a      	ldr	r0, [pc, #168]	; (800be34 <tcp_rexmit_fast+0xc0>)
 800bd8c:	f005 fb54 	bl	8011438 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d045      	beq.n	800be24 <tcp_rexmit_fast+0xb0>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	8b5b      	ldrh	r3, [r3, #26]
 800bd9c:	f003 0304 	and.w	r3, r3, #4
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d13f      	bne.n	800be24 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f7ff ff79 	bl	800bc9c <tcp_rexmit>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d139      	bne.n	800be24 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	bf28      	it	cs
 800bdc0:	4613      	movcs	r3, r2
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	da00      	bge.n	800bdca <tcp_rexmit_fast+0x56>
 800bdc8:	3301      	adds	r3, #1
 800bdca:	105b      	asrs	r3, r3, #1
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bdda:	461a      	mov	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bde0:	005b      	lsls	r3, r3, #1
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d206      	bcs.n	800bdf4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdfe:	4619      	mov	r1, r3
 800be00:	0049      	lsls	r1, r1, #1
 800be02:	440b      	add	r3, r1
 800be04:	b29b      	uxth	r3, r3
 800be06:	4413      	add	r3, r2
 800be08:	b29a      	uxth	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	8b5b      	ldrh	r3, [r3, #26]
 800be14:	f043 0304 	orr.w	r3, r3, #4
 800be18:	b29a      	uxth	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800be24:	bf00      	nop
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	08013b48 	.word	0x08013b48
 800be30:	08014200 	.word	0x08014200
 800be34:	08013b9c 	.word	0x08013b9c

0800be38 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	607b      	str	r3, [r7, #4]
 800be42:	460b      	mov	r3, r1
 800be44:	817b      	strh	r3, [r7, #10]
 800be46:	4613      	mov	r3, r2
 800be48:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800be4a:	897a      	ldrh	r2, [r7, #10]
 800be4c:	893b      	ldrh	r3, [r7, #8]
 800be4e:	4413      	add	r3, r2
 800be50:	b29b      	uxth	r3, r3
 800be52:	3314      	adds	r3, #20
 800be54:	b29b      	uxth	r3, r3
 800be56:	f44f 7220 	mov.w	r2, #640	; 0x280
 800be5a:	4619      	mov	r1, r3
 800be5c:	2022      	movs	r0, #34	; 0x22
 800be5e:	f7fa fc0d 	bl	800667c <pbuf_alloc>
 800be62:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d04d      	beq.n	800bf06 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800be6a:	897b      	ldrh	r3, [r7, #10]
 800be6c:	3313      	adds	r3, #19
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	8952      	ldrh	r2, [r2, #10]
 800be72:	4293      	cmp	r3, r2
 800be74:	db06      	blt.n	800be84 <tcp_output_alloc_header_common+0x4c>
 800be76:	4b26      	ldr	r3, [pc, #152]	; (800bf10 <tcp_output_alloc_header_common+0xd8>)
 800be78:	f240 7223 	movw	r2, #1827	; 0x723
 800be7c:	4925      	ldr	r1, [pc, #148]	; (800bf14 <tcp_output_alloc_header_common+0xdc>)
 800be7e:	4826      	ldr	r0, [pc, #152]	; (800bf18 <tcp_output_alloc_header_common+0xe0>)
 800be80:	f005 fada 	bl	8011438 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800be8a:	8c3b      	ldrh	r3, [r7, #32]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7f9 fc1d 	bl	80056cc <lwip_htons>
 800be92:	4603      	mov	r3, r0
 800be94:	461a      	mov	r2, r3
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800be9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7f9 fc15 	bl	80056cc <lwip_htons>
 800bea2:	4603      	mov	r3, r0
 800bea4:	461a      	mov	r2, r3
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f7f9 fc20 	bl	80056f6 <lwip_htonl>
 800beb6:	4602      	mov	r2, r0
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bebc:	897b      	ldrh	r3, [r7, #10]
 800bebe:	089b      	lsrs	r3, r3, #2
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	3305      	adds	r3, #5
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	031b      	lsls	r3, r3, #12
 800bec8:	b29a      	uxth	r2, r3
 800beca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bece:	b29b      	uxth	r3, r3
 800bed0:	4313      	orrs	r3, r2
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7f9 fbf9 	bl	80056cc <lwip_htons>
 800beda:	4603      	mov	r3, r0
 800bedc:	461a      	mov	r2, r3
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bee2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7f9 fbf1 	bl	80056cc <lwip_htons>
 800beea:	4603      	mov	r3, r0
 800beec:	461a      	mov	r2, r3
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	2200      	movs	r2, #0
 800bef6:	741a      	strb	r2, [r3, #16]
 800bef8:	2200      	movs	r2, #0
 800befa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	2200      	movs	r2, #0
 800bf00:	749a      	strb	r2, [r3, #18]
 800bf02:	2200      	movs	r2, #0
 800bf04:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800bf06:	697b      	ldr	r3, [r7, #20]
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3718      	adds	r7, #24
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	08013b48 	.word	0x08013b48
 800bf14:	08014220 	.word	0x08014220
 800bf18:	08013b9c 	.word	0x08013b9c

0800bf1c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800bf1c:	b5b0      	push	{r4, r5, r7, lr}
 800bf1e:	b08a      	sub	sp, #40	; 0x28
 800bf20:	af04      	add	r7, sp, #16
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	607b      	str	r3, [r7, #4]
 800bf26:	460b      	mov	r3, r1
 800bf28:	817b      	strh	r3, [r7, #10]
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d106      	bne.n	800bf42 <tcp_output_alloc_header+0x26>
 800bf34:	4b15      	ldr	r3, [pc, #84]	; (800bf8c <tcp_output_alloc_header+0x70>)
 800bf36:	f240 7242 	movw	r2, #1858	; 0x742
 800bf3a:	4915      	ldr	r1, [pc, #84]	; (800bf90 <tcp_output_alloc_header+0x74>)
 800bf3c:	4815      	ldr	r0, [pc, #84]	; (800bf94 <tcp_output_alloc_header+0x78>)
 800bf3e:	f005 fa7b 	bl	8011438 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	8adb      	ldrh	r3, [r3, #22]
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	8b12      	ldrh	r2, [r2, #24]
 800bf4e:	68f9      	ldr	r1, [r7, #12]
 800bf50:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800bf52:	893d      	ldrh	r5, [r7, #8]
 800bf54:	897c      	ldrh	r4, [r7, #10]
 800bf56:	9103      	str	r1, [sp, #12]
 800bf58:	2110      	movs	r1, #16
 800bf5a:	9102      	str	r1, [sp, #8]
 800bf5c:	9201      	str	r2, [sp, #4]
 800bf5e:	9300      	str	r3, [sp, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	462a      	mov	r2, r5
 800bf64:	4621      	mov	r1, r4
 800bf66:	f7ff ff67 	bl	800be38 <tcp_output_alloc_header_common>
 800bf6a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d006      	beq.n	800bf80 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bf7a:	441a      	add	r2, r3
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800bf80:	697b      	ldr	r3, [r7, #20]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3718      	adds	r7, #24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bdb0      	pop	{r4, r5, r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	08013b48 	.word	0x08013b48
 800bf90:	08014250 	.word	0x08014250
 800bf94:	08013b9c 	.word	0x08013b9c

0800bf98 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b088      	sub	sp, #32
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	4611      	mov	r1, r2
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	71fb      	strb	r3, [r7, #7]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d106      	bne.n	800bfc6 <tcp_output_fill_options+0x2e>
 800bfb8:	4b13      	ldr	r3, [pc, #76]	; (800c008 <tcp_output_fill_options+0x70>)
 800bfba:	f240 7256 	movw	r2, #1878	; 0x756
 800bfbe:	4913      	ldr	r1, [pc, #76]	; (800c00c <tcp_output_fill_options+0x74>)
 800bfc0:	4813      	ldr	r0, [pc, #76]	; (800c010 <tcp_output_fill_options+0x78>)
 800bfc2:	f005 fa39 	bl	8011438 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	3314      	adds	r3, #20
 800bfd0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	f103 0214 	add.w	r2, r3, #20
 800bfd8:	8bfb      	ldrh	r3, [r7, #30]
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4619      	mov	r1, r3
 800bfde:	79fb      	ldrb	r3, [r7, #7]
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	f003 0304 	and.w	r3, r3, #4
 800bfe6:	440b      	add	r3, r1
 800bfe8:	4413      	add	r3, r2
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d006      	beq.n	800bffe <tcp_output_fill_options+0x66>
 800bff0:	4b05      	ldr	r3, [pc, #20]	; (800c008 <tcp_output_fill_options+0x70>)
 800bff2:	f240 7275 	movw	r2, #1909	; 0x775
 800bff6:	4907      	ldr	r1, [pc, #28]	; (800c014 <tcp_output_fill_options+0x7c>)
 800bff8:	4805      	ldr	r0, [pc, #20]	; (800c010 <tcp_output_fill_options+0x78>)
 800bffa:	f005 fa1d 	bl	8011438 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bffe:	bf00      	nop
 800c000:	3720      	adds	r7, #32
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	08013b48 	.word	0x08013b48
 800c00c:	08014278 	.word	0x08014278
 800c010:	08013b9c 	.word	0x08013b9c
 800c014:	08014170 	.word	0x08014170

0800c018 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08a      	sub	sp, #40	; 0x28
 800c01c:	af04      	add	r7, sp, #16
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
 800c024:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d106      	bne.n	800c03a <tcp_output_control_segment+0x22>
 800c02c:	4b1c      	ldr	r3, [pc, #112]	; (800c0a0 <tcp_output_control_segment+0x88>)
 800c02e:	f240 7287 	movw	r2, #1927	; 0x787
 800c032:	491c      	ldr	r1, [pc, #112]	; (800c0a4 <tcp_output_control_segment+0x8c>)
 800c034:	481c      	ldr	r0, [pc, #112]	; (800c0a8 <tcp_output_control_segment+0x90>)
 800c036:	f005 f9ff 	bl	8011438 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	6879      	ldr	r1, [r7, #4]
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f7fe ff40 	bl	800aec4 <tcp_route>
 800c044:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d102      	bne.n	800c052 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c04c:	23fc      	movs	r3, #252	; 0xfc
 800c04e:	75fb      	strb	r3, [r7, #23]
 800c050:	e01c      	b.n	800c08c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d006      	beq.n	800c066 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	7adb      	ldrb	r3, [r3, #11]
 800c05c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	7a9b      	ldrb	r3, [r3, #10]
 800c062:	757b      	strb	r3, [r7, #21]
 800c064:	e003      	b.n	800c06e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c066:	23ff      	movs	r3, #255	; 0xff
 800c068:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c06e:	7dba      	ldrb	r2, [r7, #22]
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	9302      	str	r3, [sp, #8]
 800c074:	2306      	movs	r3, #6
 800c076:	9301      	str	r3, [sp, #4]
 800c078:	7d7b      	ldrb	r3, [r7, #21]
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	4613      	mov	r3, r2
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	68b8      	ldr	r0, [r7, #8]
 800c084:	f004 f968 	bl	8010358 <ip4_output_if>
 800c088:	4603      	mov	r3, r0
 800c08a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c08c:	68b8      	ldr	r0, [r7, #8]
 800c08e:	f7fa fdd9 	bl	8006c44 <pbuf_free>
  return err;
 800c092:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	08013b48 	.word	0x08013b48
 800c0a4:	080142a0 	.word	0x080142a0
 800c0a8:	08013b9c 	.word	0x08013b9c

0800c0ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c0ac:	b590      	push	{r4, r7, lr}
 800c0ae:	b08b      	sub	sp, #44	; 0x2c
 800c0b0:	af04      	add	r7, sp, #16
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
 800c0b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d106      	bne.n	800c0ce <tcp_rst+0x22>
 800c0c0:	4b1f      	ldr	r3, [pc, #124]	; (800c140 <tcp_rst+0x94>)
 800c0c2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c0c6:	491f      	ldr	r1, [pc, #124]	; (800c144 <tcp_rst+0x98>)
 800c0c8:	481f      	ldr	r0, [pc, #124]	; (800c148 <tcp_rst+0x9c>)
 800c0ca:	f005 f9b5 	bl	8011438 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d106      	bne.n	800c0e2 <tcp_rst+0x36>
 800c0d4:	4b1a      	ldr	r3, [pc, #104]	; (800c140 <tcp_rst+0x94>)
 800c0d6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c0da:	491c      	ldr	r1, [pc, #112]	; (800c14c <tcp_rst+0xa0>)
 800c0dc:	481a      	ldr	r0, [pc, #104]	; (800c148 <tcp_rst+0x9c>)
 800c0de:	f005 f9ab 	bl	8011438 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c0e6:	f246 0308 	movw	r3, #24584	; 0x6008
 800c0ea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c0ec:	7dfb      	ldrb	r3, [r7, #23]
 800c0ee:	b29c      	uxth	r4, r3
 800c0f0:	68b8      	ldr	r0, [r7, #8]
 800c0f2:	f7f9 fb00 	bl	80056f6 <lwip_htonl>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	8abb      	ldrh	r3, [r7, #20]
 800c0fa:	9303      	str	r3, [sp, #12]
 800c0fc:	2314      	movs	r3, #20
 800c0fe:	9302      	str	r3, [sp, #8]
 800c100:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c102:	9301      	str	r3, [sp, #4]
 800c104:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	4613      	mov	r3, r2
 800c10a:	2200      	movs	r2, #0
 800c10c:	4621      	mov	r1, r4
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff fe92 	bl	800be38 <tcp_output_alloc_header_common>
 800c114:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00c      	beq.n	800c136 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c11c:	7dfb      	ldrb	r3, [r7, #23]
 800c11e:	2200      	movs	r2, #0
 800c120:	6939      	ldr	r1, [r7, #16]
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f7ff ff38 	bl	800bf98 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	6939      	ldr	r1, [r7, #16]
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f7ff ff72 	bl	800c018 <tcp_output_control_segment>
 800c134:	e000      	b.n	800c138 <tcp_rst+0x8c>
    return;
 800c136:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c138:	371c      	adds	r7, #28
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd90      	pop	{r4, r7, pc}
 800c13e:	bf00      	nop
 800c140:	08013b48 	.word	0x08013b48
 800c144:	080142cc 	.word	0x080142cc
 800c148:	08013b9c 	.word	0x08013b9c
 800c14c:	080142e8 	.word	0x080142e8

0800c150 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c150:	b590      	push	{r4, r7, lr}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d106      	bne.n	800c174 <tcp_send_empty_ack+0x24>
 800c166:	4b28      	ldr	r3, [pc, #160]	; (800c208 <tcp_send_empty_ack+0xb8>)
 800c168:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c16c:	4927      	ldr	r1, [pc, #156]	; (800c20c <tcp_send_empty_ack+0xbc>)
 800c16e:	4828      	ldr	r0, [pc, #160]	; (800c210 <tcp_send_empty_ack+0xc0>)
 800c170:	f005 f962 	bl	8011438 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c174:	7dfb      	ldrb	r3, [r7, #23]
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	f003 0304 	and.w	r3, r3, #4
 800c17e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c180:	7d7b      	ldrb	r3, [r7, #21]
 800c182:	b29c      	uxth	r4, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c188:	4618      	mov	r0, r3
 800c18a:	f7f9 fab4 	bl	80056f6 <lwip_htonl>
 800c18e:	4603      	mov	r3, r0
 800c190:	2200      	movs	r2, #0
 800c192:	4621      	mov	r1, r4
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f7ff fec1 	bl	800bf1c <tcp_output_alloc_header>
 800c19a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d109      	bne.n	800c1b6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	8b5b      	ldrh	r3, [r3, #26]
 800c1a6:	f043 0303 	orr.w	r3, r3, #3
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c1b0:	f06f 0301 	mvn.w	r3, #1
 800c1b4:	e023      	b.n	800c1fe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c1b6:	7dbb      	ldrb	r3, [r7, #22]
 800c1b8:	7dfa      	ldrb	r2, [r7, #23]
 800c1ba:	6939      	ldr	r1, [r7, #16]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7ff feeb 	bl	800bf98 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	6939      	ldr	r1, [r7, #16]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff ff24 	bl	800c018 <tcp_output_control_segment>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c1d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d007      	beq.n	800c1ec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	8b5b      	ldrh	r3, [r3, #26]
 800c1e0:	f043 0303 	orr.w	r3, r3, #3
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	835a      	strh	r2, [r3, #26]
 800c1ea:	e006      	b.n	800c1fa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	8b5b      	ldrh	r3, [r3, #26]
 800c1f0:	f023 0303 	bic.w	r3, r3, #3
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c1fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	371c      	adds	r7, #28
 800c202:	46bd      	mov	sp, r7
 800c204:	bd90      	pop	{r4, r7, pc}
 800c206:	bf00      	nop
 800c208:	08013b48 	.word	0x08013b48
 800c20c:	08014304 	.word	0x08014304
 800c210:	08013b9c 	.word	0x08013b9c

0800c214 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c214:	b590      	push	{r4, r7, lr}
 800c216:	b087      	sub	sp, #28
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c21c:	2300      	movs	r3, #0
 800c21e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d106      	bne.n	800c234 <tcp_keepalive+0x20>
 800c226:	4b18      	ldr	r3, [pc, #96]	; (800c288 <tcp_keepalive+0x74>)
 800c228:	f640 0224 	movw	r2, #2084	; 0x824
 800c22c:	4917      	ldr	r1, [pc, #92]	; (800c28c <tcp_keepalive+0x78>)
 800c22e:	4818      	ldr	r0, [pc, #96]	; (800c290 <tcp_keepalive+0x7c>)
 800c230:	f005 f902 	bl	8011438 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c234:	7dfb      	ldrb	r3, [r7, #23]
 800c236:	b29c      	uxth	r4, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c23c:	3b01      	subs	r3, #1
 800c23e:	4618      	mov	r0, r3
 800c240:	f7f9 fa59 	bl	80056f6 <lwip_htonl>
 800c244:	4603      	mov	r3, r0
 800c246:	2200      	movs	r2, #0
 800c248:	4621      	mov	r1, r4
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7ff fe66 	bl	800bf1c <tcp_output_alloc_header>
 800c250:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d102      	bne.n	800c25e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c258:	f04f 33ff 	mov.w	r3, #4294967295
 800c25c:	e010      	b.n	800c280 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c25e:	7dfb      	ldrb	r3, [r7, #23]
 800c260:	2200      	movs	r2, #0
 800c262:	6939      	ldr	r1, [r7, #16]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f7ff fe97 	bl	800bf98 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3304      	adds	r3, #4
 800c270:	6939      	ldr	r1, [r7, #16]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7ff fed0 	bl	800c018 <tcp_output_control_segment>
 800c278:	4603      	mov	r3, r0
 800c27a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c27c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c280:	4618      	mov	r0, r3
 800c282:	371c      	adds	r7, #28
 800c284:	46bd      	mov	sp, r7
 800c286:	bd90      	pop	{r4, r7, pc}
 800c288:	08013b48 	.word	0x08013b48
 800c28c:	08014324 	.word	0x08014324
 800c290:	08013b9c 	.word	0x08013b9c

0800c294 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c294:	b590      	push	{r4, r7, lr}
 800c296:	b08b      	sub	sp, #44	; 0x2c
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c29c:	2300      	movs	r3, #0
 800c29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d106      	bne.n	800c2b6 <tcp_zero_window_probe+0x22>
 800c2a8:	4b4c      	ldr	r3, [pc, #304]	; (800c3dc <tcp_zero_window_probe+0x148>)
 800c2aa:	f640 024f 	movw	r2, #2127	; 0x84f
 800c2ae:	494c      	ldr	r1, [pc, #304]	; (800c3e0 <tcp_zero_window_probe+0x14c>)
 800c2b0:	484c      	ldr	r0, [pc, #304]	; (800c3e4 <tcp_zero_window_probe+0x150>)
 800c2b2:	f005 f8c1 	bl	8011438 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c2bc:	6a3b      	ldr	r3, [r7, #32]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d101      	bne.n	800c2c6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	e086      	b.n	800c3d4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c2cc:	2bff      	cmp	r3, #255	; 0xff
 800c2ce:	d007      	beq.n	800c2e0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c2e0:	6a3b      	ldr	r3, [r7, #32]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	899b      	ldrh	r3, [r3, #12]
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7f9 f9ef 	bl	80056cc <lwip_htons>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d005      	beq.n	800c306 <tcp_zero_window_probe+0x72>
 800c2fa:	6a3b      	ldr	r3, [r7, #32]
 800c2fc:	891b      	ldrh	r3, [r3, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d101      	bne.n	800c306 <tcp_zero_window_probe+0x72>
 800c302:	2301      	movs	r3, #1
 800c304:	e000      	b.n	800c308 <tcp_zero_window_probe+0x74>
 800c306:	2300      	movs	r3, #0
 800c308:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c30a:	7ffb      	ldrb	r3, [r7, #31]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	bf0c      	ite	eq
 800c310:	2301      	moveq	r3, #1
 800c312:	2300      	movne	r3, #0
 800c314:	b2db      	uxtb	r3, r3
 800c316:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c31c:	b299      	uxth	r1, r3
 800c31e:	6a3b      	ldr	r3, [r7, #32]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	8bba      	ldrh	r2, [r7, #28]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7ff fdf8 	bl	800bf1c <tcp_output_alloc_header>
 800c32c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d102      	bne.n	800c33a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c334:	f04f 33ff 	mov.w	r3, #4294967295
 800c338:	e04c      	b.n	800c3d4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c340:	7ffb      	ldrb	r3, [r7, #31]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d011      	beq.n	800c36a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	899b      	ldrh	r3, [r3, #12]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	b21b      	sxth	r3, r3
 800c34e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c352:	b21c      	sxth	r4, r3
 800c354:	2011      	movs	r0, #17
 800c356:	f7f9 f9b9 	bl	80056cc <lwip_htons>
 800c35a:	4603      	mov	r3, r0
 800c35c:	b21b      	sxth	r3, r3
 800c35e:	4323      	orrs	r3, r4
 800c360:	b21b      	sxth	r3, r3
 800c362:	b29a      	uxth	r2, r3
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	819a      	strh	r2, [r3, #12]
 800c368:	e010      	b.n	800c38c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	3314      	adds	r3, #20
 800c370:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	6858      	ldr	r0, [r3, #4]
 800c376:	6a3b      	ldr	r3, [r7, #32]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	891a      	ldrh	r2, [r3, #8]
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	891b      	ldrh	r3, [r3, #8]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	b29b      	uxth	r3, r3
 800c384:	2201      	movs	r2, #1
 800c386:	6939      	ldr	r1, [r7, #16]
 800c388:	f7fa fe56 	bl	8007038 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c38c:	6a3b      	ldr	r3, [r7, #32]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	4618      	mov	r0, r3
 800c394:	f7f9 f9af 	bl	80056f6 <lwip_htonl>
 800c398:	4603      	mov	r3, r0
 800c39a:	3301      	adds	r3, #1
 800c39c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	1ad3      	subs	r3, r2, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	da02      	bge.n	800c3b0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	69b9      	ldr	r1, [r7, #24]
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f7ff fded 	bl	800bf98 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	69b9      	ldr	r1, [r7, #24]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7ff fe26 	bl	800c018 <tcp_output_control_segment>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c3d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	372c      	adds	r7, #44	; 0x2c
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd90      	pop	{r4, r7, pc}
 800c3dc:	08013b48 	.word	0x08013b48
 800c3e0:	08014340 	.word	0x08014340
 800c3e4:	08013b9c 	.word	0x08013b9c

0800c3e8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c3f0:	f7fa ff10 	bl	8007214 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c3f4:	4b0a      	ldr	r3, [pc, #40]	; (800c420 <tcpip_tcp_timer+0x38>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d103      	bne.n	800c404 <tcpip_tcp_timer+0x1c>
 800c3fc:	4b09      	ldr	r3, [pc, #36]	; (800c424 <tcpip_tcp_timer+0x3c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d005      	beq.n	800c410 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c404:	2200      	movs	r2, #0
 800c406:	4908      	ldr	r1, [pc, #32]	; (800c428 <tcpip_tcp_timer+0x40>)
 800c408:	20fa      	movs	r0, #250	; 0xfa
 800c40a:	f000 f8f3 	bl	800c5f4 <sys_timeout>
 800c40e:	e003      	b.n	800c418 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c410:	4b06      	ldr	r3, [pc, #24]	; (800c42c <tcpip_tcp_timer+0x44>)
 800c412:	2200      	movs	r2, #0
 800c414:	601a      	str	r2, [r3, #0]
  }
}
 800c416:	bf00      	nop
 800c418:	bf00      	nop
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	20006df0 	.word	0x20006df0
 800c424:	20006e00 	.word	0x20006e00
 800c428:	0800c3e9 	.word	0x0800c3e9
 800c42c:	2000010c 	.word	0x2000010c

0800c430 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c434:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <tcp_timer_needed+0x30>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10f      	bne.n	800c45c <tcp_timer_needed+0x2c>
 800c43c:	4b09      	ldr	r3, [pc, #36]	; (800c464 <tcp_timer_needed+0x34>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d103      	bne.n	800c44c <tcp_timer_needed+0x1c>
 800c444:	4b08      	ldr	r3, [pc, #32]	; (800c468 <tcp_timer_needed+0x38>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d007      	beq.n	800c45c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c44c:	4b04      	ldr	r3, [pc, #16]	; (800c460 <tcp_timer_needed+0x30>)
 800c44e:	2201      	movs	r2, #1
 800c450:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c452:	2200      	movs	r2, #0
 800c454:	4905      	ldr	r1, [pc, #20]	; (800c46c <tcp_timer_needed+0x3c>)
 800c456:	20fa      	movs	r0, #250	; 0xfa
 800c458:	f000 f8cc 	bl	800c5f4 <sys_timeout>
  }
}
 800c45c:	bf00      	nop
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	2000010c 	.word	0x2000010c
 800c464:	20006df0 	.word	0x20006df0
 800c468:	20006e00 	.word	0x20006e00
 800c46c:	0800c3e9 	.word	0x0800c3e9

0800c470 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c47c:	2006      	movs	r0, #6
 800c47e:	f7f9 fd7b 	bl	8005f78 <memp_malloc>
 800c482:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d109      	bne.n	800c49e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d151      	bne.n	800c534 <sys_timeout_abs+0xc4>
 800c490:	4b2a      	ldr	r3, [pc, #168]	; (800c53c <sys_timeout_abs+0xcc>)
 800c492:	22be      	movs	r2, #190	; 0xbe
 800c494:	492a      	ldr	r1, [pc, #168]	; (800c540 <sys_timeout_abs+0xd0>)
 800c496:	482b      	ldr	r0, [pc, #172]	; (800c544 <sys_timeout_abs+0xd4>)
 800c498:	f004 ffce 	bl	8011438 <iprintf>
    return;
 800c49c:	e04a      	b.n	800c534 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c4b6:	4b24      	ldr	r3, [pc, #144]	; (800c548 <sys_timeout_abs+0xd8>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d103      	bne.n	800c4c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c4be:	4a22      	ldr	r2, [pc, #136]	; (800c548 <sys_timeout_abs+0xd8>)
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	6013      	str	r3, [r2, #0]
    return;
 800c4c4:	e037      	b.n	800c536 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	685a      	ldr	r2, [r3, #4]
 800c4ca:	4b1f      	ldr	r3, [pc, #124]	; (800c548 <sys_timeout_abs+0xd8>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	0fdb      	lsrs	r3, r3, #31
 800c4d4:	f003 0301 	and.w	r3, r3, #1
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d007      	beq.n	800c4ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c4de:	4b1a      	ldr	r3, [pc, #104]	; (800c548 <sys_timeout_abs+0xd8>)
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c4e6:	4a18      	ldr	r2, [pc, #96]	; (800c548 <sys_timeout_abs+0xd8>)
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	6013      	str	r3, [r2, #0]
 800c4ec:	e023      	b.n	800c536 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c4ee:	4b16      	ldr	r3, [pc, #88]	; (800c548 <sys_timeout_abs+0xd8>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	617b      	str	r3, [r7, #20]
 800c4f4:	e01a      	b.n	800c52c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00b      	beq.n	800c516 <sys_timeout_abs+0xa6>
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	0fdb      	lsrs	r3, r3, #31
 800c50c:	f003 0301 	and.w	r3, r3, #1
 800c510:	b2db      	uxtb	r3, r3
 800c512:	2b00      	cmp	r3, #0
 800c514:	d007      	beq.n	800c526 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	693a      	ldr	r2, [r7, #16]
 800c522:	601a      	str	r2, [r3, #0]
        break;
 800c524:	e007      	b.n	800c536 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	617b      	str	r3, [r7, #20]
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e1      	bne.n	800c4f6 <sys_timeout_abs+0x86>
 800c532:	e000      	b.n	800c536 <sys_timeout_abs+0xc6>
    return;
 800c534:	bf00      	nop
      }
    }
  }
}
 800c536:	3718      	adds	r7, #24
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	08014364 	.word	0x08014364
 800c540:	08014398 	.word	0x08014398
 800c544:	080143d8 	.word	0x080143d8
 800c548:	20000104 	.word	0x20000104

0800c54c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b086      	sub	sp, #24
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	4798      	blx	r3

  now = sys_now();
 800c55e:	f7f9 f827 	bl	80055b0 <sys_now>
 800c562:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	4b0f      	ldr	r3, [pc, #60]	; (800c5a8 <lwip_cyclic_timer+0x5c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4413      	add	r3, r2
 800c56e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	0fdb      	lsrs	r3, r3, #31
 800c578:	f003 0301 	and.w	r3, r3, #1
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d009      	beq.n	800c596 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	4413      	add	r3, r2
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	4907      	ldr	r1, [pc, #28]	; (800c5ac <lwip_cyclic_timer+0x60>)
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff ff6e 	bl	800c470 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c594:	e004      	b.n	800c5a0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	4904      	ldr	r1, [pc, #16]	; (800c5ac <lwip_cyclic_timer+0x60>)
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	f7ff ff68 	bl	800c470 <sys_timeout_abs>
}
 800c5a0:	bf00      	nop
 800c5a2:	3718      	adds	r7, #24
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	20000108 	.word	0x20000108
 800c5ac:	0800c54d 	.word	0x0800c54d

0800c5b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	607b      	str	r3, [r7, #4]
 800c5ba:	e00e      	b.n	800c5da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c5bc:	4a0b      	ldr	r2, [pc, #44]	; (800c5ec <sys_timeouts_init+0x3c>)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	00db      	lsls	r3, r3, #3
 800c5c8:	4a08      	ldr	r2, [pc, #32]	; (800c5ec <sys_timeouts_init+0x3c>)
 800c5ca:	4413      	add	r3, r2
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	4908      	ldr	r1, [pc, #32]	; (800c5f0 <sys_timeouts_init+0x40>)
 800c5d0:	f000 f810 	bl	800c5f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	607b      	str	r3, [r7, #4]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2b04      	cmp	r3, #4
 800c5de:	d9ed      	bls.n	800c5bc <sys_timeouts_init+0xc>
  }
}
 800c5e0:	bf00      	nop
 800c5e2:	bf00      	nop
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	08015300 	.word	0x08015300
 800c5f0:	0800c54d 	.word	0x0800c54d

0800c5f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c606:	d306      	bcc.n	800c616 <sys_timeout+0x22>
 800c608:	4b0a      	ldr	r3, [pc, #40]	; (800c634 <sys_timeout+0x40>)
 800c60a:	f240 1229 	movw	r2, #297	; 0x129
 800c60e:	490a      	ldr	r1, [pc, #40]	; (800c638 <sys_timeout+0x44>)
 800c610:	480a      	ldr	r0, [pc, #40]	; (800c63c <sys_timeout+0x48>)
 800c612:	f004 ff11 	bl	8011438 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c616:	f7f8 ffcb 	bl	80055b0 <sys_now>
 800c61a:	4602      	mov	r2, r0
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	4413      	add	r3, r2
 800c620:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	68b9      	ldr	r1, [r7, #8]
 800c626:	6978      	ldr	r0, [r7, #20]
 800c628:	f7ff ff22 	bl	800c470 <sys_timeout_abs>
#endif
}
 800c62c:	bf00      	nop
 800c62e:	3718      	adds	r7, #24
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	08014364 	.word	0x08014364
 800c638:	08014400 	.word	0x08014400
 800c63c:	080143d8 	.word	0x080143d8

0800c640 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c646:	f7f8 ffb3 	bl	80055b0 <sys_now>
 800c64a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c64c:	4b1a      	ldr	r3, [pc, #104]	; (800c6b8 <sys_check_timeouts+0x78>)
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	b2db      	uxtb	r3, r3
 800c652:	2b00      	cmp	r3, #0
 800c654:	d001      	beq.n	800c65a <sys_check_timeouts+0x1a>
 800c656:	f7f9 ffbb 	bl	80065d0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c65a:	4b18      	ldr	r3, [pc, #96]	; (800c6bc <sys_check_timeouts+0x7c>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d022      	beq.n	800c6ac <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	1ad3      	subs	r3, r2, r3
 800c66e:	0fdb      	lsrs	r3, r3, #31
 800c670:	f003 0301 	and.w	r3, r3, #1
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	d11a      	bne.n	800c6b0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4a0f      	ldr	r2, [pc, #60]	; (800c6bc <sys_check_timeouts+0x7c>)
 800c680:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	4a0b      	ldr	r2, [pc, #44]	; (800c6c0 <sys_check_timeouts+0x80>)
 800c694:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c696:	68b9      	ldr	r1, [r7, #8]
 800c698:	2006      	movs	r0, #6
 800c69a:	f7f9 fcb9 	bl	8006010 <memp_free>
    if (handler != NULL) {
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d0d3      	beq.n	800c64c <sys_check_timeouts+0xc>
      handler(arg);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6838      	ldr	r0, [r7, #0]
 800c6a8:	4798      	blx	r3
  do {
 800c6aa:	e7cf      	b.n	800c64c <sys_check_timeouts+0xc>
      return;
 800c6ac:	bf00      	nop
 800c6ae:	e000      	b.n	800c6b2 <sys_check_timeouts+0x72>
      return;
 800c6b0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	20006de8 	.word	0x20006de8
 800c6bc:	20000104 	.word	0x20000104
 800c6c0:	20000108 	.word	0x20000108

0800c6c4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c6c8:	f004 fece 	bl	8011468 <rand>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	4b01      	ldr	r3, [pc, #4]	; (800c6e4 <udp_init+0x20>)
 800c6de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c6e0:	bf00      	nop
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	20000010 	.word	0x20000010

0800c6e8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c6f2:	4b17      	ldr	r3, [pc, #92]	; (800c750 <udp_new_port+0x68>)
 800c6f4:	881b      	ldrh	r3, [r3, #0]
 800c6f6:	1c5a      	adds	r2, r3, #1
 800c6f8:	b291      	uxth	r1, r2
 800c6fa:	4a15      	ldr	r2, [pc, #84]	; (800c750 <udp_new_port+0x68>)
 800c6fc:	8011      	strh	r1, [r2, #0]
 800c6fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c702:	4293      	cmp	r3, r2
 800c704:	d103      	bne.n	800c70e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c706:	4b12      	ldr	r3, [pc, #72]	; (800c750 <udp_new_port+0x68>)
 800c708:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c70c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c70e:	4b11      	ldr	r3, [pc, #68]	; (800c754 <udp_new_port+0x6c>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	603b      	str	r3, [r7, #0]
 800c714:	e011      	b.n	800c73a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	8a5a      	ldrh	r2, [r3, #18]
 800c71a:	4b0d      	ldr	r3, [pc, #52]	; (800c750 <udp_new_port+0x68>)
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d108      	bne.n	800c734 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c722:	88fb      	ldrh	r3, [r7, #6]
 800c724:	3301      	adds	r3, #1
 800c726:	80fb      	strh	r3, [r7, #6]
 800c728:	88fb      	ldrh	r3, [r7, #6]
 800c72a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c72e:	d3e0      	bcc.n	800c6f2 <udp_new_port+0xa>
        return 0;
 800c730:	2300      	movs	r3, #0
 800c732:	e007      	b.n	800c744 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	603b      	str	r3, [r7, #0]
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1ea      	bne.n	800c716 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800c740:	4b03      	ldr	r3, [pc, #12]	; (800c750 <udp_new_port+0x68>)
 800c742:	881b      	ldrh	r3, [r3, #0]
}
 800c744:	4618      	mov	r0, r3
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	20000010 	.word	0x20000010
 800c754:	20006e08 	.word	0x20006e08

0800c758 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	4613      	mov	r3, r2
 800c764:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d105      	bne.n	800c778 <udp_input_local_match+0x20>
 800c76c:	4b27      	ldr	r3, [pc, #156]	; (800c80c <udp_input_local_match+0xb4>)
 800c76e:	2287      	movs	r2, #135	; 0x87
 800c770:	4927      	ldr	r1, [pc, #156]	; (800c810 <udp_input_local_match+0xb8>)
 800c772:	4828      	ldr	r0, [pc, #160]	; (800c814 <udp_input_local_match+0xbc>)
 800c774:	f004 fe60 	bl	8011438 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d105      	bne.n	800c78a <udp_input_local_match+0x32>
 800c77e:	4b23      	ldr	r3, [pc, #140]	; (800c80c <udp_input_local_match+0xb4>)
 800c780:	2288      	movs	r2, #136	; 0x88
 800c782:	4925      	ldr	r1, [pc, #148]	; (800c818 <udp_input_local_match+0xc0>)
 800c784:	4823      	ldr	r0, [pc, #140]	; (800c814 <udp_input_local_match+0xbc>)
 800c786:	f004 fe57 	bl	8011438 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	7a1b      	ldrb	r3, [r3, #8]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00b      	beq.n	800c7aa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	7a1a      	ldrb	r2, [r3, #8]
 800c796:	4b21      	ldr	r3, [pc, #132]	; (800c81c <udp_input_local_match+0xc4>)
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c79e:	3301      	adds	r3, #1
 800c7a0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d001      	beq.n	800c7aa <udp_input_local_match+0x52>
    return 0;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	e02b      	b.n	800c802 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c7aa:	79fb      	ldrb	r3, [r7, #7]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d018      	beq.n	800c7e2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d013      	beq.n	800c7de <udp_input_local_match+0x86>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00f      	beq.n	800c7de <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c7be:	4b17      	ldr	r3, [pc, #92]	; (800c81c <udp_input_local_match+0xc4>)
 800c7c0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c6:	d00a      	beq.n	800c7de <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	4b13      	ldr	r3, [pc, #76]	; (800c81c <udp_input_local_match+0xc4>)
 800c7ce:	695b      	ldr	r3, [r3, #20]
 800c7d0:	405a      	eors	r2, r3
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	3308      	adds	r3, #8
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d110      	bne.n	800c800 <udp_input_local_match+0xa8>
          return 1;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e00f      	b.n	800c802 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d009      	beq.n	800c7fc <udp_input_local_match+0xa4>
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d005      	beq.n	800c7fc <udp_input_local_match+0xa4>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	4b09      	ldr	r3, [pc, #36]	; (800c81c <udp_input_local_match+0xc4>)
 800c7f6:	695b      	ldr	r3, [r3, #20]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d101      	bne.n	800c800 <udp_input_local_match+0xa8>
        return 1;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e000      	b.n	800c802 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c800:	2300      	movs	r3, #0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	0801444c 	.word	0x0801444c
 800c810:	0801447c 	.word	0x0801447c
 800c814:	080144a0 	.word	0x080144a0
 800c818:	080144c8 	.word	0x080144c8
 800c81c:	2000388c 	.word	0x2000388c

0800c820 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c820:	b590      	push	{r4, r7, lr}
 800c822:	b08d      	sub	sp, #52	; 0x34
 800c824:	af02      	add	r7, sp, #8
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c82a:	2300      	movs	r3, #0
 800c82c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d105      	bne.n	800c840 <udp_input+0x20>
 800c834:	4b7c      	ldr	r3, [pc, #496]	; (800ca28 <udp_input+0x208>)
 800c836:	22cf      	movs	r2, #207	; 0xcf
 800c838:	497c      	ldr	r1, [pc, #496]	; (800ca2c <udp_input+0x20c>)
 800c83a:	487d      	ldr	r0, [pc, #500]	; (800ca30 <udp_input+0x210>)
 800c83c:	f004 fdfc 	bl	8011438 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d105      	bne.n	800c852 <udp_input+0x32>
 800c846:	4b78      	ldr	r3, [pc, #480]	; (800ca28 <udp_input+0x208>)
 800c848:	22d0      	movs	r2, #208	; 0xd0
 800c84a:	497a      	ldr	r1, [pc, #488]	; (800ca34 <udp_input+0x214>)
 800c84c:	4878      	ldr	r0, [pc, #480]	; (800ca30 <udp_input+0x210>)
 800c84e:	f004 fdf3 	bl	8011438 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	895b      	ldrh	r3, [r3, #10]
 800c856:	2b07      	cmp	r3, #7
 800c858:	d803      	bhi.n	800c862 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7fa f9f2 	bl	8006c44 <pbuf_free>
    goto end;
 800c860:	e0de      	b.n	800ca20 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c868:	4b73      	ldr	r3, [pc, #460]	; (800ca38 <udp_input+0x218>)
 800c86a:	695b      	ldr	r3, [r3, #20]
 800c86c:	4a72      	ldr	r2, [pc, #456]	; (800ca38 <udp_input+0x218>)
 800c86e:	6812      	ldr	r2, [r2, #0]
 800c870:	4611      	mov	r1, r2
 800c872:	4618      	mov	r0, r3
 800c874:	f003 fe48 	bl	8010508 <ip4_addr_isbroadcast_u32>
 800c878:	4603      	mov	r3, r0
 800c87a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	b29b      	uxth	r3, r3
 800c882:	4618      	mov	r0, r3
 800c884:	f7f8 ff22 	bl	80056cc <lwip_htons>
 800c888:	4603      	mov	r3, r0
 800c88a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	885b      	ldrh	r3, [r3, #2]
 800c890:	b29b      	uxth	r3, r3
 800c892:	4618      	mov	r0, r3
 800c894:	f7f8 ff1a 	bl	80056cc <lwip_htons>
 800c898:	4603      	mov	r3, r0
 800c89a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c89c:	2300      	movs	r3, #0
 800c89e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8a8:	4b64      	ldr	r3, [pc, #400]	; (800ca3c <udp_input+0x21c>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c8ae:	e054      	b.n	800c95a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b2:	8a5b      	ldrh	r3, [r3, #18]
 800c8b4:	89fa      	ldrh	r2, [r7, #14]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d14a      	bne.n	800c950 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c8ba:	7cfb      	ldrb	r3, [r7, #19]
 800c8bc:	461a      	mov	r2, r3
 800c8be:	6839      	ldr	r1, [r7, #0]
 800c8c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8c2:	f7ff ff49 	bl	800c758 <udp_input_local_match>
 800c8c6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d041      	beq.n	800c950 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ce:	7c1b      	ldrb	r3, [r3, #16]
 800c8d0:	f003 0304 	and.w	r3, r3, #4
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d11d      	bne.n	800c914 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d102      	bne.n	800c8e4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e0:	61fb      	str	r3, [r7, #28]
 800c8e2:	e017      	b.n	800c914 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c8e4:	7cfb      	ldrb	r3, [r7, #19]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d014      	beq.n	800c914 <udp_input+0xf4>
 800c8ea:	4b53      	ldr	r3, [pc, #332]	; (800ca38 <udp_input+0x218>)
 800c8ec:	695b      	ldr	r3, [r3, #20]
 800c8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f2:	d10f      	bne.n	800c914 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d008      	beq.n	800c914 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	3304      	adds	r3, #4
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d101      	bne.n	800c914 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c916:	8a9b      	ldrh	r3, [r3, #20]
 800c918:	8a3a      	ldrh	r2, [r7, #16]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d118      	bne.n	800c950 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c922:	2b00      	cmp	r3, #0
 800c924:	d005      	beq.n	800c932 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c928:	685a      	ldr	r2, [r3, #4]
 800c92a:	4b43      	ldr	r3, [pc, #268]	; (800ca38 <udp_input+0x218>)
 800c92c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c92e:	429a      	cmp	r2, r3
 800c930:	d10e      	bne.n	800c950 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c932:	6a3b      	ldr	r3, [r7, #32]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d014      	beq.n	800c962 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93a:	68da      	ldr	r2, [r3, #12]
 800c93c:	6a3b      	ldr	r3, [r7, #32]
 800c93e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c940:	4b3e      	ldr	r3, [pc, #248]	; (800ca3c <udp_input+0x21c>)
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c948:	4a3c      	ldr	r2, [pc, #240]	; (800ca3c <udp_input+0x21c>)
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c94e:	e008      	b.n	800c962 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c952:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	627b      	str	r3, [r7, #36]	; 0x24
 800c95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d1a7      	bne.n	800c8b0 <udp_input+0x90>
 800c960:	e000      	b.n	800c964 <udp_input+0x144>
        break;
 800c962:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c966:	2b00      	cmp	r3, #0
 800c968:	d101      	bne.n	800c96e <udp_input+0x14e>
    pcb = uncon_pcb;
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	2b00      	cmp	r3, #0
 800c972:	d002      	beq.n	800c97a <udp_input+0x15a>
    for_us = 1;
 800c974:	2301      	movs	r3, #1
 800c976:	76fb      	strb	r3, [r7, #27]
 800c978:	e00a      	b.n	800c990 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	3304      	adds	r3, #4
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	4b2d      	ldr	r3, [pc, #180]	; (800ca38 <udp_input+0x218>)
 800c982:	695b      	ldr	r3, [r3, #20]
 800c984:	429a      	cmp	r2, r3
 800c986:	bf0c      	ite	eq
 800c988:	2301      	moveq	r3, #1
 800c98a:	2300      	movne	r3, #0
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c990:	7efb      	ldrb	r3, [r7, #27]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d041      	beq.n	800ca1a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c996:	2108      	movs	r1, #8
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7fa f8cd 	bl	8006b38 <pbuf_remove_header>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d00a      	beq.n	800c9ba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c9a4:	4b20      	ldr	r3, [pc, #128]	; (800ca28 <udp_input+0x208>)
 800c9a6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c9aa:	4925      	ldr	r1, [pc, #148]	; (800ca40 <udp_input+0x220>)
 800c9ac:	4820      	ldr	r0, [pc, #128]	; (800ca30 <udp_input+0x210>)
 800c9ae:	f004 fd43 	bl	8011438 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7fa f946 	bl	8006c44 <pbuf_free>
      goto end;
 800c9b8:	e032      	b.n	800ca20 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d012      	beq.n	800c9e6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	699b      	ldr	r3, [r3, #24]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00a      	beq.n	800c9de <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	699c      	ldr	r4, [r3, #24]
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	69d8      	ldr	r0, [r3, #28]
 800c9d0:	8a3b      	ldrh	r3, [r7, #16]
 800c9d2:	9300      	str	r3, [sp, #0]
 800c9d4:	4b1b      	ldr	r3, [pc, #108]	; (800ca44 <udp_input+0x224>)
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9da:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c9dc:	e021      	b.n	800ca22 <udp_input+0x202>
        pbuf_free(p);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f7fa f930 	bl	8006c44 <pbuf_free>
        goto end;
 800c9e4:	e01c      	b.n	800ca20 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c9e6:	7cfb      	ldrb	r3, [r7, #19]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d112      	bne.n	800ca12 <udp_input+0x1f2>
 800c9ec:	4b12      	ldr	r3, [pc, #72]	; (800ca38 <udp_input+0x218>)
 800c9ee:	695b      	ldr	r3, [r3, #20]
 800c9f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9f4:	2be0      	cmp	r3, #224	; 0xe0
 800c9f6:	d00c      	beq.n	800ca12 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ca38 <udp_input+0x218>)
 800c9fa:	899b      	ldrh	r3, [r3, #12]
 800c9fc:	3308      	adds	r3, #8
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	b21b      	sxth	r3, r3
 800ca02:	4619      	mov	r1, r3
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f7fa f90a 	bl	8006c1e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ca0a:	2103      	movs	r1, #3
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f003 fa3d 	bl	800fe8c <icmp_dest_unreach>
      pbuf_free(p);
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7fa f916 	bl	8006c44 <pbuf_free>
  return;
 800ca18:	e003      	b.n	800ca22 <udp_input+0x202>
    pbuf_free(p);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7fa f912 	bl	8006c44 <pbuf_free>
  return;
 800ca20:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ca22:	372c      	adds	r7, #44	; 0x2c
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd90      	pop	{r4, r7, pc}
 800ca28:	0801444c 	.word	0x0801444c
 800ca2c:	080144f0 	.word	0x080144f0
 800ca30:	080144a0 	.word	0x080144a0
 800ca34:	08014508 	.word	0x08014508
 800ca38:	2000388c 	.word	0x2000388c
 800ca3c:	20006e08 	.word	0x20006e08
 800ca40:	08014524 	.word	0x08014524
 800ca44:	2000389c 	.word	0x2000389c

0800ca48 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b088      	sub	sp, #32
 800ca4c:	af02      	add	r7, sp, #8
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
 800ca54:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d109      	bne.n	800ca70 <udp_sendto_if+0x28>
 800ca5c:	4b2e      	ldr	r3, [pc, #184]	; (800cb18 <udp_sendto_if+0xd0>)
 800ca5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca62:	492e      	ldr	r1, [pc, #184]	; (800cb1c <udp_sendto_if+0xd4>)
 800ca64:	482e      	ldr	r0, [pc, #184]	; (800cb20 <udp_sendto_if+0xd8>)
 800ca66:	f004 fce7 	bl	8011438 <iprintf>
 800ca6a:	f06f 030f 	mvn.w	r3, #15
 800ca6e:	e04f      	b.n	800cb10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d109      	bne.n	800ca8a <udp_sendto_if+0x42>
 800ca76:	4b28      	ldr	r3, [pc, #160]	; (800cb18 <udp_sendto_if+0xd0>)
 800ca78:	f240 2281 	movw	r2, #641	; 0x281
 800ca7c:	4929      	ldr	r1, [pc, #164]	; (800cb24 <udp_sendto_if+0xdc>)
 800ca7e:	4828      	ldr	r0, [pc, #160]	; (800cb20 <udp_sendto_if+0xd8>)
 800ca80:	f004 fcda 	bl	8011438 <iprintf>
 800ca84:	f06f 030f 	mvn.w	r3, #15
 800ca88:	e042      	b.n	800cb10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d109      	bne.n	800caa4 <udp_sendto_if+0x5c>
 800ca90:	4b21      	ldr	r3, [pc, #132]	; (800cb18 <udp_sendto_if+0xd0>)
 800ca92:	f240 2282 	movw	r2, #642	; 0x282
 800ca96:	4924      	ldr	r1, [pc, #144]	; (800cb28 <udp_sendto_if+0xe0>)
 800ca98:	4821      	ldr	r0, [pc, #132]	; (800cb20 <udp_sendto_if+0xd8>)
 800ca9a:	f004 fccd 	bl	8011438 <iprintf>
 800ca9e:	f06f 030f 	mvn.w	r3, #15
 800caa2:	e035      	b.n	800cb10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800caa4:	6a3b      	ldr	r3, [r7, #32]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d109      	bne.n	800cabe <udp_sendto_if+0x76>
 800caaa:	4b1b      	ldr	r3, [pc, #108]	; (800cb18 <udp_sendto_if+0xd0>)
 800caac:	f240 2283 	movw	r2, #643	; 0x283
 800cab0:	491e      	ldr	r1, [pc, #120]	; (800cb2c <udp_sendto_if+0xe4>)
 800cab2:	481b      	ldr	r0, [pc, #108]	; (800cb20 <udp_sendto_if+0xd8>)
 800cab4:	f004 fcc0 	bl	8011438 <iprintf>
 800cab8:	f06f 030f 	mvn.w	r3, #15
 800cabc:	e028      	b.n	800cb10 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d009      	beq.n	800cad8 <udp_sendto_if+0x90>
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d005      	beq.n	800cad8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cad4:	2be0      	cmp	r3, #224	; 0xe0
 800cad6:	d103      	bne.n	800cae0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800cad8:	6a3b      	ldr	r3, [r7, #32]
 800cada:	3304      	adds	r3, #4
 800cadc:	617b      	str	r3, [r7, #20]
 800cade:	e00b      	b.n	800caf8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	6a3b      	ldr	r3, [r7, #32]
 800cae6:	3304      	adds	r3, #4
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	429a      	cmp	r2, r3
 800caec:	d002      	beq.n	800caf4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800caee:	f06f 0303 	mvn.w	r3, #3
 800caf2:	e00d      	b.n	800cb10 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800caf8:	887a      	ldrh	r2, [r7, #2]
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	9301      	str	r3, [sp, #4]
 800cafe:	6a3b      	ldr	r3, [r7, #32]
 800cb00:	9300      	str	r3, [sp, #0]
 800cb02:	4613      	mov	r3, r2
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	68b9      	ldr	r1, [r7, #8]
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f000 f811 	bl	800cb30 <udp_sendto_if_src>
 800cb0e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3718      	adds	r7, #24
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	0801444c 	.word	0x0801444c
 800cb1c:	080145c0 	.word	0x080145c0
 800cb20:	080144a0 	.word	0x080144a0
 800cb24:	080145dc 	.word	0x080145dc
 800cb28:	080145f8 	.word	0x080145f8
 800cb2c:	08014618 	.word	0x08014618

0800cb30 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b08c      	sub	sp, #48	; 0x30
 800cb34:	af04      	add	r7, sp, #16
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
 800cb3c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d109      	bne.n	800cb58 <udp_sendto_if_src+0x28>
 800cb44:	4b65      	ldr	r3, [pc, #404]	; (800ccdc <udp_sendto_if_src+0x1ac>)
 800cb46:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cb4a:	4965      	ldr	r1, [pc, #404]	; (800cce0 <udp_sendto_if_src+0x1b0>)
 800cb4c:	4865      	ldr	r0, [pc, #404]	; (800cce4 <udp_sendto_if_src+0x1b4>)
 800cb4e:	f004 fc73 	bl	8011438 <iprintf>
 800cb52:	f06f 030f 	mvn.w	r3, #15
 800cb56:	e0bc      	b.n	800ccd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d109      	bne.n	800cb72 <udp_sendto_if_src+0x42>
 800cb5e:	4b5f      	ldr	r3, [pc, #380]	; (800ccdc <udp_sendto_if_src+0x1ac>)
 800cb60:	f240 22d2 	movw	r2, #722	; 0x2d2
 800cb64:	4960      	ldr	r1, [pc, #384]	; (800cce8 <udp_sendto_if_src+0x1b8>)
 800cb66:	485f      	ldr	r0, [pc, #380]	; (800cce4 <udp_sendto_if_src+0x1b4>)
 800cb68:	f004 fc66 	bl	8011438 <iprintf>
 800cb6c:	f06f 030f 	mvn.w	r3, #15
 800cb70:	e0af      	b.n	800ccd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d109      	bne.n	800cb8c <udp_sendto_if_src+0x5c>
 800cb78:	4b58      	ldr	r3, [pc, #352]	; (800ccdc <udp_sendto_if_src+0x1ac>)
 800cb7a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800cb7e:	495b      	ldr	r1, [pc, #364]	; (800ccec <udp_sendto_if_src+0x1bc>)
 800cb80:	4858      	ldr	r0, [pc, #352]	; (800cce4 <udp_sendto_if_src+0x1b4>)
 800cb82:	f004 fc59 	bl	8011438 <iprintf>
 800cb86:	f06f 030f 	mvn.w	r3, #15
 800cb8a:	e0a2      	b.n	800ccd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800cb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d109      	bne.n	800cba6 <udp_sendto_if_src+0x76>
 800cb92:	4b52      	ldr	r3, [pc, #328]	; (800ccdc <udp_sendto_if_src+0x1ac>)
 800cb94:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800cb98:	4955      	ldr	r1, [pc, #340]	; (800ccf0 <udp_sendto_if_src+0x1c0>)
 800cb9a:	4852      	ldr	r0, [pc, #328]	; (800cce4 <udp_sendto_if_src+0x1b4>)
 800cb9c:	f004 fc4c 	bl	8011438 <iprintf>
 800cba0:	f06f 030f 	mvn.w	r3, #15
 800cba4:	e095      	b.n	800ccd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800cba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d109      	bne.n	800cbc0 <udp_sendto_if_src+0x90>
 800cbac:	4b4b      	ldr	r3, [pc, #300]	; (800ccdc <udp_sendto_if_src+0x1ac>)
 800cbae:	f240 22d5 	movw	r2, #725	; 0x2d5
 800cbb2:	4950      	ldr	r1, [pc, #320]	; (800ccf4 <udp_sendto_if_src+0x1c4>)
 800cbb4:	484b      	ldr	r0, [pc, #300]	; (800cce4 <udp_sendto_if_src+0x1b4>)
 800cbb6:	f004 fc3f 	bl	8011438 <iprintf>
 800cbba:	f06f 030f 	mvn.w	r3, #15
 800cbbe:	e088      	b.n	800ccd2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	8a5b      	ldrh	r3, [r3, #18]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10f      	bne.n	800cbe8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800cbc8:	68f9      	ldr	r1, [r7, #12]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	8a5b      	ldrh	r3, [r3, #18]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	68f8      	ldr	r0, [r7, #12]
 800cbd2:	f000 f893 	bl	800ccfc <udp_bind>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800cbda:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d002      	beq.n	800cbe8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800cbe2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cbe6:	e074      	b.n	800ccd2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	891b      	ldrh	r3, [r3, #8]
 800cbec:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d902      	bls.n	800cbfa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800cbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf8:	e06b      	b.n	800ccd2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800cbfa:	2108      	movs	r1, #8
 800cbfc:	68b8      	ldr	r0, [r7, #8]
 800cbfe:	f7f9 ff8b 	bl	8006b18 <pbuf_add_header>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d015      	beq.n	800cc34 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800cc08:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc0c:	2108      	movs	r1, #8
 800cc0e:	2022      	movs	r0, #34	; 0x22
 800cc10:	f7f9 fd34 	bl	800667c <pbuf_alloc>
 800cc14:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d102      	bne.n	800cc22 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800cc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc20:	e057      	b.n	800ccd2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	891b      	ldrh	r3, [r3, #8]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d006      	beq.n	800cc38 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	69f8      	ldr	r0, [r7, #28]
 800cc2e:	f7fa f921 	bl	8006e74 <pbuf_chain>
 800cc32:	e001      	b.n	800cc38 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	895b      	ldrh	r3, [r3, #10]
 800cc3c:	2b07      	cmp	r3, #7
 800cc3e:	d806      	bhi.n	800cc4e <udp_sendto_if_src+0x11e>
 800cc40:	4b26      	ldr	r3, [pc, #152]	; (800ccdc <udp_sendto_if_src+0x1ac>)
 800cc42:	f240 320d 	movw	r2, #781	; 0x30d
 800cc46:	492c      	ldr	r1, [pc, #176]	; (800ccf8 <udp_sendto_if_src+0x1c8>)
 800cc48:	4826      	ldr	r0, [pc, #152]	; (800cce4 <udp_sendto_if_src+0x1b4>)
 800cc4a:	f004 fbf5 	bl	8011438 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	8a5b      	ldrh	r3, [r3, #18]
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7f8 fd37 	bl	80056cc <lwip_htons>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	461a      	mov	r2, r3
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800cc66:	887b      	ldrh	r3, [r7, #2]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7f8 fd2f 	bl	80056cc <lwip_htons>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	461a      	mov	r2, r3
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	719a      	strb	r2, [r3, #6]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	891b      	ldrh	r3, [r3, #8]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7f8 fd21 	bl	80056cc <lwip_htons>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800cc92:	2311      	movs	r3, #17
 800cc94:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	7adb      	ldrb	r3, [r3, #11]
 800cc9a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	7a9b      	ldrb	r3, [r3, #10]
 800cca0:	7cb9      	ldrb	r1, [r7, #18]
 800cca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cca4:	9202      	str	r2, [sp, #8]
 800cca6:	7cfa      	ldrb	r2, [r7, #19]
 800cca8:	9201      	str	r2, [sp, #4]
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	460b      	mov	r3, r1
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccb2:	69f8      	ldr	r0, [r7, #28]
 800ccb4:	f003 fb7a 	bl	80103ac <ip4_output_if_src>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ccbc:	69fa      	ldr	r2, [r7, #28]
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d004      	beq.n	800ccce <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800ccc4:	69f8      	ldr	r0, [r7, #28]
 800ccc6:	f7f9 ffbd 	bl	8006c44 <pbuf_free>
    q = NULL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800ccce:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3720      	adds	r7, #32
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	0801444c 	.word	0x0801444c
 800cce0:	08014638 	.word	0x08014638
 800cce4:	080144a0 	.word	0x080144a0
 800cce8:	08014658 	.word	0x08014658
 800ccec:	08014678 	.word	0x08014678
 800ccf0:	0801469c 	.word	0x0801469c
 800ccf4:	080146c0 	.word	0x080146c0
 800ccf8:	080146e4 	.word	0x080146e4

0800ccfc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	4613      	mov	r3, r2
 800cd08:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800cd10:	4b39      	ldr	r3, [pc, #228]	; (800cdf8 <udp_bind+0xfc>)
 800cd12:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d109      	bne.n	800cd2e <udp_bind+0x32>
 800cd1a:	4b38      	ldr	r3, [pc, #224]	; (800cdfc <udp_bind+0x100>)
 800cd1c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800cd20:	4937      	ldr	r1, [pc, #220]	; (800ce00 <udp_bind+0x104>)
 800cd22:	4838      	ldr	r0, [pc, #224]	; (800ce04 <udp_bind+0x108>)
 800cd24:	f004 fb88 	bl	8011438 <iprintf>
 800cd28:	f06f 030f 	mvn.w	r3, #15
 800cd2c:	e060      	b.n	800cdf0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cd32:	4b35      	ldr	r3, [pc, #212]	; (800ce08 <udp_bind+0x10c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	617b      	str	r3, [r7, #20]
 800cd38:	e009      	b.n	800cd4e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d102      	bne.n	800cd48 <udp_bind+0x4c>
      rebind = 1;
 800cd42:	2301      	movs	r3, #1
 800cd44:	74fb      	strb	r3, [r7, #19]
      break;
 800cd46:	e005      	b.n	800cd54 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	617b      	str	r3, [r7, #20]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d1f2      	bne.n	800cd3a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800cd54:	88fb      	ldrh	r3, [r7, #6]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d109      	bne.n	800cd6e <udp_bind+0x72>
    port = udp_new_port();
 800cd5a:	f7ff fcc5 	bl	800c6e8 <udp_new_port>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cd62:	88fb      	ldrh	r3, [r7, #6]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d12c      	bne.n	800cdc2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800cd68:	f06f 0307 	mvn.w	r3, #7
 800cd6c:	e040      	b.n	800cdf0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cd6e:	4b26      	ldr	r3, [pc, #152]	; (800ce08 <udp_bind+0x10c>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	617b      	str	r3, [r7, #20]
 800cd74:	e022      	b.n	800cdbc <udp_bind+0xc0>
      if (pcb != ipcb) {
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d01b      	beq.n	800cdb6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	8a5b      	ldrh	r3, [r3, #18]
 800cd82:	88fa      	ldrh	r2, [r7, #6]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d116      	bne.n	800cdb6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d00d      	beq.n	800cdb0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00a      	beq.n	800cdb0 <udp_bind+0xb4>
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d006      	beq.n	800cdb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800cda2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d003      	beq.n	800cdb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d102      	bne.n	800cdb6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800cdb0:	f06f 0307 	mvn.w	r3, #7
 800cdb4:	e01c      	b.n	800cdf0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	617b      	str	r3, [r7, #20]
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1d9      	bne.n	800cd76 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d002      	beq.n	800cdce <udp_bind+0xd2>
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	e000      	b.n	800cdd0 <udp_bind+0xd4>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	88fa      	ldrh	r2, [r7, #6]
 800cdd8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800cdda:	7cfb      	ldrb	r3, [r7, #19]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d106      	bne.n	800cdee <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800cde0:	4b09      	ldr	r3, [pc, #36]	; (800ce08 <udp_bind+0x10c>)
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800cde8:	4a07      	ldr	r2, [pc, #28]	; (800ce08 <udp_bind+0x10c>)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800cdee:	2300      	movs	r3, #0
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3718      	adds	r7, #24
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	08015328 	.word	0x08015328
 800cdfc:	0801444c 	.word	0x0801444c
 800ce00:	08014714 	.word	0x08014714
 800ce04:	080144a0 	.word	0x080144a0
 800ce08:	20006e08 	.word	0x20006e08

0800ce0c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b086      	sub	sp, #24
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	4613      	mov	r3, r2
 800ce18:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d109      	bne.n	800ce34 <udp_connect+0x28>
 800ce20:	4b2c      	ldr	r3, [pc, #176]	; (800ced4 <udp_connect+0xc8>)
 800ce22:	f240 4235 	movw	r2, #1077	; 0x435
 800ce26:	492c      	ldr	r1, [pc, #176]	; (800ced8 <udp_connect+0xcc>)
 800ce28:	482c      	ldr	r0, [pc, #176]	; (800cedc <udp_connect+0xd0>)
 800ce2a:	f004 fb05 	bl	8011438 <iprintf>
 800ce2e:	f06f 030f 	mvn.w	r3, #15
 800ce32:	e04b      	b.n	800cecc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d109      	bne.n	800ce4e <udp_connect+0x42>
 800ce3a:	4b26      	ldr	r3, [pc, #152]	; (800ced4 <udp_connect+0xc8>)
 800ce3c:	f240 4236 	movw	r2, #1078	; 0x436
 800ce40:	4927      	ldr	r1, [pc, #156]	; (800cee0 <udp_connect+0xd4>)
 800ce42:	4826      	ldr	r0, [pc, #152]	; (800cedc <udp_connect+0xd0>)
 800ce44:	f004 faf8 	bl	8011438 <iprintf>
 800ce48:	f06f 030f 	mvn.w	r3, #15
 800ce4c:	e03e      	b.n	800cecc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	8a5b      	ldrh	r3, [r3, #18]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10f      	bne.n	800ce76 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ce56:	68f9      	ldr	r1, [r7, #12]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	8a5b      	ldrh	r3, [r3, #18]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f7ff ff4c 	bl	800ccfc <udp_bind>
 800ce64:	4603      	mov	r3, r0
 800ce66:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ce68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d002      	beq.n	800ce76 <udp_connect+0x6a>
      return err;
 800ce70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce74:	e02a      	b.n	800cecc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d002      	beq.n	800ce82 <udp_connect+0x76>
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	e000      	b.n	800ce84 <udp_connect+0x78>
 800ce82:	2300      	movs	r3, #0
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	88fa      	ldrh	r2, [r7, #6]
 800ce8c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	7c1b      	ldrb	r3, [r3, #16]
 800ce92:	f043 0304 	orr.w	r3, r3, #4
 800ce96:	b2da      	uxtb	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ce9c:	4b11      	ldr	r3, [pc, #68]	; (800cee4 <udp_connect+0xd8>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	617b      	str	r3, [r7, #20]
 800cea2:	e008      	b.n	800ceb6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d101      	bne.n	800ceb0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	e00d      	b.n	800cecc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	617b      	str	r3, [r7, #20]
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1f3      	bne.n	800cea4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800cebc:	4b09      	ldr	r3, [pc, #36]	; (800cee4 <udp_connect+0xd8>)
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800cec4:	4a07      	ldr	r2, [pc, #28]	; (800cee4 <udp_connect+0xd8>)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3718      	adds	r7, #24
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	0801444c 	.word	0x0801444c
 800ced8:	0801472c 	.word	0x0801472c
 800cedc:	080144a0 	.word	0x080144a0
 800cee0:	08014748 	.word	0x08014748
 800cee4:	20006e08 	.word	0x20006e08

0800cee8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d107      	bne.n	800cf0a <udp_recv+0x22>
 800cefa:	4b08      	ldr	r3, [pc, #32]	; (800cf1c <udp_recv+0x34>)
 800cefc:	f240 428a 	movw	r2, #1162	; 0x48a
 800cf00:	4907      	ldr	r1, [pc, #28]	; (800cf20 <udp_recv+0x38>)
 800cf02:	4808      	ldr	r0, [pc, #32]	; (800cf24 <udp_recv+0x3c>)
 800cf04:	f004 fa98 	bl	8011438 <iprintf>
 800cf08:	e005      	b.n	800cf16 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	61da      	str	r2, [r3, #28]
}
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	0801444c 	.word	0x0801444c
 800cf20:	08014780 	.word	0x08014780
 800cf24:	080144a0 	.word	0x080144a0

0800cf28 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d107      	bne.n	800cf46 <udp_remove+0x1e>
 800cf36:	4b19      	ldr	r3, [pc, #100]	; (800cf9c <udp_remove+0x74>)
 800cf38:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800cf3c:	4918      	ldr	r1, [pc, #96]	; (800cfa0 <udp_remove+0x78>)
 800cf3e:	4819      	ldr	r0, [pc, #100]	; (800cfa4 <udp_remove+0x7c>)
 800cf40:	f004 fa7a 	bl	8011438 <iprintf>
 800cf44:	e026      	b.n	800cf94 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800cf46:	4b18      	ldr	r3, [pc, #96]	; (800cfa8 <udp_remove+0x80>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d105      	bne.n	800cf5c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800cf50:	4b15      	ldr	r3, [pc, #84]	; (800cfa8 <udp_remove+0x80>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	4a14      	ldr	r2, [pc, #80]	; (800cfa8 <udp_remove+0x80>)
 800cf58:	6013      	str	r3, [r2, #0]
 800cf5a:	e017      	b.n	800cf8c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800cf5c:	4b12      	ldr	r3, [pc, #72]	; (800cfa8 <udp_remove+0x80>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	60fb      	str	r3, [r7, #12]
 800cf62:	e010      	b.n	800cf86 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d009      	beq.n	800cf80 <udp_remove+0x58>
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d104      	bne.n	800cf80 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	68da      	ldr	r2, [r3, #12]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	60da      	str	r2, [r3, #12]
        break;
 800cf7e:	e005      	b.n	800cf8c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	60fb      	str	r3, [r7, #12]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1eb      	bne.n	800cf64 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800cf8c:	6879      	ldr	r1, [r7, #4]
 800cf8e:	2000      	movs	r0, #0
 800cf90:	f7f9 f83e 	bl	8006010 <memp_free>
}
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	0801444c 	.word	0x0801444c
 800cfa0:	08014798 	.word	0x08014798
 800cfa4:	080144a0 	.word	0x080144a0
 800cfa8:	20006e08 	.word	0x20006e08

0800cfac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800cfb2:	2000      	movs	r0, #0
 800cfb4:	f7f8 ffe0 	bl	8005f78 <memp_malloc>
 800cfb8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d007      	beq.n	800cfd0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800cfc0:	2220      	movs	r2, #32
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f004 fa2f 	bl	8011428 <memset>
    pcb->ttl = UDP_TTL;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	22ff      	movs	r2, #255	; 0xff
 800cfce:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800cfd0:	687b      	ldr	r3, [r7, #4]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3708      	adds	r7, #8
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
	...

0800cfdc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b085      	sub	sp, #20
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d01e      	beq.n	800d02a <udp_netif_ip_addr_changed+0x4e>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d01a      	beq.n	800d02a <udp_netif_ip_addr_changed+0x4e>
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d017      	beq.n	800d02a <udp_netif_ip_addr_changed+0x4e>
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d013      	beq.n	800d02a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d002:	4b0d      	ldr	r3, [pc, #52]	; (800d038 <udp_netif_ip_addr_changed+0x5c>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	60fb      	str	r3, [r7, #12]
 800d008:	e00c      	b.n	800d024 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	429a      	cmp	r2, r3
 800d014:	d103      	bne.n	800d01e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	60fb      	str	r3, [r7, #12]
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1ef      	bne.n	800d00a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d02a:	bf00      	nop
 800d02c:	3714      	adds	r7, #20
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop
 800d038:	20006e08 	.word	0x20006e08

0800d03c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800d040:	4b20      	ldr	r3, [pc, #128]	; (800d0c4 <dhcp_inc_pcb_refcount+0x88>)
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d133      	bne.n	800d0b0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800d048:	4b1f      	ldr	r3, [pc, #124]	; (800d0c8 <dhcp_inc_pcb_refcount+0x8c>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d005      	beq.n	800d05c <dhcp_inc_pcb_refcount+0x20>
 800d050:	4b1e      	ldr	r3, [pc, #120]	; (800d0cc <dhcp_inc_pcb_refcount+0x90>)
 800d052:	22e5      	movs	r2, #229	; 0xe5
 800d054:	491e      	ldr	r1, [pc, #120]	; (800d0d0 <dhcp_inc_pcb_refcount+0x94>)
 800d056:	481f      	ldr	r0, [pc, #124]	; (800d0d4 <dhcp_inc_pcb_refcount+0x98>)
 800d058:	f004 f9ee 	bl	8011438 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800d05c:	f7ff ffa6 	bl	800cfac <udp_new>
 800d060:	4603      	mov	r3, r0
 800d062:	4a19      	ldr	r2, [pc, #100]	; (800d0c8 <dhcp_inc_pcb_refcount+0x8c>)
 800d064:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800d066:	4b18      	ldr	r3, [pc, #96]	; (800d0c8 <dhcp_inc_pcb_refcount+0x8c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d102      	bne.n	800d074 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800d06e:	f04f 33ff 	mov.w	r3, #4294967295
 800d072:	e024      	b.n	800d0be <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800d074:	4b14      	ldr	r3, [pc, #80]	; (800d0c8 <dhcp_inc_pcb_refcount+0x8c>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	7a5a      	ldrb	r2, [r3, #9]
 800d07a:	4b13      	ldr	r3, [pc, #76]	; (800d0c8 <dhcp_inc_pcb_refcount+0x8c>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f042 0220 	orr.w	r2, r2, #32
 800d082:	b2d2      	uxtb	r2, r2
 800d084:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800d086:	4b10      	ldr	r3, [pc, #64]	; (800d0c8 <dhcp_inc_pcb_refcount+0x8c>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2244      	movs	r2, #68	; 0x44
 800d08c:	4912      	ldr	r1, [pc, #72]	; (800d0d8 <dhcp_inc_pcb_refcount+0x9c>)
 800d08e:	4618      	mov	r0, r3
 800d090:	f7ff fe34 	bl	800ccfc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800d094:	4b0c      	ldr	r3, [pc, #48]	; (800d0c8 <dhcp_inc_pcb_refcount+0x8c>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2243      	movs	r2, #67	; 0x43
 800d09a:	490f      	ldr	r1, [pc, #60]	; (800d0d8 <dhcp_inc_pcb_refcount+0x9c>)
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff feb5 	bl	800ce0c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800d0a2:	4b09      	ldr	r3, [pc, #36]	; (800d0c8 <dhcp_inc_pcb_refcount+0x8c>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	490c      	ldr	r1, [pc, #48]	; (800d0dc <dhcp_inc_pcb_refcount+0xa0>)
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff ff1c 	bl	800cee8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800d0b0:	4b04      	ldr	r3, [pc, #16]	; (800d0c4 <dhcp_inc_pcb_refcount+0x88>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	4b02      	ldr	r3, [pc, #8]	; (800d0c4 <dhcp_inc_pcb_refcount+0x88>)
 800d0ba:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	20000114 	.word	0x20000114
 800d0c8:	20000110 	.word	0x20000110
 800d0cc:	080147b0 	.word	0x080147b0
 800d0d0:	080147e8 	.word	0x080147e8
 800d0d4:	08014810 	.word	0x08014810
 800d0d8:	08015328 	.word	0x08015328
 800d0dc:	0800e9f5 	.word	0x0800e9f5

0800d0e0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800d0e4:	4b0e      	ldr	r3, [pc, #56]	; (800d120 <dhcp_dec_pcb_refcount+0x40>)
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d105      	bne.n	800d0f8 <dhcp_dec_pcb_refcount+0x18>
 800d0ec:	4b0d      	ldr	r3, [pc, #52]	; (800d124 <dhcp_dec_pcb_refcount+0x44>)
 800d0ee:	22ff      	movs	r2, #255	; 0xff
 800d0f0:	490d      	ldr	r1, [pc, #52]	; (800d128 <dhcp_dec_pcb_refcount+0x48>)
 800d0f2:	480e      	ldr	r0, [pc, #56]	; (800d12c <dhcp_dec_pcb_refcount+0x4c>)
 800d0f4:	f004 f9a0 	bl	8011438 <iprintf>
  dhcp_pcb_refcount--;
 800d0f8:	4b09      	ldr	r3, [pc, #36]	; (800d120 <dhcp_dec_pcb_refcount+0x40>)
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	b2da      	uxtb	r2, r3
 800d100:	4b07      	ldr	r3, [pc, #28]	; (800d120 <dhcp_dec_pcb_refcount+0x40>)
 800d102:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800d104:	4b06      	ldr	r3, [pc, #24]	; (800d120 <dhcp_dec_pcb_refcount+0x40>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d107      	bne.n	800d11c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800d10c:	4b08      	ldr	r3, [pc, #32]	; (800d130 <dhcp_dec_pcb_refcount+0x50>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4618      	mov	r0, r3
 800d112:	f7ff ff09 	bl	800cf28 <udp_remove>
    dhcp_pcb = NULL;
 800d116:	4b06      	ldr	r3, [pc, #24]	; (800d130 <dhcp_dec_pcb_refcount+0x50>)
 800d118:	2200      	movs	r2, #0
 800d11a:	601a      	str	r2, [r3, #0]
  }
}
 800d11c:	bf00      	nop
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	20000114 	.word	0x20000114
 800d124:	080147b0 	.word	0x080147b0
 800d128:	08014838 	.word	0x08014838
 800d12c:	08014810 	.word	0x08014810
 800d130:	20000110 	.word	0x20000110

0800d134 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d140:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800d142:	210c      	movs	r1, #12
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f001 f83b 	bl	800e1c0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800d14a:	4b06      	ldr	r3, [pc, #24]	; (800d164 <dhcp_handle_nak+0x30>)
 800d14c:	4a05      	ldr	r2, [pc, #20]	; (800d164 <dhcp_handle_nak+0x30>)
 800d14e:	4905      	ldr	r1, [pc, #20]	; (800d164 <dhcp_handle_nak+0x30>)
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f7f9 f8ff 	bl	8006354 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fc16 	bl	800d988 <dhcp_discover>
}
 800d15c:	bf00      	nop
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	08015328 	.word	0x08015328

0800d168 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d174:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800d176:	2108      	movs	r1, #8
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f001 f821 	bl	800e1c0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	331c      	adds	r3, #28
 800d182:	2200      	movs	r2, #0
 800d184:	4619      	mov	r1, r3
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f002 fb7e 	bl	800f888 <etharp_query>
 800d18c:	4603      	mov	r3, r0
 800d18e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	799b      	ldrb	r3, [r3, #6]
 800d194:	2bff      	cmp	r3, #255	; 0xff
 800d196:	d005      	beq.n	800d1a4 <dhcp_check+0x3c>
    dhcp->tries++;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	799b      	ldrb	r3, [r3, #6]
 800d19c:	3301      	adds	r3, #1
 800d19e:	b2da      	uxtb	r2, r3
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800d1a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d1a8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d1aa:	893b      	ldrh	r3, [r7, #8]
 800d1ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d1b0:	4a06      	ldr	r2, [pc, #24]	; (800d1cc <dhcp_check+0x64>)
 800d1b2:	fb82 1203 	smull	r1, r2, r2, r3
 800d1b6:	1152      	asrs	r2, r2, #5
 800d1b8:	17db      	asrs	r3, r3, #31
 800d1ba:	1ad3      	subs	r3, r2, r3
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800d1c2:	bf00      	nop
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	10624dd3 	.word	0x10624dd3

0800d1d0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800d1e0:	4b0c      	ldr	r3, [pc, #48]	; (800d214 <dhcp_handle_offer+0x44>)
 800d1e2:	789b      	ldrb	r3, [r3, #2]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d011      	beq.n	800d20c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800d1ee:	4b0a      	ldr	r3, [pc, #40]	; (800d218 <dhcp_handle_offer+0x48>)
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7f8 fa7f 	bl	80056f6 <lwip_htonl>
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	691a      	ldr	r2, [r3, #16]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f808 	bl	800d21c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800d20c:	bf00      	nop
 800d20e:	3710      	adds	r7, #16
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	20006e0c 	.word	0x20006e0c
 800d218:	20006e14 	.word	0x20006e14

0800d21c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800d21c:	b5b0      	push	{r4, r5, r7, lr}
 800d21e:	b08a      	sub	sp, #40	; 0x28
 800d220:	af02      	add	r7, sp, #8
 800d222:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d109      	bne.n	800d23e <dhcp_select+0x22>
 800d22a:	4b75      	ldr	r3, [pc, #468]	; (800d400 <dhcp_select+0x1e4>)
 800d22c:	f240 1277 	movw	r2, #375	; 0x177
 800d230:	4974      	ldr	r1, [pc, #464]	; (800d404 <dhcp_select+0x1e8>)
 800d232:	4875      	ldr	r0, [pc, #468]	; (800d408 <dhcp_select+0x1ec>)
 800d234:	f004 f900 	bl	8011438 <iprintf>
 800d238:	f06f 030f 	mvn.w	r3, #15
 800d23c:	e0dc      	b.n	800d3f8 <dhcp_select+0x1dc>
  dhcp = netif_dhcp_data(netif);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d242:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d109      	bne.n	800d25e <dhcp_select+0x42>
 800d24a:	4b6d      	ldr	r3, [pc, #436]	; (800d400 <dhcp_select+0x1e4>)
 800d24c:	f240 1279 	movw	r2, #377	; 0x179
 800d250:	496e      	ldr	r1, [pc, #440]	; (800d40c <dhcp_select+0x1f0>)
 800d252:	486d      	ldr	r0, [pc, #436]	; (800d408 <dhcp_select+0x1ec>)
 800d254:	f004 f8f0 	bl	8011438 <iprintf>
 800d258:	f06f 0305 	mvn.w	r3, #5
 800d25c:	e0cc      	b.n	800d3f8 <dhcp_select+0x1dc>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800d25e:	2101      	movs	r1, #1
 800d260:	69b8      	ldr	r0, [r7, #24]
 800d262:	f000 ffad 	bl	800e1c0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d266:	f107 030c 	add.w	r3, r7, #12
 800d26a:	2203      	movs	r2, #3
 800d26c:	69b9      	ldr	r1, [r7, #24]
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f001 fc8e 	bl	800eb90 <dhcp_create_msg>
 800d274:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 808e 	beq.w	800d39a <dhcp_select+0x17e>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d284:	89b8      	ldrh	r0, [r7, #12]
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d28c:	2302      	movs	r3, #2
 800d28e:	2239      	movs	r2, #57	; 0x39
 800d290:	f000 ffb0 	bl	800e1f4 <dhcp_option>
 800d294:	4603      	mov	r3, r0
 800d296:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d298:	89b8      	ldrh	r0, [r7, #12]
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	f000 ffff 	bl	800e2a8 <dhcp_option_short>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d2ae:	89b8      	ldrh	r0, [r7, #12]
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d2b6:	2304      	movs	r3, #4
 800d2b8:	2232      	movs	r2, #50	; 0x32
 800d2ba:	f000 ff9b 	bl	800e1f4 <dhcp_option>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d2c2:	89bc      	ldrh	r4, [r7, #12]
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7f8 fa11 	bl	80056f6 <lwip_htonl>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4629      	mov	r1, r5
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f001 f816 	bl	800e30c <dhcp_option_long>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d2e4:	89b8      	ldrh	r0, [r7, #12]
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d2ec:	2304      	movs	r3, #4
 800d2ee:	2236      	movs	r2, #54	; 0x36
 800d2f0:	f000 ff80 	bl	800e1f4 <dhcp_option>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800d2f8:	89bc      	ldrh	r4, [r7, #12]
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	4618      	mov	r0, r3
 800d306:	f7f8 f9f6 	bl	80056f6 <lwip_htonl>
 800d30a:	4603      	mov	r3, r0
 800d30c:	461a      	mov	r2, r3
 800d30e:	4629      	mov	r1, r5
 800d310:	4620      	mov	r0, r4
 800d312:	f000 fffb 	bl	800e30c <dhcp_option_long>
 800d316:	4603      	mov	r3, r0
 800d318:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d31a:	89b8      	ldrh	r0, [r7, #12]
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d322:	2303      	movs	r3, #3
 800d324:	2237      	movs	r2, #55	; 0x37
 800d326:	f000 ff65 	bl	800e1f4 <dhcp_option>
 800d32a:	4603      	mov	r3, r0
 800d32c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d32e:	2300      	movs	r3, #0
 800d330:	77bb      	strb	r3, [r7, #30]
 800d332:	e00e      	b.n	800d352 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d334:	89b8      	ldrh	r0, [r7, #12]
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d33c:	7fbb      	ldrb	r3, [r7, #30]
 800d33e:	4a34      	ldr	r2, [pc, #208]	; (800d410 <dhcp_select+0x1f4>)
 800d340:	5cd3      	ldrb	r3, [r2, r3]
 800d342:	461a      	mov	r2, r3
 800d344:	f000 ff8a 	bl	800e25c <dhcp_option_byte>
 800d348:	4603      	mov	r3, r0
 800d34a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d34c:	7fbb      	ldrb	r3, [r7, #30]
 800d34e:	3301      	adds	r3, #1
 800d350:	77bb      	strb	r3, [r7, #30]
 800d352:	7fbb      	ldrb	r3, [r7, #30]
 800d354:	2b02      	cmp	r3, #2
 800d356:	d9ed      	bls.n	800d334 <dhcp_select+0x118>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 800d358:	89b8      	ldrh	r0, [r7, #12]
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	33f0      	adds	r3, #240	; 0xf0
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	4619      	mov	r1, r3
 800d362:	f001 f817 	bl	800e394 <dhcp_option_hostname>
 800d366:	4603      	mov	r3, r0
 800d368:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d36a:	89b8      	ldrh	r0, [r7, #12]
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	33f0      	adds	r3, #240	; 0xf0
 800d370:	697a      	ldr	r2, [r7, #20]
 800d372:	4619      	mov	r1, r3
 800d374:	f001 fce2 	bl	800ed3c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d378:	4b26      	ldr	r3, [pc, #152]	; (800d414 <dhcp_select+0x1f8>)
 800d37a:	6818      	ldr	r0, [r3, #0]
 800d37c:	4b26      	ldr	r3, [pc, #152]	; (800d418 <dhcp_select+0x1fc>)
 800d37e:	9301      	str	r3, [sp, #4]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	2343      	movs	r3, #67	; 0x43
 800d386:	4a25      	ldr	r2, [pc, #148]	; (800d41c <dhcp_select+0x200>)
 800d388:	6979      	ldr	r1, [r7, #20]
 800d38a:	f7ff fbd1 	bl	800cb30 <udp_sendto_if_src>
 800d38e:	4603      	mov	r3, r0
 800d390:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d392:	6978      	ldr	r0, [r7, #20]
 800d394:	f7f9 fc56 	bl	8006c44 <pbuf_free>
 800d398:	e001      	b.n	800d39e <dhcp_select+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d39a:	23ff      	movs	r3, #255	; 0xff
 800d39c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	799b      	ldrb	r3, [r3, #6]
 800d3a2:	2bff      	cmp	r3, #255	; 0xff
 800d3a4:	d005      	beq.n	800d3b2 <dhcp_select+0x196>
    dhcp->tries++;
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	799b      	ldrb	r3, [r3, #6]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	b2da      	uxtb	r2, r3
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	799b      	ldrb	r3, [r3, #6]
 800d3b6:	2b05      	cmp	r3, #5
 800d3b8:	d80d      	bhi.n	800d3d6 <dhcp_select+0x1ba>
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	799b      	ldrb	r3, [r3, #6]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	4093      	lsls	r3, r2
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	0152      	lsls	r2, r2, #5
 800d3ca:	1ad2      	subs	r2, r2, r3
 800d3cc:	0092      	lsls	r2, r2, #2
 800d3ce:	4413      	add	r3, r2
 800d3d0:	00db      	lsls	r3, r3, #3
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	e001      	b.n	800d3da <dhcp_select+0x1be>
 800d3d6:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d3da:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d3dc:	89fb      	ldrh	r3, [r7, #14]
 800d3de:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d3e2:	4a0f      	ldr	r2, [pc, #60]	; (800d420 <dhcp_select+0x204>)
 800d3e4:	fb82 1203 	smull	r1, r2, r2, r3
 800d3e8:	1152      	asrs	r2, r2, #5
 800d3ea:	17db      	asrs	r3, r3, #31
 800d3ec:	1ad3      	subs	r3, r2, r3
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d3f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3720      	adds	r7, #32
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bdb0      	pop	{r4, r5, r7, pc}
 800d400:	080147b0 	.word	0x080147b0
 800d404:	0801485c 	.word	0x0801485c
 800d408:	08014810 	.word	0x08014810
 800d40c:	08014878 	.word	0x08014878
 800d410:	20000014 	.word	0x20000014
 800d414:	20000110 	.word	0x20000110
 800d418:	08015328 	.word	0x08015328
 800d41c:	0801532c 	.word	0x0801532c
 800d420:	10624dd3 	.word	0x10624dd3

0800d424 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800d42a:	4b27      	ldr	r3, [pc, #156]	; (800d4c8 <dhcp_coarse_tmr+0xa4>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	607b      	str	r3, [r7, #4]
 800d430:	e042      	b.n	800d4b8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d436:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d039      	beq.n	800d4b2 <dhcp_coarse_tmr+0x8e>
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	795b      	ldrb	r3, [r3, #5]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d035      	beq.n	800d4b2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	8a9b      	ldrh	r3, [r3, #20]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d012      	beq.n	800d474 <dhcp_coarse_tmr+0x50>
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	8a5b      	ldrh	r3, [r3, #18]
 800d452:	3301      	adds	r3, #1
 800d454:	b29a      	uxth	r2, r3
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	825a      	strh	r2, [r3, #18]
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	8a5a      	ldrh	r2, [r3, #18]
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	8a9b      	ldrh	r3, [r3, #20]
 800d462:	429a      	cmp	r2, r3
 800d464:	d106      	bne.n	800d474 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 fe10 	bl	800e08c <dhcp_release_and_stop>
        dhcp_start(netif);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 f96b 	bl	800d748 <dhcp_start>
 800d472:	e01e      	b.n	800d4b2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	8a1b      	ldrh	r3, [r3, #16]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00b      	beq.n	800d494 <dhcp_coarse_tmr+0x70>
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	8a1b      	ldrh	r3, [r3, #16]
 800d480:	1e5a      	subs	r2, r3, #1
 800d482:	b291      	uxth	r1, r2
 800d484:	683a      	ldr	r2, [r7, #0]
 800d486:	8211      	strh	r1, [r2, #16]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d103      	bne.n	800d494 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 f8c7 	bl	800d620 <dhcp_t2_timeout>
 800d492:	e00e      	b.n	800d4b2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	89db      	ldrh	r3, [r3, #14]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00a      	beq.n	800d4b2 <dhcp_coarse_tmr+0x8e>
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	89db      	ldrh	r3, [r3, #14]
 800d4a0:	1e5a      	subs	r2, r3, #1
 800d4a2:	b291      	uxth	r1, r2
 800d4a4:	683a      	ldr	r2, [r7, #0]
 800d4a6:	81d1      	strh	r1, [r2, #14]
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d102      	bne.n	800d4b2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 f888 	bl	800d5c2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	607b      	str	r3, [r7, #4]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d1b9      	bne.n	800d432 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800d4be:	bf00      	nop
 800d4c0:	bf00      	nop
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	20006de0 	.word	0x20006de0

0800d4cc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800d4d2:	4b16      	ldr	r3, [pc, #88]	; (800d52c <dhcp_fine_tmr+0x60>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	607b      	str	r3, [r7, #4]
 800d4d8:	e020      	b.n	800d51c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4de:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d017      	beq.n	800d516 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	891b      	ldrh	r3, [r3, #8]
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d906      	bls.n	800d4fc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	891b      	ldrh	r3, [r3, #8]
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	811a      	strh	r2, [r3, #8]
 800d4fa:	e00c      	b.n	800d516 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	891b      	ldrh	r3, [r3, #8]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d108      	bne.n	800d516 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	891b      	ldrh	r3, [r3, #8]
 800d508:	3b01      	subs	r3, #1
 800d50a:	b29a      	uxth	r2, r3
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f80d 	bl	800d530 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	607b      	str	r3, [r7, #4]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1db      	bne.n	800d4da <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800d522:	bf00      	nop
 800d524:	bf00      	nop
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	20006de0 	.word	0x20006de0

0800d530 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d53c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	795b      	ldrb	r3, [r3, #5]
 800d542:	2b0c      	cmp	r3, #12
 800d544:	d003      	beq.n	800d54e <dhcp_timeout+0x1e>
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	795b      	ldrb	r3, [r3, #5]
 800d54a:	2b06      	cmp	r3, #6
 800d54c:	d103      	bne.n	800d556 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 fa1a 	bl	800d988 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800d554:	e031      	b.n	800d5ba <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	795b      	ldrb	r3, [r3, #5]
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d10e      	bne.n	800d57c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	799b      	ldrb	r3, [r3, #6]
 800d562:	2b05      	cmp	r3, #5
 800d564:	d803      	bhi.n	800d56e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7ff fe58 	bl	800d21c <dhcp_select>
}
 800d56c:	e025      	b.n	800d5ba <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 fd8c 	bl	800e08c <dhcp_release_and_stop>
      dhcp_start(netif);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f8e7 	bl	800d748 <dhcp_start>
}
 800d57a:	e01e      	b.n	800d5ba <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	795b      	ldrb	r3, [r3, #5]
 800d580:	2b08      	cmp	r3, #8
 800d582:	d10b      	bne.n	800d59c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	799b      	ldrb	r3, [r3, #6]
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d803      	bhi.n	800d594 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f7ff fdeb 	bl	800d168 <dhcp_check>
}
 800d592:	e012      	b.n	800d5ba <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 fa99 	bl	800dacc <dhcp_bind>
}
 800d59a:	e00e      	b.n	800d5ba <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	795b      	ldrb	r3, [r3, #5]
 800d5a0:	2b03      	cmp	r3, #3
 800d5a2:	d10a      	bne.n	800d5ba <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	799b      	ldrb	r3, [r3, #6]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d803      	bhi.n	800d5b4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 fcaf 	bl	800df10 <dhcp_reboot>
}
 800d5b2:	e002      	b.n	800d5ba <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 f9e7 	bl	800d988 <dhcp_discover>
}
 800d5ba:	bf00      	nop
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b084      	sub	sp, #16
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	795b      	ldrb	r3, [r3, #5]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d007      	beq.n	800d5e8 <dhcp_t1_timeout+0x26>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	795b      	ldrb	r3, [r3, #5]
 800d5dc:	2b0a      	cmp	r3, #10
 800d5de:	d003      	beq.n	800d5e8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d5e4:	2b05      	cmp	r3, #5
 800d5e6:	d117      	bne.n	800d618 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fb49 	bl	800dc80 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	899b      	ldrh	r3, [r3, #12]
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	8a5b      	ldrh	r3, [r3, #18]
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	dd0c      	ble.n	800d618 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	899b      	ldrh	r3, [r3, #12]
 800d602:	461a      	mov	r2, r3
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	8a5b      	ldrh	r3, [r3, #18]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	da00      	bge.n	800d610 <dhcp_t1_timeout+0x4e>
 800d60e:	3301      	adds	r3, #1
 800d610:	105b      	asrs	r3, r3, #1
 800d612:	b29a      	uxth	r2, r3
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800d618:	bf00      	nop
 800d61a:	3710      	adds	r7, #16
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d62c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	795b      	ldrb	r3, [r3, #5]
 800d632:	2b01      	cmp	r3, #1
 800d634:	d00b      	beq.n	800d64e <dhcp_t2_timeout+0x2e>
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	795b      	ldrb	r3, [r3, #5]
 800d63a:	2b0a      	cmp	r3, #10
 800d63c:	d007      	beq.n	800d64e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d642:	2b05      	cmp	r3, #5
 800d644:	d003      	beq.n	800d64e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	795b      	ldrb	r3, [r3, #5]
 800d64a:	2b04      	cmp	r3, #4
 800d64c:	d117      	bne.n	800d67e <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 fbba 	bl	800ddc8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	8a9b      	ldrh	r3, [r3, #20]
 800d658:	461a      	mov	r2, r3
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	8a5b      	ldrh	r3, [r3, #18]
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	2b01      	cmp	r3, #1
 800d662:	dd0c      	ble.n	800d67e <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	8a9b      	ldrh	r3, [r3, #20]
 800d668:	461a      	mov	r2, r3
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	8a5b      	ldrh	r3, [r3, #18]
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	da00      	bge.n	800d676 <dhcp_t2_timeout+0x56>
 800d674:	3301      	adds	r3, #1
 800d676:	105b      	asrs	r3, r3, #1
 800d678:	b29a      	uxth	r2, r3
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800d67e:	bf00      	nop
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
	...

0800d688 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d696:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2200      	movs	r2, #0
 800d69c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800d6a4:	4b26      	ldr	r3, [pc, #152]	; (800d740 <dhcp_handle_ack+0xb8>)
 800d6a6:	78db      	ldrb	r3, [r3, #3]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d003      	beq.n	800d6b4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800d6ac:	4b25      	ldr	r3, [pc, #148]	; (800d744 <dhcp_handle_ack+0xbc>)
 800d6ae:	68da      	ldr	r2, [r3, #12]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800d6b4:	4b22      	ldr	r3, [pc, #136]	; (800d740 <dhcp_handle_ack+0xb8>)
 800d6b6:	791b      	ldrb	r3, [r3, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d004      	beq.n	800d6c6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800d6bc:	4b21      	ldr	r3, [pc, #132]	; (800d744 <dhcp_handle_ack+0xbc>)
 800d6be:	691a      	ldr	r2, [r3, #16]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	62da      	str	r2, [r3, #44]	; 0x2c
 800d6c4:	e004      	b.n	800d6d0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ca:	085a      	lsrs	r2, r3, #1
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800d6d0:	4b1b      	ldr	r3, [pc, #108]	; (800d740 <dhcp_handle_ack+0xb8>)
 800d6d2:	795b      	ldrb	r3, [r3, #5]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d004      	beq.n	800d6e2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800d6d8:	4b1a      	ldr	r3, [pc, #104]	; (800d744 <dhcp_handle_ack+0xbc>)
 800d6da:	695a      	ldr	r2, [r3, #20]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	631a      	str	r2, [r3, #48]	; 0x30
 800d6e0:	e007      	b.n	800d6f2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	00db      	lsls	r3, r3, #3
 800d6ea:	1a9b      	subs	r3, r3, r2
 800d6ec:	08da      	lsrs	r2, r3, #3
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	691a      	ldr	r2, [r3, #16]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800d6fa:	4b11      	ldr	r3, [pc, #68]	; (800d740 <dhcp_handle_ack+0xb8>)
 800d6fc:	799b      	ldrb	r3, [r3, #6]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d00b      	beq.n	800d71a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800d702:	4b10      	ldr	r3, [pc, #64]	; (800d744 <dhcp_handle_ack+0xbc>)
 800d704:	699b      	ldr	r3, [r3, #24]
 800d706:	4618      	mov	r0, r3
 800d708:	f7f7 fff5 	bl	80056f6 <lwip_htonl>
 800d70c:	4602      	mov	r2, r0
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2201      	movs	r2, #1
 800d716:	71da      	strb	r2, [r3, #7]
 800d718:	e002      	b.n	800d720 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800d720:	4b07      	ldr	r3, [pc, #28]	; (800d740 <dhcp_handle_ack+0xb8>)
 800d722:	79db      	ldrb	r3, [r3, #7]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d007      	beq.n	800d738 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800d728:	4b06      	ldr	r3, [pc, #24]	; (800d744 <dhcp_handle_ack+0xbc>)
 800d72a:	69db      	ldr	r3, [r3, #28]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7f7 ffe2 	bl	80056f6 <lwip_htonl>
 800d732:	4602      	mov	r2, r0
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800d738:	bf00      	nop
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	20006e0c 	.word	0x20006e0c
 800d744:	20006e14 	.word	0x20006e14

0800d748 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b084      	sub	sp, #16
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d109      	bne.n	800d76a <dhcp_start+0x22>
 800d756:	4b37      	ldr	r3, [pc, #220]	; (800d834 <dhcp_start+0xec>)
 800d758:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d75c:	4936      	ldr	r1, [pc, #216]	; (800d838 <dhcp_start+0xf0>)
 800d75e:	4837      	ldr	r0, [pc, #220]	; (800d83c <dhcp_start+0xf4>)
 800d760:	f003 fe6a 	bl	8011438 <iprintf>
 800d764:	f06f 030f 	mvn.w	r3, #15
 800d768:	e060      	b.n	800d82c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d770:	f003 0301 	and.w	r3, r3, #1
 800d774:	2b00      	cmp	r3, #0
 800d776:	d109      	bne.n	800d78c <dhcp_start+0x44>
 800d778:	4b2e      	ldr	r3, [pc, #184]	; (800d834 <dhcp_start+0xec>)
 800d77a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800d77e:	4930      	ldr	r1, [pc, #192]	; (800d840 <dhcp_start+0xf8>)
 800d780:	482e      	ldr	r0, [pc, #184]	; (800d83c <dhcp_start+0xf4>)
 800d782:	f003 fe59 	bl	8011438 <iprintf>
 800d786:	f06f 030f 	mvn.w	r3, #15
 800d78a:	e04f      	b.n	800d82c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d790:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d796:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800d79a:	d202      	bcs.n	800d7a2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800d79c:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a0:	e044      	b.n	800d82c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d10d      	bne.n	800d7c4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800d7a8:	2034      	movs	r0, #52	; 0x34
 800d7aa:	f7f8 fa77 	bl	8005c9c <mem_malloc>
 800d7ae:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d102      	bne.n	800d7bc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800d7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ba:	e037      	b.n	800d82c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	68fa      	ldr	r2, [r7, #12]
 800d7c0:	625a      	str	r2, [r3, #36]	; 0x24
 800d7c2:	e005      	b.n	800d7d0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	791b      	ldrb	r3, [r3, #4]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d001      	beq.n	800d7d0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800d7cc:	f7ff fc88 	bl	800d0e0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800d7d0:	2234      	movs	r2, #52	; 0x34
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f003 fe27 	bl	8011428 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800d7da:	f7ff fc2f 	bl	800d03c <dhcp_inc_pcb_refcount>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <dhcp_start+0xa2>
    return ERR_MEM;
 800d7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d7e8:	e020      	b.n	800d82c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d7f6:	f003 0304 	and.w	r3, r3, #4
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d105      	bne.n	800d80a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800d7fe:	2102      	movs	r1, #2
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f000 fcdd 	bl	800e1c0 <dhcp_set_state>
    return ERR_OK;
 800d806:	2300      	movs	r3, #0
 800d808:	e010      	b.n	800d82c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 f8bc 	bl	800d988 <dhcp_discover>
 800d810:	4603      	mov	r3, r0
 800d812:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800d814:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d005      	beq.n	800d828 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 fc35 	bl	800e08c <dhcp_release_and_stop>
    return ERR_MEM;
 800d822:	f04f 33ff 	mov.w	r3, #4294967295
 800d826:	e001      	b.n	800d82c <dhcp_start+0xe4>
  }
  return result;
 800d828:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	080147b0 	.word	0x080147b0
 800d838:	08014894 	.word	0x08014894
 800d83c:	08014810 	.word	0x08014810
 800d840:	080148d8 	.word	0x080148d8

0800d844 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d107      	bne.n	800d864 <dhcp_arp_reply+0x20>
 800d854:	4b0e      	ldr	r3, [pc, #56]	; (800d890 <dhcp_arp_reply+0x4c>)
 800d856:	f240 328b 	movw	r2, #907	; 0x38b
 800d85a:	490e      	ldr	r1, [pc, #56]	; (800d894 <dhcp_arp_reply+0x50>)
 800d85c:	480e      	ldr	r0, [pc, #56]	; (800d898 <dhcp_arp_reply+0x54>)
 800d85e:	f003 fdeb 	bl	8011438 <iprintf>
 800d862:	e012      	b.n	800d88a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d868:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00c      	beq.n	800d88a <dhcp_arp_reply+0x46>
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	795b      	ldrb	r3, [r3, #5]
 800d874:	2b08      	cmp	r3, #8
 800d876:	d108      	bne.n	800d88a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	69db      	ldr	r3, [r3, #28]
 800d880:	429a      	cmp	r2, r3
 800d882:	d102      	bne.n	800d88a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 f809 	bl	800d89c <dhcp_decline>
    }
  }
}
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	080147b0 	.word	0x080147b0
 800d894:	08014894 	.word	0x08014894
 800d898:	08014810 	.word	0x08014810

0800d89c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800d89c:	b5b0      	push	{r4, r5, r7, lr}
 800d89e:	b08a      	sub	sp, #40	; 0x28
 800d8a0:	af02      	add	r7, sp, #8
 800d8a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800d8aa:	210c      	movs	r1, #12
 800d8ac:	69b8      	ldr	r0, [r7, #24]
 800d8ae:	f000 fc87 	bl	800e1c0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800d8b2:	f107 030c 	add.w	r3, r7, #12
 800d8b6:	2204      	movs	r2, #4
 800d8b8:	69b9      	ldr	r1, [r7, #24]
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f001 f968 	bl	800eb90 <dhcp_create_msg>
 800d8c0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d035      	beq.n	800d934 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d8ce:	89b8      	ldrh	r0, [r7, #12]
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d8d6:	2304      	movs	r3, #4
 800d8d8:	2232      	movs	r2, #50	; 0x32
 800d8da:	f000 fc8b 	bl	800e1f4 <dhcp_option>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d8e2:	89bc      	ldrh	r4, [r7, #12]
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	69db      	ldr	r3, [r3, #28]
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7f7 ff01 	bl	80056f6 <lwip_htonl>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	f000 fd06 	bl	800e30c <dhcp_option_long>
 800d900:	4603      	mov	r3, r0
 800d902:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d904:	89b8      	ldrh	r0, [r7, #12]
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	33f0      	adds	r3, #240	; 0xf0
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	4619      	mov	r1, r3
 800d90e:	f001 fa15 	bl	800ed3c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d912:	4b19      	ldr	r3, [pc, #100]	; (800d978 <dhcp_decline+0xdc>)
 800d914:	6818      	ldr	r0, [r3, #0]
 800d916:	4b19      	ldr	r3, [pc, #100]	; (800d97c <dhcp_decline+0xe0>)
 800d918:	9301      	str	r3, [sp, #4]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	2343      	movs	r3, #67	; 0x43
 800d920:	4a17      	ldr	r2, [pc, #92]	; (800d980 <dhcp_decline+0xe4>)
 800d922:	6979      	ldr	r1, [r7, #20]
 800d924:	f7ff f904 	bl	800cb30 <udp_sendto_if_src>
 800d928:	4603      	mov	r3, r0
 800d92a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d92c:	6978      	ldr	r0, [r7, #20]
 800d92e:	f7f9 f989 	bl	8006c44 <pbuf_free>
 800d932:	e001      	b.n	800d938 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d934:	23ff      	movs	r3, #255	; 0xff
 800d936:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	799b      	ldrb	r3, [r3, #6]
 800d93c:	2bff      	cmp	r3, #255	; 0xff
 800d93e:	d005      	beq.n	800d94c <dhcp_decline+0xb0>
    dhcp->tries++;
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	799b      	ldrb	r3, [r3, #6]
 800d944:	3301      	adds	r3, #1
 800d946:	b2da      	uxtb	r2, r3
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800d94c:	f242 7310 	movw	r3, #10000	; 0x2710
 800d950:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d952:	89fb      	ldrh	r3, [r7, #14]
 800d954:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d958:	4a0a      	ldr	r2, [pc, #40]	; (800d984 <dhcp_decline+0xe8>)
 800d95a:	fb82 1203 	smull	r1, r2, r2, r3
 800d95e:	1152      	asrs	r2, r2, #5
 800d960:	17db      	asrs	r3, r3, #31
 800d962:	1ad3      	subs	r3, r2, r3
 800d964:	b29a      	uxth	r2, r3
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d96a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3720      	adds	r7, #32
 800d972:	46bd      	mov	sp, r7
 800d974:	bdb0      	pop	{r4, r5, r7, pc}
 800d976:	bf00      	nop
 800d978:	20000110 	.word	0x20000110
 800d97c:	08015328 	.word	0x08015328
 800d980:	0801532c 	.word	0x0801532c
 800d984:	10624dd3 	.word	0x10624dd3

0800d988 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b08a      	sub	sp, #40	; 0x28
 800d98c:	af02      	add	r7, sp, #8
 800d98e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d994:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800d996:	2300      	movs	r3, #0
 800d998:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	2200      	movs	r2, #0
 800d99e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800d9a0:	2106      	movs	r1, #6
 800d9a2:	69b8      	ldr	r0, [r7, #24]
 800d9a4:	f000 fc0c 	bl	800e1c0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800d9a8:	f107 0308 	add.w	r3, r7, #8
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	69b9      	ldr	r1, [r7, #24]
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f001 f8ed 	bl	800eb90 <dhcp_create_msg>
 800d9b6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d04b      	beq.n	800da56 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d9c4:	8938      	ldrh	r0, [r7, #8]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d9cc:	2302      	movs	r3, #2
 800d9ce:	2239      	movs	r2, #57	; 0x39
 800d9d0:	f000 fc10 	bl	800e1f4 <dhcp_option>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d9d8:	8938      	ldrh	r0, [r7, #8]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	f000 fc5f 	bl	800e2a8 <dhcp_option_short>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d9ee:	8938      	ldrh	r0, [r7, #8]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d9f6:	2303      	movs	r3, #3
 800d9f8:	2237      	movs	r2, #55	; 0x37
 800d9fa:	f000 fbfb 	bl	800e1f4 <dhcp_option>
 800d9fe:	4603      	mov	r3, r0
 800da00:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800da02:	2300      	movs	r3, #0
 800da04:	77fb      	strb	r3, [r7, #31]
 800da06:	e00e      	b.n	800da26 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800da08:	8938      	ldrh	r0, [r7, #8]
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800da10:	7ffb      	ldrb	r3, [r7, #31]
 800da12:	4a29      	ldr	r2, [pc, #164]	; (800dab8 <dhcp_discover+0x130>)
 800da14:	5cd3      	ldrb	r3, [r2, r3]
 800da16:	461a      	mov	r2, r3
 800da18:	f000 fc20 	bl	800e25c <dhcp_option_byte>
 800da1c:	4603      	mov	r3, r0
 800da1e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800da20:	7ffb      	ldrb	r3, [r7, #31]
 800da22:	3301      	adds	r3, #1
 800da24:	77fb      	strb	r3, [r7, #31]
 800da26:	7ffb      	ldrb	r3, [r7, #31]
 800da28:	2b02      	cmp	r3, #2
 800da2a:	d9ed      	bls.n	800da08 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800da2c:	8938      	ldrh	r0, [r7, #8]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	33f0      	adds	r3, #240	; 0xf0
 800da32:	693a      	ldr	r2, [r7, #16]
 800da34:	4619      	mov	r1, r3
 800da36:	f001 f981 	bl	800ed3c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800da3a:	4b20      	ldr	r3, [pc, #128]	; (800dabc <dhcp_discover+0x134>)
 800da3c:	6818      	ldr	r0, [r3, #0]
 800da3e:	4b20      	ldr	r3, [pc, #128]	; (800dac0 <dhcp_discover+0x138>)
 800da40:	9301      	str	r3, [sp, #4]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	2343      	movs	r3, #67	; 0x43
 800da48:	4a1e      	ldr	r2, [pc, #120]	; (800dac4 <dhcp_discover+0x13c>)
 800da4a:	6939      	ldr	r1, [r7, #16]
 800da4c:	f7ff f870 	bl	800cb30 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800da50:	6938      	ldr	r0, [r7, #16]
 800da52:	f7f9 f8f7 	bl	8006c44 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	799b      	ldrb	r3, [r3, #6]
 800da5a:	2bff      	cmp	r3, #255	; 0xff
 800da5c:	d005      	beq.n	800da6a <dhcp_discover+0xe2>
    dhcp->tries++;
 800da5e:	69bb      	ldr	r3, [r7, #24]
 800da60:	799b      	ldrb	r3, [r3, #6]
 800da62:	3301      	adds	r3, #1
 800da64:	b2da      	uxtb	r2, r3
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	799b      	ldrb	r3, [r3, #6]
 800da6e:	2b05      	cmp	r3, #5
 800da70:	d80d      	bhi.n	800da8e <dhcp_discover+0x106>
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	799b      	ldrb	r3, [r3, #6]
 800da76:	461a      	mov	r2, r3
 800da78:	2301      	movs	r3, #1
 800da7a:	4093      	lsls	r3, r2
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	461a      	mov	r2, r3
 800da80:	0152      	lsls	r2, r2, #5
 800da82:	1ad2      	subs	r2, r2, r3
 800da84:	0092      	lsls	r2, r2, #2
 800da86:	4413      	add	r3, r2
 800da88:	00db      	lsls	r3, r3, #3
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	e001      	b.n	800da92 <dhcp_discover+0x10a>
 800da8e:	f64e 2360 	movw	r3, #60000	; 0xea60
 800da92:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800da94:	897b      	ldrh	r3, [r7, #10]
 800da96:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800da9a:	4a0b      	ldr	r2, [pc, #44]	; (800dac8 <dhcp_discover+0x140>)
 800da9c:	fb82 1203 	smull	r1, r2, r2, r3
 800daa0:	1152      	asrs	r2, r2, #5
 800daa2:	17db      	asrs	r3, r3, #31
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800daac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3720      	adds	r7, #32
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	20000014 	.word	0x20000014
 800dabc:	20000110 	.word	0x20000110
 800dac0:	08015328 	.word	0x08015328
 800dac4:	0801532c 	.word	0x0801532c
 800dac8:	10624dd3 	.word	0x10624dd3

0800dacc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b088      	sub	sp, #32
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d107      	bne.n	800daea <dhcp_bind+0x1e>
 800dada:	4b64      	ldr	r3, [pc, #400]	; (800dc6c <dhcp_bind+0x1a0>)
 800dadc:	f240 4215 	movw	r2, #1045	; 0x415
 800dae0:	4963      	ldr	r1, [pc, #396]	; (800dc70 <dhcp_bind+0x1a4>)
 800dae2:	4864      	ldr	r0, [pc, #400]	; (800dc74 <dhcp_bind+0x1a8>)
 800dae4:	f003 fca8 	bl	8011438 <iprintf>
 800dae8:	e0bc      	b.n	800dc64 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daee:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d107      	bne.n	800db06 <dhcp_bind+0x3a>
 800daf6:	4b5d      	ldr	r3, [pc, #372]	; (800dc6c <dhcp_bind+0x1a0>)
 800daf8:	f240 4217 	movw	r2, #1047	; 0x417
 800dafc:	495e      	ldr	r1, [pc, #376]	; (800dc78 <dhcp_bind+0x1ac>)
 800dafe:	485d      	ldr	r0, [pc, #372]	; (800dc74 <dhcp_bind+0x1a8>)
 800db00:	f003 fc9a 	bl	8011438 <iprintf>
 800db04:	e0ae      	b.n	800dc64 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	2200      	movs	r2, #0
 800db0a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db14:	d019      	beq.n	800db4a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db1a:	331e      	adds	r3, #30
 800db1c:	4a57      	ldr	r2, [pc, #348]	; (800dc7c <dhcp_bind+0x1b0>)
 800db1e:	fba2 2303 	umull	r2, r3, r2, r3
 800db22:	095b      	lsrs	r3, r3, #5
 800db24:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800db26:	69fb      	ldr	r3, [r7, #28]
 800db28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db2c:	d302      	bcc.n	800db34 <dhcp_bind+0x68>
      timeout = 0xffff;
 800db2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db32:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	b29a      	uxth	r2, r3
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800db3c:	69bb      	ldr	r3, [r7, #24]
 800db3e:	8a9b      	ldrh	r3, [r3, #20]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d102      	bne.n	800db4a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	2201      	movs	r2, #1
 800db48:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db52:	d01d      	beq.n	800db90 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db58:	331e      	adds	r3, #30
 800db5a:	4a48      	ldr	r2, [pc, #288]	; (800dc7c <dhcp_bind+0x1b0>)
 800db5c:	fba2 2303 	umull	r2, r3, r2, r3
 800db60:	095b      	lsrs	r3, r3, #5
 800db62:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db6a:	d302      	bcc.n	800db72 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800db6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db70:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	b29a      	uxth	r2, r3
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	895b      	ldrh	r3, [r3, #10]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d102      	bne.n	800db88 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	2201      	movs	r2, #1
 800db86:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	895a      	ldrh	r2, [r3, #10]
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db98:	d01d      	beq.n	800dbd6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db9e:	331e      	adds	r3, #30
 800dba0:	4a36      	ldr	r2, [pc, #216]	; (800dc7c <dhcp_bind+0x1b0>)
 800dba2:	fba2 2303 	umull	r2, r3, r2, r3
 800dba6:	095b      	lsrs	r3, r3, #5
 800dba8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbb0:	d302      	bcc.n	800dbb8 <dhcp_bind+0xec>
      timeout = 0xffff;
 800dbb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dbb6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	899b      	ldrh	r3, [r3, #12]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d102      	bne.n	800dbce <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800dbc8:	69bb      	ldr	r3, [r7, #24]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	899a      	ldrh	r2, [r3, #12]
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	895a      	ldrh	r2, [r3, #10]
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	899b      	ldrh	r3, [r3, #12]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d306      	bcc.n	800dbf0 <dhcp_bind+0x124>
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	899b      	ldrh	r3, [r3, #12]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d002      	beq.n	800dbf0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	2200      	movs	r2, #0
 800dbee:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800dbf0:	69bb      	ldr	r3, [r7, #24]
 800dbf2:	79db      	ldrb	r3, [r3, #7]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d003      	beq.n	800dc00 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	6a1b      	ldr	r3, [r3, #32]
 800dbfc:	613b      	str	r3, [r7, #16]
 800dbfe:	e014      	b.n	800dc2a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	331c      	adds	r3, #28
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800dc08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	db02      	blt.n	800dc16 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800dc10:	23ff      	movs	r3, #255	; 0xff
 800dc12:	613b      	str	r3, [r7, #16]
 800dc14:	e009      	b.n	800dc2a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800dc16:	7dfb      	ldrb	r3, [r7, #23]
 800dc18:	2bbf      	cmp	r3, #191	; 0xbf
 800dc1a:	d903      	bls.n	800dc24 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800dc1c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800dc20:	613b      	str	r3, [r7, #16]
 800dc22:	e002      	b.n	800dc2a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800dc24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc28:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d108      	bne.n	800dc48 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	69da      	ldr	r2, [r3, #28]
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dc46:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800dc48:	210a      	movs	r1, #10
 800dc4a:	69b8      	ldr	r0, [r7, #24]
 800dc4c:	f000 fab8 	bl	800e1c0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800dc50:	69bb      	ldr	r3, [r7, #24]
 800dc52:	f103 011c 	add.w	r1, r3, #28
 800dc56:	f107 030c 	add.w	r3, r7, #12
 800dc5a:	f107 0210 	add.w	r2, r7, #16
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f7f8 fb78 	bl	8006354 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800dc64:	3720      	adds	r7, #32
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	080147b0 	.word	0x080147b0
 800dc70:	08014910 	.word	0x08014910
 800dc74:	08014810 	.word	0x08014810
 800dc78:	0801492c 	.word	0x0801492c
 800dc7c:	88888889 	.word	0x88888889

0800dc80 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b08a      	sub	sp, #40	; 0x28
 800dc84:	af02      	add	r7, sp, #8
 800dc86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800dc8e:	2105      	movs	r1, #5
 800dc90:	69b8      	ldr	r0, [r7, #24]
 800dc92:	f000 fa95 	bl	800e1c0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800dc96:	f107 030c 	add.w	r3, r7, #12
 800dc9a:	2203      	movs	r2, #3
 800dc9c:	69b9      	ldr	r1, [r7, #24]
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f000 ff76 	bl	800eb90 <dhcp_create_msg>
 800dca4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d057      	beq.n	800dd5c <dhcp_renew+0xdc>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800dcb2:	89b8      	ldrh	r0, [r7, #12]
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dcba:	2302      	movs	r3, #2
 800dcbc:	2239      	movs	r2, #57	; 0x39
 800dcbe:	f000 fa99 	bl	800e1f4 <dhcp_option>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800dcc6:	89b8      	ldrh	r0, [r7, #12]
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	f000 fae8 	bl	800e2a8 <dhcp_option_short>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800dcdc:	89b8      	ldrh	r0, [r7, #12]
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dce4:	2303      	movs	r3, #3
 800dce6:	2237      	movs	r2, #55	; 0x37
 800dce8:	f000 fa84 	bl	800e1f4 <dhcp_option>
 800dcec:	4603      	mov	r3, r0
 800dcee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	77bb      	strb	r3, [r7, #30]
 800dcf4:	e00e      	b.n	800dd14 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800dcf6:	89b8      	ldrh	r0, [r7, #12]
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dcfe:	7fbb      	ldrb	r3, [r7, #30]
 800dd00:	4a2e      	ldr	r2, [pc, #184]	; (800ddbc <dhcp_renew+0x13c>)
 800dd02:	5cd3      	ldrb	r3, [r2, r3]
 800dd04:	461a      	mov	r2, r3
 800dd06:	f000 faa9 	bl	800e25c <dhcp_option_byte>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800dd0e:	7fbb      	ldrb	r3, [r7, #30]
 800dd10:	3301      	adds	r3, #1
 800dd12:	77bb      	strb	r3, [r7, #30]
 800dd14:	7fbb      	ldrb	r3, [r7, #30]
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	d9ed      	bls.n	800dcf6 <dhcp_renew+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 800dd1a:	89b8      	ldrh	r0, [r7, #12]
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	33f0      	adds	r3, #240	; 0xf0
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	4619      	mov	r1, r3
 800dd24:	f000 fb36 	bl	800e394 <dhcp_option_hostname>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800dd2c:	89b8      	ldrh	r0, [r7, #12]
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	33f0      	adds	r3, #240	; 0xf0
 800dd32:	697a      	ldr	r2, [r7, #20]
 800dd34:	4619      	mov	r1, r3
 800dd36:	f001 f801 	bl	800ed3c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800dd3a:	4b21      	ldr	r3, [pc, #132]	; (800ddc0 <dhcp_renew+0x140>)
 800dd3c:	6818      	ldr	r0, [r3, #0]
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	f103 0218 	add.w	r2, r3, #24
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	9300      	str	r3, [sp, #0]
 800dd48:	2343      	movs	r3, #67	; 0x43
 800dd4a:	6979      	ldr	r1, [r7, #20]
 800dd4c:	f7fe fe7c 	bl	800ca48 <udp_sendto_if>
 800dd50:	4603      	mov	r3, r0
 800dd52:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800dd54:	6978      	ldr	r0, [r7, #20]
 800dd56:	f7f8 ff75 	bl	8006c44 <pbuf_free>
 800dd5a:	e001      	b.n	800dd60 <dhcp_renew+0xe0>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800dd5c:	23ff      	movs	r3, #255	; 0xff
 800dd5e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800dd60:	69bb      	ldr	r3, [r7, #24]
 800dd62:	799b      	ldrb	r3, [r3, #6]
 800dd64:	2bff      	cmp	r3, #255	; 0xff
 800dd66:	d005      	beq.n	800dd74 <dhcp_renew+0xf4>
    dhcp->tries++;
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	799b      	ldrb	r3, [r3, #6]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	b2da      	uxtb	r2, r3
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	799b      	ldrb	r3, [r3, #6]
 800dd78:	2b09      	cmp	r3, #9
 800dd7a:	d80a      	bhi.n	800dd92 <dhcp_renew+0x112>
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	799b      	ldrb	r3, [r3, #6]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	461a      	mov	r2, r3
 800dd84:	0152      	lsls	r2, r2, #5
 800dd86:	1ad2      	subs	r2, r2, r3
 800dd88:	0092      	lsls	r2, r2, #2
 800dd8a:	4413      	add	r3, r2
 800dd8c:	011b      	lsls	r3, r3, #4
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	e001      	b.n	800dd96 <dhcp_renew+0x116>
 800dd92:	f644 6320 	movw	r3, #20000	; 0x4e20
 800dd96:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800dd98:	89fb      	ldrh	r3, [r7, #14]
 800dd9a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800dd9e:	4a09      	ldr	r2, [pc, #36]	; (800ddc4 <dhcp_renew+0x144>)
 800dda0:	fb82 1203 	smull	r1, r2, r2, r3
 800dda4:	1152      	asrs	r2, r2, #5
 800dda6:	17db      	asrs	r3, r3, #31
 800dda8:	1ad3      	subs	r3, r2, r3
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	69bb      	ldr	r3, [r7, #24]
 800ddae:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ddb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3720      	adds	r7, #32
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	20000014 	.word	0x20000014
 800ddc0:	20000110 	.word	0x20000110
 800ddc4:	10624dd3 	.word	0x10624dd3

0800ddc8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b08a      	sub	sp, #40	; 0x28
 800ddcc:	af02      	add	r7, sp, #8
 800ddce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800ddd6:	2104      	movs	r1, #4
 800ddd8:	69b8      	ldr	r0, [r7, #24]
 800ddda:	f000 f9f1 	bl	800e1c0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ddde:	f107 030c 	add.w	r3, r7, #12
 800dde2:	2203      	movs	r2, #3
 800dde4:	69b9      	ldr	r1, [r7, #24]
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 fed2 	bl	800eb90 <dhcp_create_msg>
 800ddec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d055      	beq.n	800dea0 <dhcp_rebind+0xd8>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ddfa:	89b8      	ldrh	r0, [r7, #12]
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800de02:	2302      	movs	r3, #2
 800de04:	2239      	movs	r2, #57	; 0x39
 800de06:	f000 f9f5 	bl	800e1f4 <dhcp_option>
 800de0a:	4603      	mov	r3, r0
 800de0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800de0e:	89b8      	ldrh	r0, [r7, #12]
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800de1a:	461a      	mov	r2, r3
 800de1c:	f000 fa44 	bl	800e2a8 <dhcp_option_short>
 800de20:	4603      	mov	r3, r0
 800de22:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800de24:	89b8      	ldrh	r0, [r7, #12]
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800de2c:	2303      	movs	r3, #3
 800de2e:	2237      	movs	r2, #55	; 0x37
 800de30:	f000 f9e0 	bl	800e1f4 <dhcp_option>
 800de34:	4603      	mov	r3, r0
 800de36:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800de38:	2300      	movs	r3, #0
 800de3a:	77bb      	strb	r3, [r7, #30]
 800de3c:	e00e      	b.n	800de5c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800de3e:	89b8      	ldrh	r0, [r7, #12]
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800de46:	7fbb      	ldrb	r3, [r7, #30]
 800de48:	4a2d      	ldr	r2, [pc, #180]	; (800df00 <dhcp_rebind+0x138>)
 800de4a:	5cd3      	ldrb	r3, [r2, r3]
 800de4c:	461a      	mov	r2, r3
 800de4e:	f000 fa05 	bl	800e25c <dhcp_option_byte>
 800de52:	4603      	mov	r3, r0
 800de54:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800de56:	7fbb      	ldrb	r3, [r7, #30]
 800de58:	3301      	adds	r3, #1
 800de5a:	77bb      	strb	r3, [r7, #30]
 800de5c:	7fbb      	ldrb	r3, [r7, #30]
 800de5e:	2b02      	cmp	r3, #2
 800de60:	d9ed      	bls.n	800de3e <dhcp_rebind+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 800de62:	89b8      	ldrh	r0, [r7, #12]
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	33f0      	adds	r3, #240	; 0xf0
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	4619      	mov	r1, r3
 800de6c:	f000 fa92 	bl	800e394 <dhcp_option_hostname>
 800de70:	4603      	mov	r3, r0
 800de72:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800de74:	89b8      	ldrh	r0, [r7, #12]
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	33f0      	adds	r3, #240	; 0xf0
 800de7a:	697a      	ldr	r2, [r7, #20]
 800de7c:	4619      	mov	r1, r3
 800de7e:	f000 ff5d 	bl	800ed3c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800de82:	4b20      	ldr	r3, [pc, #128]	; (800df04 <dhcp_rebind+0x13c>)
 800de84:	6818      	ldr	r0, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	2343      	movs	r3, #67	; 0x43
 800de8c:	4a1e      	ldr	r2, [pc, #120]	; (800df08 <dhcp_rebind+0x140>)
 800de8e:	6979      	ldr	r1, [r7, #20]
 800de90:	f7fe fdda 	bl	800ca48 <udp_sendto_if>
 800de94:	4603      	mov	r3, r0
 800de96:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800de98:	6978      	ldr	r0, [r7, #20]
 800de9a:	f7f8 fed3 	bl	8006c44 <pbuf_free>
 800de9e:	e001      	b.n	800dea4 <dhcp_rebind+0xdc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800dea0:	23ff      	movs	r3, #255	; 0xff
 800dea2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	799b      	ldrb	r3, [r3, #6]
 800dea8:	2bff      	cmp	r3, #255	; 0xff
 800deaa:	d005      	beq.n	800deb8 <dhcp_rebind+0xf0>
    dhcp->tries++;
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	799b      	ldrb	r3, [r3, #6]
 800deb0:	3301      	adds	r3, #1
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	69bb      	ldr	r3, [r7, #24]
 800deb6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	799b      	ldrb	r3, [r3, #6]
 800debc:	2b09      	cmp	r3, #9
 800debe:	d80a      	bhi.n	800ded6 <dhcp_rebind+0x10e>
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	799b      	ldrb	r3, [r3, #6]
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	461a      	mov	r2, r3
 800dec8:	0152      	lsls	r2, r2, #5
 800deca:	1ad2      	subs	r2, r2, r3
 800decc:	0092      	lsls	r2, r2, #2
 800dece:	4413      	add	r3, r2
 800ded0:	00db      	lsls	r3, r3, #3
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	e001      	b.n	800deda <dhcp_rebind+0x112>
 800ded6:	f242 7310 	movw	r3, #10000	; 0x2710
 800deda:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800dedc:	89fb      	ldrh	r3, [r7, #14]
 800dede:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800dee2:	4a0a      	ldr	r2, [pc, #40]	; (800df0c <dhcp_rebind+0x144>)
 800dee4:	fb82 1203 	smull	r1, r2, r2, r3
 800dee8:	1152      	asrs	r2, r2, #5
 800deea:	17db      	asrs	r3, r3, #31
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	b29a      	uxth	r2, r3
 800def0:	69bb      	ldr	r3, [r7, #24]
 800def2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800def4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800def8:	4618      	mov	r0, r3
 800defa:	3720      	adds	r7, #32
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}
 800df00:	20000014 	.word	0x20000014
 800df04:	20000110 	.word	0x20000110
 800df08:	0801532c 	.word	0x0801532c
 800df0c:	10624dd3 	.word	0x10624dd3

0800df10 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800df10:	b5b0      	push	{r4, r5, r7, lr}
 800df12:	b08a      	sub	sp, #40	; 0x28
 800df14:	af02      	add	r7, sp, #8
 800df16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800df1e:	2103      	movs	r1, #3
 800df20:	69b8      	ldr	r0, [r7, #24]
 800df22:	f000 f94d 	bl	800e1c0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800df26:	f107 030c 	add.w	r3, r7, #12
 800df2a:	2203      	movs	r2, #3
 800df2c:	69b9      	ldr	r1, [r7, #24]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 fe2e 	bl	800eb90 <dhcp_create_msg>
 800df34:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d06f      	beq.n	800e01c <dhcp_reboot+0x10c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800df42:	89b8      	ldrh	r0, [r7, #12]
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800df4a:	2302      	movs	r3, #2
 800df4c:	2239      	movs	r2, #57	; 0x39
 800df4e:	f000 f951 	bl	800e1f4 <dhcp_option>
 800df52:	4603      	mov	r3, r0
 800df54:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800df56:	89b8      	ldrh	r0, [r7, #12]
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	33f0      	adds	r3, #240	; 0xf0
 800df5c:	f44f 7210 	mov.w	r2, #576	; 0x240
 800df60:	4619      	mov	r1, r3
 800df62:	f000 f9a1 	bl	800e2a8 <dhcp_option_short>
 800df66:	4603      	mov	r3, r0
 800df68:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800df6a:	89b8      	ldrh	r0, [r7, #12]
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800df72:	2304      	movs	r3, #4
 800df74:	2232      	movs	r2, #50	; 0x32
 800df76:	f000 f93d 	bl	800e1f4 <dhcp_option>
 800df7a:	4603      	mov	r3, r0
 800df7c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800df7e:	89bc      	ldrh	r4, [r7, #12]
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	69db      	ldr	r3, [r3, #28]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7f7 fbb3 	bl	80056f6 <lwip_htonl>
 800df90:	4603      	mov	r3, r0
 800df92:	461a      	mov	r2, r3
 800df94:	4629      	mov	r1, r5
 800df96:	4620      	mov	r0, r4
 800df98:	f000 f9b8 	bl	800e30c <dhcp_option_long>
 800df9c:	4603      	mov	r3, r0
 800df9e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800dfa0:	89b8      	ldrh	r0, [r7, #12]
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dfa8:	2303      	movs	r3, #3
 800dfaa:	2237      	movs	r2, #55	; 0x37
 800dfac:	f000 f922 	bl	800e1f4 <dhcp_option>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	77bb      	strb	r3, [r7, #30]
 800dfb8:	e00e      	b.n	800dfd8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800dfba:	89b8      	ldrh	r0, [r7, #12]
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dfc2:	7fbb      	ldrb	r3, [r7, #30]
 800dfc4:	4a2d      	ldr	r2, [pc, #180]	; (800e07c <dhcp_reboot+0x16c>)
 800dfc6:	5cd3      	ldrb	r3, [r2, r3]
 800dfc8:	461a      	mov	r2, r3
 800dfca:	f000 f947 	bl	800e25c <dhcp_option_byte>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800dfd2:	7fbb      	ldrb	r3, [r7, #30]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	77bb      	strb	r3, [r7, #30]
 800dfd8:	7fbb      	ldrb	r3, [r7, #30]
 800dfda:	2b02      	cmp	r3, #2
 800dfdc:	d9ed      	bls.n	800dfba <dhcp_reboot+0xaa>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 800dfde:	89b8      	ldrh	r0, [r7, #12]
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	33f0      	adds	r3, #240	; 0xf0
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	f000 f9d4 	bl	800e394 <dhcp_option_hostname>
 800dfec:	4603      	mov	r3, r0
 800dfee:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800dff0:	89b8      	ldrh	r0, [r7, #12]
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	33f0      	adds	r3, #240	; 0xf0
 800dff6:	697a      	ldr	r2, [r7, #20]
 800dff8:	4619      	mov	r1, r3
 800dffa:	f000 fe9f 	bl	800ed3c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800dffe:	4b20      	ldr	r3, [pc, #128]	; (800e080 <dhcp_reboot+0x170>)
 800e000:	6818      	ldr	r0, [r3, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	2343      	movs	r3, #67	; 0x43
 800e008:	4a1e      	ldr	r2, [pc, #120]	; (800e084 <dhcp_reboot+0x174>)
 800e00a:	6979      	ldr	r1, [r7, #20]
 800e00c:	f7fe fd1c 	bl	800ca48 <udp_sendto_if>
 800e010:	4603      	mov	r3, r0
 800e012:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e014:	6978      	ldr	r0, [r7, #20]
 800e016:	f7f8 fe15 	bl	8006c44 <pbuf_free>
 800e01a:	e001      	b.n	800e020 <dhcp_reboot+0x110>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e01c:	23ff      	movs	r3, #255	; 0xff
 800e01e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	799b      	ldrb	r3, [r3, #6]
 800e024:	2bff      	cmp	r3, #255	; 0xff
 800e026:	d005      	beq.n	800e034 <dhcp_reboot+0x124>
    dhcp->tries++;
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	799b      	ldrb	r3, [r3, #6]
 800e02c:	3301      	adds	r3, #1
 800e02e:	b2da      	uxtb	r2, r3
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	799b      	ldrb	r3, [r3, #6]
 800e038:	2b09      	cmp	r3, #9
 800e03a:	d80a      	bhi.n	800e052 <dhcp_reboot+0x142>
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	799b      	ldrb	r3, [r3, #6]
 800e040:	b29b      	uxth	r3, r3
 800e042:	461a      	mov	r2, r3
 800e044:	0152      	lsls	r2, r2, #5
 800e046:	1ad2      	subs	r2, r2, r3
 800e048:	0092      	lsls	r2, r2, #2
 800e04a:	4413      	add	r3, r2
 800e04c:	00db      	lsls	r3, r3, #3
 800e04e:	b29b      	uxth	r3, r3
 800e050:	e001      	b.n	800e056 <dhcp_reboot+0x146>
 800e052:	f242 7310 	movw	r3, #10000	; 0x2710
 800e056:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e058:	89fb      	ldrh	r3, [r7, #14]
 800e05a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e05e:	4a0a      	ldr	r2, [pc, #40]	; (800e088 <dhcp_reboot+0x178>)
 800e060:	fb82 1203 	smull	r1, r2, r2, r3
 800e064:	1152      	asrs	r2, r2, #5
 800e066:	17db      	asrs	r3, r3, #31
 800e068:	1ad3      	subs	r3, r2, r3
 800e06a:	b29a      	uxth	r2, r3
 800e06c:	69bb      	ldr	r3, [r7, #24]
 800e06e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e070:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3720      	adds	r7, #32
 800e078:	46bd      	mov	sp, r7
 800e07a:	bdb0      	pop	{r4, r5, r7, pc}
 800e07c:	20000014 	.word	0x20000014
 800e080:	20000110 	.word	0x20000110
 800e084:	0801532c 	.word	0x0801532c
 800e088:	10624dd3 	.word	0x10624dd3

0800e08c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800e08c:	b5b0      	push	{r4, r5, r7, lr}
 800e08e:	b08a      	sub	sp, #40	; 0x28
 800e090:	af02      	add	r7, sp, #8
 800e092:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e098:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f000 8084 	beq.w	800e1aa <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	795b      	ldrb	r3, [r3, #5]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	f000 8081 	beq.w	800e1ae <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	699b      	ldr	r3, [r3, #24]
 800e0b0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	631a      	str	r2, [r3, #48]	; 0x30
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	62da      	str	r2, [r3, #44]	; 0x2c
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	829a      	strh	r2, [r3, #20]
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	8a9a      	ldrh	r2, [r3, #20]
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	825a      	strh	r2, [r3, #18]
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	8a5a      	ldrh	r2, [r3, #18]
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	821a      	strh	r2, [r3, #16]
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	8a1a      	ldrh	r2, [r3, #16]
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 fe4a 	bl	800ed98 <dhcp_supplied_address>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d03b      	beq.n	800e182 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800e10a:	f107 030e 	add.w	r3, r7, #14
 800e10e:	2207      	movs	r2, #7
 800e110:	69f9      	ldr	r1, [r7, #28]
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 fd3c 	bl	800eb90 <dhcp_create_msg>
 800e118:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d030      	beq.n	800e182 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e126:	89f8      	ldrh	r0, [r7, #14]
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e12e:	2304      	movs	r3, #4
 800e130:	2236      	movs	r2, #54	; 0x36
 800e132:	f000 f85f 	bl	800e1f4 <dhcp_option>
 800e136:	4603      	mov	r3, r0
 800e138:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800e13a:	89fc      	ldrh	r4, [r7, #14]
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	4618      	mov	r0, r3
 800e146:	f7f7 fad6 	bl	80056f6 <lwip_htonl>
 800e14a:	4603      	mov	r3, r0
 800e14c:	461a      	mov	r2, r3
 800e14e:	4629      	mov	r1, r5
 800e150:	4620      	mov	r0, r4
 800e152:	f000 f8db 	bl	800e30c <dhcp_option_long>
 800e156:	4603      	mov	r3, r0
 800e158:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e15a:	89f8      	ldrh	r0, [r7, #14]
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	33f0      	adds	r3, #240	; 0xf0
 800e160:	69ba      	ldr	r2, [r7, #24]
 800e162:	4619      	mov	r1, r3
 800e164:	f000 fdea 	bl	800ed3c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e168:	4b13      	ldr	r3, [pc, #76]	; (800e1b8 <dhcp_release_and_stop+0x12c>)
 800e16a:	6818      	ldr	r0, [r3, #0]
 800e16c:	f107 0210 	add.w	r2, r7, #16
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	9300      	str	r3, [sp, #0]
 800e174:	2343      	movs	r3, #67	; 0x43
 800e176:	69b9      	ldr	r1, [r7, #24]
 800e178:	f7fe fc66 	bl	800ca48 <udp_sendto_if>
      pbuf_free(p_out);
 800e17c:	69b8      	ldr	r0, [r7, #24]
 800e17e:	f7f8 fd61 	bl	8006c44 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e182:	4b0e      	ldr	r3, [pc, #56]	; (800e1bc <dhcp_release_and_stop+0x130>)
 800e184:	4a0d      	ldr	r2, [pc, #52]	; (800e1bc <dhcp_release_and_stop+0x130>)
 800e186:	490d      	ldr	r1, [pc, #52]	; (800e1bc <dhcp_release_and_stop+0x130>)
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f7f8 f8e3 	bl	8006354 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800e18e:	2100      	movs	r1, #0
 800e190:	69f8      	ldr	r0, [r7, #28]
 800e192:	f000 f815 	bl	800e1c0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	791b      	ldrb	r3, [r3, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d008      	beq.n	800e1b0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e19e:	f7fe ff9f 	bl	800d0e0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	711a      	strb	r2, [r3, #4]
 800e1a8:	e002      	b.n	800e1b0 <dhcp_release_and_stop+0x124>
    return;
 800e1aa:	bf00      	nop
 800e1ac:	e000      	b.n	800e1b0 <dhcp_release_and_stop+0x124>
    return;
 800e1ae:	bf00      	nop
  }
}
 800e1b0:	3720      	adds	r7, #32
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bdb0      	pop	{r4, r5, r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	20000110 	.word	0x20000110
 800e1bc:	08015328 	.word	0x08015328

0800e1c0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	795b      	ldrb	r3, [r3, #5]
 800e1d0:	78fa      	ldrb	r2, [r7, #3]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d008      	beq.n	800e1e8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	78fa      	ldrb	r2, [r7, #3]
 800e1da:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	811a      	strh	r2, [r3, #8]
  }
}
 800e1e8:	bf00      	nop
 800e1ea:	370c      	adds	r7, #12
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr

0800e1f4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6039      	str	r1, [r7, #0]
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	461a      	mov	r2, r3
 800e200:	4603      	mov	r3, r0
 800e202:	80fb      	strh	r3, [r7, #6]
 800e204:	460b      	mov	r3, r1
 800e206:	717b      	strb	r3, [r7, #5]
 800e208:	4613      	mov	r3, r2
 800e20a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800e20c:	88fa      	ldrh	r2, [r7, #6]
 800e20e:	793b      	ldrb	r3, [r7, #4]
 800e210:	4413      	add	r3, r2
 800e212:	3302      	adds	r3, #2
 800e214:	2b44      	cmp	r3, #68	; 0x44
 800e216:	d906      	bls.n	800e226 <dhcp_option+0x32>
 800e218:	4b0d      	ldr	r3, [pc, #52]	; (800e250 <dhcp_option+0x5c>)
 800e21a:	f240 529a 	movw	r2, #1434	; 0x59a
 800e21e:	490d      	ldr	r1, [pc, #52]	; (800e254 <dhcp_option+0x60>)
 800e220:	480d      	ldr	r0, [pc, #52]	; (800e258 <dhcp_option+0x64>)
 800e222:	f003 f909 	bl	8011438 <iprintf>
  options[options_out_len++] = option_type;
 800e226:	88fb      	ldrh	r3, [r7, #6]
 800e228:	1c5a      	adds	r2, r3, #1
 800e22a:	80fa      	strh	r2, [r7, #6]
 800e22c:	461a      	mov	r2, r3
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	4413      	add	r3, r2
 800e232:	797a      	ldrb	r2, [r7, #5]
 800e234:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800e236:	88fb      	ldrh	r3, [r7, #6]
 800e238:	1c5a      	adds	r2, r3, #1
 800e23a:	80fa      	strh	r2, [r7, #6]
 800e23c:	461a      	mov	r2, r3
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	4413      	add	r3, r2
 800e242:	793a      	ldrb	r2, [r7, #4]
 800e244:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e246:	88fb      	ldrh	r3, [r7, #6]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3708      	adds	r7, #8
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	080147b0 	.word	0x080147b0
 800e254:	08014944 	.word	0x08014944
 800e258:	08014810 	.word	0x08014810

0800e25c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	4603      	mov	r3, r0
 800e264:	6039      	str	r1, [r7, #0]
 800e266:	80fb      	strh	r3, [r7, #6]
 800e268:	4613      	mov	r3, r2
 800e26a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800e26c:	88fb      	ldrh	r3, [r7, #6]
 800e26e:	2b43      	cmp	r3, #67	; 0x43
 800e270:	d906      	bls.n	800e280 <dhcp_option_byte+0x24>
 800e272:	4b0a      	ldr	r3, [pc, #40]	; (800e29c <dhcp_option_byte+0x40>)
 800e274:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800e278:	4909      	ldr	r1, [pc, #36]	; (800e2a0 <dhcp_option_byte+0x44>)
 800e27a:	480a      	ldr	r0, [pc, #40]	; (800e2a4 <dhcp_option_byte+0x48>)
 800e27c:	f003 f8dc 	bl	8011438 <iprintf>
  options[options_out_len++] = value;
 800e280:	88fb      	ldrh	r3, [r7, #6]
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	80fa      	strh	r2, [r7, #6]
 800e286:	461a      	mov	r2, r3
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	4413      	add	r3, r2
 800e28c:	797a      	ldrb	r2, [r7, #5]
 800e28e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e290:	88fb      	ldrh	r3, [r7, #6]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	080147b0 	.word	0x080147b0
 800e2a0:	08014988 	.word	0x08014988
 800e2a4:	08014810 	.word	0x08014810

0800e2a8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	6039      	str	r1, [r7, #0]
 800e2b2:	80fb      	strh	r3, [r7, #6]
 800e2b4:	4613      	mov	r3, r2
 800e2b6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800e2b8:	88fb      	ldrh	r3, [r7, #6]
 800e2ba:	3302      	adds	r3, #2
 800e2bc:	2b44      	cmp	r3, #68	; 0x44
 800e2be:	d906      	bls.n	800e2ce <dhcp_option_short+0x26>
 800e2c0:	4b0f      	ldr	r3, [pc, #60]	; (800e300 <dhcp_option_short+0x58>)
 800e2c2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800e2c6:	490f      	ldr	r1, [pc, #60]	; (800e304 <dhcp_option_short+0x5c>)
 800e2c8:	480f      	ldr	r0, [pc, #60]	; (800e308 <dhcp_option_short+0x60>)
 800e2ca:	f003 f8b5 	bl	8011438 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800e2ce:	88bb      	ldrh	r3, [r7, #4]
 800e2d0:	0a1b      	lsrs	r3, r3, #8
 800e2d2:	b29a      	uxth	r2, r3
 800e2d4:	88fb      	ldrh	r3, [r7, #6]
 800e2d6:	1c59      	adds	r1, r3, #1
 800e2d8:	80f9      	strh	r1, [r7, #6]
 800e2da:	4619      	mov	r1, r3
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	440b      	add	r3, r1
 800e2e0:	b2d2      	uxtb	r2, r2
 800e2e2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800e2e4:	88fb      	ldrh	r3, [r7, #6]
 800e2e6:	1c5a      	adds	r2, r3, #1
 800e2e8:	80fa      	strh	r2, [r7, #6]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	88ba      	ldrh	r2, [r7, #4]
 800e2f2:	b2d2      	uxtb	r2, r2
 800e2f4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e2f6:	88fb      	ldrh	r3, [r7, #6]
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3708      	adds	r7, #8
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	080147b0 	.word	0x080147b0
 800e304:	080149c0 	.word	0x080149c0
 800e308:	08014810 	.word	0x08014810

0800e30c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	4603      	mov	r3, r0
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
 800e318:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800e31a:	89fb      	ldrh	r3, [r7, #14]
 800e31c:	3304      	adds	r3, #4
 800e31e:	2b44      	cmp	r3, #68	; 0x44
 800e320:	d906      	bls.n	800e330 <dhcp_option_long+0x24>
 800e322:	4b19      	ldr	r3, [pc, #100]	; (800e388 <dhcp_option_long+0x7c>)
 800e324:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800e328:	4918      	ldr	r1, [pc, #96]	; (800e38c <dhcp_option_long+0x80>)
 800e32a:	4819      	ldr	r0, [pc, #100]	; (800e390 <dhcp_option_long+0x84>)
 800e32c:	f003 f884 	bl	8011438 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	0e1a      	lsrs	r2, r3, #24
 800e334:	89fb      	ldrh	r3, [r7, #14]
 800e336:	1c59      	adds	r1, r3, #1
 800e338:	81f9      	strh	r1, [r7, #14]
 800e33a:	4619      	mov	r1, r3
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	440b      	add	r3, r1
 800e340:	b2d2      	uxtb	r2, r2
 800e342:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	0c1a      	lsrs	r2, r3, #16
 800e348:	89fb      	ldrh	r3, [r7, #14]
 800e34a:	1c59      	adds	r1, r3, #1
 800e34c:	81f9      	strh	r1, [r7, #14]
 800e34e:	4619      	mov	r1, r3
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	440b      	add	r3, r1
 800e354:	b2d2      	uxtb	r2, r2
 800e356:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	0a1a      	lsrs	r2, r3, #8
 800e35c:	89fb      	ldrh	r3, [r7, #14]
 800e35e:	1c59      	adds	r1, r3, #1
 800e360:	81f9      	strh	r1, [r7, #14]
 800e362:	4619      	mov	r1, r3
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	440b      	add	r3, r1
 800e368:	b2d2      	uxtb	r2, r2
 800e36a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800e36c:	89fb      	ldrh	r3, [r7, #14]
 800e36e:	1c5a      	adds	r2, r3, #1
 800e370:	81fa      	strh	r2, [r7, #14]
 800e372:	461a      	mov	r2, r3
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	4413      	add	r3, r2
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	b2d2      	uxtb	r2, r2
 800e37c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e37e:	89fb      	ldrh	r3, [r7, #14]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3710      	adds	r7, #16
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	080147b0 	.word	0x080147b0
 800e38c:	080149fc 	.word	0x080149fc
 800e390:	08014810 	.word	0x08014810

0800e394 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static u16_t
dhcp_option_hostname(u16_t options_out_len, u8_t *options, struct netif *netif)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b088      	sub	sp, #32
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
 800e3a0:	81fb      	strh	r3, [r7, #14]
  if (netif->hostname != NULL) {
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d044      	beq.n	800e434 <dhcp_option_hostname+0xa0>
    size_t namelen = strlen(netif->hostname);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7f1 ff46 	bl	8000240 <strlen>
 800e3b4:	6178      	str	r0, [r7, #20]
    if (namelen > 0) {
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d03b      	beq.n	800e434 <dhcp_option_hostname+0xa0>
      size_t len;
      const char *p = netif->hostname;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c0:	61bb      	str	r3, [r7, #24]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - options_out_len - 3;
 800e3c2:	89fb      	ldrh	r3, [r7, #14]
 800e3c4:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 800e3c8:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
 800e3ca:	697a      	ldr	r2, [r7, #20]
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d906      	bls.n	800e3e0 <dhcp_option_hostname+0x4c>
 800e3d2:	4b1b      	ldr	r3, [pc, #108]	; (800e440 <dhcp_option_hostname+0xac>)
 800e3d4:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e3d8:	491a      	ldr	r1, [pc, #104]	; (800e444 <dhcp_option_hostname+0xb0>)
 800e3da:	481b      	ldr	r0, [pc, #108]	; (800e448 <dhcp_option_hostname+0xb4>)
 800e3dc:	f003 f82c 	bl	8011438 <iprintf>
      len = LWIP_MIN(namelen, available);
 800e3e0:	693a      	ldr	r2, [r7, #16]
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	bf28      	it	cs
 800e3e8:	4613      	movcs	r3, r2
 800e3ea:	61fb      	str	r3, [r7, #28]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	2bff      	cmp	r3, #255	; 0xff
 800e3f0:	d906      	bls.n	800e400 <dhcp_option_hostname+0x6c>
 800e3f2:	4b13      	ldr	r3, [pc, #76]	; (800e440 <dhcp_option_hostname+0xac>)
 800e3f4:	f240 52cd 	movw	r2, #1485	; 0x5cd
 800e3f8:	4912      	ldr	r1, [pc, #72]	; (800e444 <dhcp_option_hostname+0xb0>)
 800e3fa:	4813      	ldr	r0, [pc, #76]	; (800e448 <dhcp_option_hostname+0xb4>)
 800e3fc:	f003 f81c 	bl	8011438 <iprintf>
      options_out_len = dhcp_option(options_out_len, options, DHCP_OPTION_HOSTNAME, (u8_t)len);
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	b2db      	uxtb	r3, r3
 800e404:	89f8      	ldrh	r0, [r7, #14]
 800e406:	220c      	movs	r2, #12
 800e408:	68b9      	ldr	r1, [r7, #8]
 800e40a:	f7ff fef3 	bl	800e1f4 <dhcp_option>
 800e40e:	4603      	mov	r3, r0
 800e410:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 800e412:	e00a      	b.n	800e42a <dhcp_option_hostname+0x96>
        options_out_len = dhcp_option_byte(options_out_len, options, *p++);
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	1c5a      	adds	r2, r3, #1
 800e418:	61ba      	str	r2, [r7, #24]
 800e41a:	781a      	ldrb	r2, [r3, #0]
 800e41c:	89fb      	ldrh	r3, [r7, #14]
 800e41e:	68b9      	ldr	r1, [r7, #8]
 800e420:	4618      	mov	r0, r3
 800e422:	f7ff ff1b 	bl	800e25c <dhcp_option_byte>
 800e426:	4603      	mov	r3, r0
 800e428:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	1e5a      	subs	r2, r3, #1
 800e42e:	61fa      	str	r2, [r7, #28]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d1ef      	bne.n	800e414 <dhcp_option_hostname+0x80>
      }
    }
  }
  return options_out_len;
 800e434:	89fb      	ldrh	r3, [r7, #14]
}
 800e436:	4618      	mov	r0, r3
 800e438:	3720      	adds	r7, #32
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	080147b0 	.word	0x080147b0
 800e444:	08014a38 	.word	0x08014a38
 800e448:	08014810 	.word	0x08014810

0800e44c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b090      	sub	sp, #64	; 0x40
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800e456:	2300      	movs	r3, #0
 800e458:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800e45a:	2300      	movs	r3, #0
 800e45c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800e45e:	2208      	movs	r2, #8
 800e460:	2100      	movs	r1, #0
 800e462:	48be      	ldr	r0, [pc, #760]	; (800e75c <dhcp_parse_reply+0x310>)
 800e464:	f002 ffe0 	bl	8011428 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	895b      	ldrh	r3, [r3, #10]
 800e46c:	2b2b      	cmp	r3, #43	; 0x2b
 800e46e:	d802      	bhi.n	800e476 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800e470:	f06f 0301 	mvn.w	r3, #1
 800e474:	e2a8      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800e47c:	23f0      	movs	r3, #240	; 0xf0
 800e47e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	891b      	ldrh	r3, [r3, #8]
 800e484:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800e48a:	e00c      	b.n	800e4a6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800e48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48e:	895b      	ldrh	r3, [r3, #10]
 800e490:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e492:	1ad3      	subs	r3, r2, r3
 800e494:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800e496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e498:	895b      	ldrh	r3, [r3, #10]
 800e49a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800e4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d004      	beq.n	800e4b6 <dhcp_parse_reply+0x6a>
 800e4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ae:	895b      	ldrh	r3, [r3, #10]
 800e4b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d2ea      	bcs.n	800e48c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800e4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d102      	bne.n	800e4c2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800e4bc:	f06f 0301 	mvn.w	r3, #1
 800e4c0:	e282      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 800e4c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e4c4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800e4c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e4c8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800e4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e4d0:	e23a      	b.n	800e948 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 800e4d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e4d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4d6:	4413      	add	r3, r2
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800e4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e4e6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800e4e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e4ea:	3302      	adds	r3, #2
 800e4ec:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800e4ee:	8bfa      	ldrh	r2, [r7, #30]
 800e4f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d202      	bcs.n	800e4fc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800e4f6:	f06f 0301 	mvn.w	r3, #1
 800e4fa:	e265      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800e4fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e4fe:	3301      	adds	r3, #1
 800e500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e502:	8952      	ldrh	r2, [r2, #10]
 800e504:	4293      	cmp	r3, r2
 800e506:	da07      	bge.n	800e518 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800e508:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e50a:	3301      	adds	r3, #1
 800e50c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e50e:	4413      	add	r3, r2
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e516:	e00b      	b.n	800e530 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800e518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d004      	beq.n	800e52a <dhcp_parse_reply+0xde>
 800e520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	e000      	b.n	800e52c <dhcp_parse_reply+0xe0>
 800e52a:	2300      	movs	r3, #0
 800e52c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800e530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e534:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800e538:	7dfb      	ldrb	r3, [r7, #23]
 800e53a:	2b3b      	cmp	r3, #59	; 0x3b
 800e53c:	f200 812d 	bhi.w	800e79a <dhcp_parse_reply+0x34e>
 800e540:	a201      	add	r2, pc, #4	; (adr r2, 800e548 <dhcp_parse_reply+0xfc>)
 800e542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e546:	bf00      	nop
 800e548:	0800e639 	.word	0x0800e639
 800e54c:	0800e649 	.word	0x0800e649
 800e550:	0800e79b 	.word	0x0800e79b
 800e554:	0800e66b 	.word	0x0800e66b
 800e558:	0800e79b 	.word	0x0800e79b
 800e55c:	0800e79b 	.word	0x0800e79b
 800e560:	0800e79b 	.word	0x0800e79b
 800e564:	0800e79b 	.word	0x0800e79b
 800e568:	0800e79b 	.word	0x0800e79b
 800e56c:	0800e79b 	.word	0x0800e79b
 800e570:	0800e79b 	.word	0x0800e79b
 800e574:	0800e79b 	.word	0x0800e79b
 800e578:	0800e79b 	.word	0x0800e79b
 800e57c:	0800e79b 	.word	0x0800e79b
 800e580:	0800e79b 	.word	0x0800e79b
 800e584:	0800e79b 	.word	0x0800e79b
 800e588:	0800e79b 	.word	0x0800e79b
 800e58c:	0800e79b 	.word	0x0800e79b
 800e590:	0800e79b 	.word	0x0800e79b
 800e594:	0800e79b 	.word	0x0800e79b
 800e598:	0800e79b 	.word	0x0800e79b
 800e59c:	0800e79b 	.word	0x0800e79b
 800e5a0:	0800e79b 	.word	0x0800e79b
 800e5a4:	0800e79b 	.word	0x0800e79b
 800e5a8:	0800e79b 	.word	0x0800e79b
 800e5ac:	0800e79b 	.word	0x0800e79b
 800e5b0:	0800e79b 	.word	0x0800e79b
 800e5b4:	0800e79b 	.word	0x0800e79b
 800e5b8:	0800e79b 	.word	0x0800e79b
 800e5bc:	0800e79b 	.word	0x0800e79b
 800e5c0:	0800e79b 	.word	0x0800e79b
 800e5c4:	0800e79b 	.word	0x0800e79b
 800e5c8:	0800e79b 	.word	0x0800e79b
 800e5cc:	0800e79b 	.word	0x0800e79b
 800e5d0:	0800e79b 	.word	0x0800e79b
 800e5d4:	0800e79b 	.word	0x0800e79b
 800e5d8:	0800e79b 	.word	0x0800e79b
 800e5dc:	0800e79b 	.word	0x0800e79b
 800e5e0:	0800e79b 	.word	0x0800e79b
 800e5e4:	0800e79b 	.word	0x0800e79b
 800e5e8:	0800e79b 	.word	0x0800e79b
 800e5ec:	0800e79b 	.word	0x0800e79b
 800e5f0:	0800e79b 	.word	0x0800e79b
 800e5f4:	0800e79b 	.word	0x0800e79b
 800e5f8:	0800e79b 	.word	0x0800e79b
 800e5fc:	0800e79b 	.word	0x0800e79b
 800e600:	0800e79b 	.word	0x0800e79b
 800e604:	0800e79b 	.word	0x0800e79b
 800e608:	0800e79b 	.word	0x0800e79b
 800e60c:	0800e79b 	.word	0x0800e79b
 800e610:	0800e79b 	.word	0x0800e79b
 800e614:	0800e697 	.word	0x0800e697
 800e618:	0800e6b9 	.word	0x0800e6b9
 800e61c:	0800e6f5 	.word	0x0800e6f5
 800e620:	0800e717 	.word	0x0800e717
 800e624:	0800e79b 	.word	0x0800e79b
 800e628:	0800e79b 	.word	0x0800e79b
 800e62c:	0800e79b 	.word	0x0800e79b
 800e630:	0800e739 	.word	0x0800e739
 800e634:	0800e779 	.word	0x0800e779
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800e638:	2300      	movs	r3, #0
 800e63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e63e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e642:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800e646:	e0ac      	b.n	800e7a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e64c:	2b04      	cmp	r3, #4
 800e64e:	d009      	beq.n	800e664 <dhcp_parse_reply+0x218>
 800e650:	4b43      	ldr	r3, [pc, #268]	; (800e760 <dhcp_parse_reply+0x314>)
 800e652:	f240 622e 	movw	r2, #1582	; 0x62e
 800e656:	4943      	ldr	r1, [pc, #268]	; (800e764 <dhcp_parse_reply+0x318>)
 800e658:	4843      	ldr	r0, [pc, #268]	; (800e768 <dhcp_parse_reply+0x31c>)
 800e65a:	f002 feed 	bl	8011438 <iprintf>
 800e65e:	f06f 0305 	mvn.w	r3, #5
 800e662:	e1b1      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800e664:	2306      	movs	r3, #6
 800e666:	623b      	str	r3, [r7, #32]
        break;
 800e668:	e09b      	b.n	800e7a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800e66a:	2304      	movs	r3, #4
 800e66c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800e670:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e674:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e678:	429a      	cmp	r2, r3
 800e67a:	d209      	bcs.n	800e690 <dhcp_parse_reply+0x244>
 800e67c:	4b38      	ldr	r3, [pc, #224]	; (800e760 <dhcp_parse_reply+0x314>)
 800e67e:	f240 6233 	movw	r2, #1587	; 0x633
 800e682:	493a      	ldr	r1, [pc, #232]	; (800e76c <dhcp_parse_reply+0x320>)
 800e684:	4838      	ldr	r0, [pc, #224]	; (800e768 <dhcp_parse_reply+0x31c>)
 800e686:	f002 fed7 	bl	8011438 <iprintf>
 800e68a:	f06f 0305 	mvn.w	r3, #5
 800e68e:	e19b      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800e690:	2307      	movs	r3, #7
 800e692:	623b      	str	r3, [r7, #32]
        break;
 800e694:	e085      	b.n	800e7a2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e69a:	2b04      	cmp	r3, #4
 800e69c:	d009      	beq.n	800e6b2 <dhcp_parse_reply+0x266>
 800e69e:	4b30      	ldr	r3, [pc, #192]	; (800e760 <dhcp_parse_reply+0x314>)
 800e6a0:	f240 6241 	movw	r2, #1601	; 0x641
 800e6a4:	492f      	ldr	r1, [pc, #188]	; (800e764 <dhcp_parse_reply+0x318>)
 800e6a6:	4830      	ldr	r0, [pc, #192]	; (800e768 <dhcp_parse_reply+0x31c>)
 800e6a8:	f002 fec6 	bl	8011438 <iprintf>
 800e6ac:	f06f 0305 	mvn.w	r3, #5
 800e6b0:	e18a      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800e6b2:	2303      	movs	r3, #3
 800e6b4:	623b      	str	r3, [r7, #32]
        break;
 800e6b6:	e074      	b.n	800e7a2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d009      	beq.n	800e6d4 <dhcp_parse_reply+0x288>
 800e6c0:	4b27      	ldr	r3, [pc, #156]	; (800e760 <dhcp_parse_reply+0x314>)
 800e6c2:	f240 624f 	movw	r2, #1615	; 0x64f
 800e6c6:	492a      	ldr	r1, [pc, #168]	; (800e770 <dhcp_parse_reply+0x324>)
 800e6c8:	4827      	ldr	r0, [pc, #156]	; (800e768 <dhcp_parse_reply+0x31c>)
 800e6ca:	f002 feb5 	bl	8011438 <iprintf>
 800e6ce:	f06f 0305 	mvn.w	r3, #5
 800e6d2:	e179      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800e6d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e6d6:	2bf0      	cmp	r3, #240	; 0xf0
 800e6d8:	d009      	beq.n	800e6ee <dhcp_parse_reply+0x2a2>
 800e6da:	4b21      	ldr	r3, [pc, #132]	; (800e760 <dhcp_parse_reply+0x314>)
 800e6dc:	f240 6251 	movw	r2, #1617	; 0x651
 800e6e0:	4924      	ldr	r1, [pc, #144]	; (800e774 <dhcp_parse_reply+0x328>)
 800e6e2:	4821      	ldr	r0, [pc, #132]	; (800e768 <dhcp_parse_reply+0x31c>)
 800e6e4:	f002 fea8 	bl	8011438 <iprintf>
 800e6e8:	f06f 0305 	mvn.w	r3, #5
 800e6ec:	e16c      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	623b      	str	r3, [r7, #32]
        break;
 800e6f2:	e056      	b.n	800e7a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d009      	beq.n	800e710 <dhcp_parse_reply+0x2c4>
 800e6fc:	4b18      	ldr	r3, [pc, #96]	; (800e760 <dhcp_parse_reply+0x314>)
 800e6fe:	f240 6255 	movw	r2, #1621	; 0x655
 800e702:	491b      	ldr	r1, [pc, #108]	; (800e770 <dhcp_parse_reply+0x324>)
 800e704:	4818      	ldr	r0, [pc, #96]	; (800e768 <dhcp_parse_reply+0x31c>)
 800e706:	f002 fe97 	bl	8011438 <iprintf>
 800e70a:	f06f 0305 	mvn.w	r3, #5
 800e70e:	e15b      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800e710:	2301      	movs	r3, #1
 800e712:	623b      	str	r3, [r7, #32]
        break;
 800e714:	e045      	b.n	800e7a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e71a:	2b04      	cmp	r3, #4
 800e71c:	d009      	beq.n	800e732 <dhcp_parse_reply+0x2e6>
 800e71e:	4b10      	ldr	r3, [pc, #64]	; (800e760 <dhcp_parse_reply+0x314>)
 800e720:	f240 6259 	movw	r2, #1625	; 0x659
 800e724:	490f      	ldr	r1, [pc, #60]	; (800e764 <dhcp_parse_reply+0x318>)
 800e726:	4810      	ldr	r0, [pc, #64]	; (800e768 <dhcp_parse_reply+0x31c>)
 800e728:	f002 fe86 	bl	8011438 <iprintf>
 800e72c:	f06f 0305 	mvn.w	r3, #5
 800e730:	e14a      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800e732:	2302      	movs	r3, #2
 800e734:	623b      	str	r3, [r7, #32]
        break;
 800e736:	e034      	b.n	800e7a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e73c:	2b04      	cmp	r3, #4
 800e73e:	d009      	beq.n	800e754 <dhcp_parse_reply+0x308>
 800e740:	4b07      	ldr	r3, [pc, #28]	; (800e760 <dhcp_parse_reply+0x314>)
 800e742:	f240 625d 	movw	r2, #1629	; 0x65d
 800e746:	4907      	ldr	r1, [pc, #28]	; (800e764 <dhcp_parse_reply+0x318>)
 800e748:	4807      	ldr	r0, [pc, #28]	; (800e768 <dhcp_parse_reply+0x31c>)
 800e74a:	f002 fe75 	bl	8011438 <iprintf>
 800e74e:	f06f 0305 	mvn.w	r3, #5
 800e752:	e139      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 800e754:	2304      	movs	r3, #4
 800e756:	623b      	str	r3, [r7, #32]
        break;
 800e758:	e023      	b.n	800e7a2 <dhcp_parse_reply+0x356>
 800e75a:	bf00      	nop
 800e75c:	20006e0c 	.word	0x20006e0c
 800e760:	080147b0 	.word	0x080147b0
 800e764:	08014a54 	.word	0x08014a54
 800e768:	08014810 	.word	0x08014810
 800e76c:	08014a60 	.word	0x08014a60
 800e770:	08014a74 	.word	0x08014a74
 800e774:	08014a80 	.word	0x08014a80
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e77c:	2b04      	cmp	r3, #4
 800e77e:	d009      	beq.n	800e794 <dhcp_parse_reply+0x348>
 800e780:	4b93      	ldr	r3, [pc, #588]	; (800e9d0 <dhcp_parse_reply+0x584>)
 800e782:	f240 6261 	movw	r2, #1633	; 0x661
 800e786:	4993      	ldr	r1, [pc, #588]	; (800e9d4 <dhcp_parse_reply+0x588>)
 800e788:	4893      	ldr	r0, [pc, #588]	; (800e9d8 <dhcp_parse_reply+0x58c>)
 800e78a:	f002 fe55 	bl	8011438 <iprintf>
 800e78e:	f06f 0305 	mvn.w	r3, #5
 800e792:	e119      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 800e794:	2305      	movs	r3, #5
 800e796:	623b      	str	r3, [r7, #32]
        break;
 800e798:	e003      	b.n	800e7a2 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 800e79a:	2300      	movs	r3, #0
 800e79c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800e7a0:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800e7a2:	7dfb      	ldrb	r3, [r7, #23]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d103      	bne.n	800e7b0 <dhcp_parse_reply+0x364>
      offset++;
 800e7a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 800e7ae:	e0a1      	b.n	800e8f4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800e7b0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e7b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7b6:	4413      	add	r3, r2
 800e7b8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	dd02      	ble.n	800e7c6 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 800e7c0:	f06f 0301 	mvn.w	r3, #1
 800e7c4:	e100      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 800e7c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e7ce:	4413      	add	r3, r2
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	3302      	adds	r3, #2
 800e7d4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800e7d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f000 808a 	beq.w	800e8f4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800e7e4:	6a3b      	ldr	r3, [r7, #32]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	db02      	blt.n	800e7f0 <dhcp_parse_reply+0x3a4>
 800e7ea:	6a3b      	ldr	r3, [r7, #32]
 800e7ec:	2b07      	cmp	r3, #7
 800e7ee:	dd06      	ble.n	800e7fe <dhcp_parse_reply+0x3b2>
 800e7f0:	4b77      	ldr	r3, [pc, #476]	; (800e9d0 <dhcp_parse_reply+0x584>)
 800e7f2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800e7f6:	4979      	ldr	r1, [pc, #484]	; (800e9dc <dhcp_parse_reply+0x590>)
 800e7f8:	4877      	ldr	r0, [pc, #476]	; (800e9d8 <dhcp_parse_reply+0x58c>)
 800e7fa:	f002 fe1d 	bl	8011438 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800e7fe:	4a78      	ldr	r2, [pc, #480]	; (800e9e0 <dhcp_parse_reply+0x594>)
 800e800:	6a3b      	ldr	r3, [r7, #32]
 800e802:	4413      	add	r3, r2
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d174      	bne.n	800e8f4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 800e80a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e80e:	2b04      	cmp	r3, #4
 800e810:	bf28      	it	cs
 800e812:	2304      	movcs	r3, #4
 800e814:	b2db      	uxtb	r3, r3
 800e816:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800e818:	8bfb      	ldrh	r3, [r7, #30]
 800e81a:	8aba      	ldrh	r2, [r7, #20]
 800e81c:	f107 0108 	add.w	r1, r7, #8
 800e820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e822:	f7f8 fc09 	bl	8007038 <pbuf_copy_partial>
 800e826:	4603      	mov	r3, r0
 800e828:	461a      	mov	r2, r3
 800e82a:	8abb      	ldrh	r3, [r7, #20]
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d002      	beq.n	800e836 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 800e830:	f06f 0301 	mvn.w	r3, #1
 800e834:	e0c8      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 800e836:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e83a:	2b04      	cmp	r3, #4
 800e83c:	d933      	bls.n	800e8a6 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800e83e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e842:	f003 0303 	and.w	r3, r3, #3
 800e846:	b2db      	uxtb	r3, r3
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d009      	beq.n	800e860 <dhcp_parse_reply+0x414>
 800e84c:	4b60      	ldr	r3, [pc, #384]	; (800e9d0 <dhcp_parse_reply+0x584>)
 800e84e:	f240 6281 	movw	r2, #1665	; 0x681
 800e852:	4964      	ldr	r1, [pc, #400]	; (800e9e4 <dhcp_parse_reply+0x598>)
 800e854:	4860      	ldr	r0, [pc, #384]	; (800e9d8 <dhcp_parse_reply+0x58c>)
 800e856:	f002 fdef 	bl	8011438 <iprintf>
 800e85a:	f06f 0305 	mvn.w	r3, #5
 800e85e:	e0b3      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 800e860:	4a5f      	ldr	r2, [pc, #380]	; (800e9e0 <dhcp_parse_reply+0x594>)
 800e862:	6a3b      	ldr	r3, [r7, #32]
 800e864:	4413      	add	r3, r2
 800e866:	2201      	movs	r2, #1
 800e868:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7f6 ff42 	bl	80056f6 <lwip_htonl>
 800e872:	4602      	mov	r2, r0
 800e874:	495c      	ldr	r1, [pc, #368]	; (800e9e8 <dhcp_parse_reply+0x59c>)
 800e876:	6a3b      	ldr	r3, [r7, #32]
 800e878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800e87c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e880:	3b04      	subs	r3, #4
 800e882:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800e886:	8bfb      	ldrh	r3, [r7, #30]
 800e888:	3304      	adds	r3, #4
 800e88a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800e88c:	8a7a      	ldrh	r2, [r7, #18]
 800e88e:	8bfb      	ldrh	r3, [r7, #30]
 800e890:	429a      	cmp	r2, r3
 800e892:	d202      	bcs.n	800e89a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 800e894:	f06f 0301 	mvn.w	r3, #1
 800e898:	e096      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 800e89a:	8a7b      	ldrh	r3, [r7, #18]
 800e89c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800e89e:	6a3b      	ldr	r3, [r7, #32]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800e8a4:	e79e      	b.n	800e7e4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 800e8a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8aa:	2b04      	cmp	r3, #4
 800e8ac:	d106      	bne.n	800e8bc <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7f6 ff20 	bl	80056f6 <lwip_htonl>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	60bb      	str	r3, [r7, #8]
 800e8ba:	e011      	b.n	800e8e0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800e8bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d009      	beq.n	800e8d8 <dhcp_parse_reply+0x48c>
 800e8c4:	4b42      	ldr	r3, [pc, #264]	; (800e9d0 <dhcp_parse_reply+0x584>)
 800e8c6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800e8ca:	4948      	ldr	r1, [pc, #288]	; (800e9ec <dhcp_parse_reply+0x5a0>)
 800e8cc:	4842      	ldr	r0, [pc, #264]	; (800e9d8 <dhcp_parse_reply+0x58c>)
 800e8ce:	f002 fdb3 	bl	8011438 <iprintf>
 800e8d2:	f06f 0305 	mvn.w	r3, #5
 800e8d6:	e077      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 800e8d8:	f107 0308 	add.w	r3, r7, #8
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800e8e0:	4a3f      	ldr	r2, [pc, #252]	; (800e9e0 <dhcp_parse_reply+0x594>)
 800e8e2:	6a3b      	ldr	r3, [r7, #32]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800e8ea:	68ba      	ldr	r2, [r7, #8]
 800e8ec:	493e      	ldr	r1, [pc, #248]	; (800e9e8 <dhcp_parse_reply+0x59c>)
 800e8ee:	6a3b      	ldr	r3, [r7, #32]
 800e8f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800e8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f6:	895b      	ldrh	r3, [r3, #10]
 800e8f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d324      	bcc.n	800e948 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e900:	895b      	ldrh	r3, [r3, #10]
 800e902:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e904:	1ad3      	subs	r3, r2, r3
 800e906:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800e908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90a:	895b      	ldrh	r3, [r3, #10]
 800e90c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800e912:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e914:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e916:	429a      	cmp	r2, r3
 800e918:	d213      	bcs.n	800e942 <dhcp_parse_reply+0x4f6>
        q = q->next;
 800e91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800e920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e922:	2b00      	cmp	r3, #0
 800e924:	d109      	bne.n	800e93a <dhcp_parse_reply+0x4ee>
 800e926:	4b2a      	ldr	r3, [pc, #168]	; (800e9d0 <dhcp_parse_reply+0x584>)
 800e928:	f240 629d 	movw	r2, #1693	; 0x69d
 800e92c:	4930      	ldr	r1, [pc, #192]	; (800e9f0 <dhcp_parse_reply+0x5a4>)
 800e92e:	482a      	ldr	r0, [pc, #168]	; (800e9d8 <dhcp_parse_reply+0x58c>)
 800e930:	f002 fd82 	bl	8011438 <iprintf>
 800e934:	f06f 0305 	mvn.w	r3, #5
 800e938:	e046      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 800e93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e940:	e002      	b.n	800e948 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800e942:	f06f 0301 	mvn.w	r3, #1
 800e946:	e03f      	b.n	800e9c8 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00a      	beq.n	800e964 <dhcp_parse_reply+0x518>
 800e94e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e950:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e952:	429a      	cmp	r2, r3
 800e954:	d206      	bcs.n	800e964 <dhcp_parse_reply+0x518>
 800e956:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e958:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e95a:	4413      	add	r3, r2
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	2bff      	cmp	r3, #255	; 0xff
 800e960:	f47f adb7 	bne.w	800e4d2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800e964:	4b1e      	ldr	r3, [pc, #120]	; (800e9e0 <dhcp_parse_reply+0x594>)
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d018      	beq.n	800e99e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e96c:	4b1e      	ldr	r3, [pc, #120]	; (800e9e8 <dhcp_parse_reply+0x59c>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e972:	4b1b      	ldr	r3, [pc, #108]	; (800e9e0 <dhcp_parse_reply+0x594>)
 800e974:	2200      	movs	r2, #0
 800e976:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d102      	bne.n	800e984 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 800e97e:	2301      	movs	r3, #1
 800e980:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e982:	e00c      	b.n	800e99e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b02      	cmp	r3, #2
 800e988:	d102      	bne.n	800e990 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 800e98a:	2301      	movs	r3, #1
 800e98c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e98e:	e006      	b.n	800e99e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2b03      	cmp	r3, #3
 800e994:	d103      	bne.n	800e99e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 800e996:	2301      	movs	r3, #1
 800e998:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800e99a:	2301      	movs	r3, #1
 800e99c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800e99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d006      	beq.n	800e9b2 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800e9a8:	236c      	movs	r3, #108	; 0x6c
 800e9aa:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800e9ac:	23ec      	movs	r3, #236	; 0xec
 800e9ae:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800e9b0:	e569      	b.n	800e486 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800e9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d006      	beq.n	800e9c6 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800e9bc:	232c      	movs	r3, #44	; 0x2c
 800e9be:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800e9c0:	236c      	movs	r3, #108	; 0x6c
 800e9c2:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800e9c4:	e55f      	b.n	800e486 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800e9c6:	2300      	movs	r3, #0
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3740      	adds	r7, #64	; 0x40
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	080147b0 	.word	0x080147b0
 800e9d4:	08014a54 	.word	0x08014a54
 800e9d8:	08014810 	.word	0x08014810
 800e9dc:	08014a98 	.word	0x08014a98
 800e9e0:	20006e0c 	.word	0x20006e0c
 800e9e4:	08014aac 	.word	0x08014aac
 800e9e8:	20006e14 	.word	0x20006e14
 800e9ec:	08014ac4 	.word	0x08014ac4
 800e9f0:	08014ad8 	.word	0x08014ad8

0800e9f4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b08a      	sub	sp, #40	; 0x28
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	607a      	str	r2, [r7, #4]
 800ea00:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800ea02:	4b60      	ldr	r3, [pc, #384]	; (800eb84 <dhcp_recv+0x190>)
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea08:	6a3b      	ldr	r3, [r7, #32]
 800ea0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f000 809d 	beq.w	800eb56 <dhcp_recv+0x162>
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	791b      	ldrb	r3, [r3, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f000 8098 	beq.w	800eb56 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	895b      	ldrh	r3, [r3, #10]
 800ea2a:	2b2b      	cmp	r3, #43	; 0x2b
 800ea2c:	f240 8095 	bls.w	800eb5a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	2b02      	cmp	r3, #2
 800ea36:	f040 8092 	bne.w	800eb5e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea40:	e012      	b.n	800ea68 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800ea42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea46:	6a3a      	ldr	r2, [r7, #32]
 800ea48:	4413      	add	r3, r2
 800ea4a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800ea4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea52:	69b9      	ldr	r1, [r7, #24]
 800ea54:	440b      	add	r3, r1
 800ea56:	7f1b      	ldrb	r3, [r3, #28]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	f040 8082 	bne.w	800eb62 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ea5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea62:	3301      	adds	r3, #1
 800ea64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea68:	6a3b      	ldr	r3, [r7, #32]
 800ea6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d203      	bcs.n	800ea7e <dhcp_recv+0x8a>
 800ea76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea7a:	2b05      	cmp	r3, #5
 800ea7c:	d9e1      	bls.n	800ea42 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7f6 fe37 	bl	80056f6 <lwip_htonl>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d169      	bne.n	800eb66 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800ea92:	69f9      	ldr	r1, [r7, #28]
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7ff fcd9 	bl	800e44c <dhcp_parse_reply>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d164      	bne.n	800eb6a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800eaa0:	4b39      	ldr	r3, [pc, #228]	; (800eb88 <dhcp_recv+0x194>)
 800eaa2:	785b      	ldrb	r3, [r3, #1]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d062      	beq.n	800eb6e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800eaae:	4b37      	ldr	r3, [pc, #220]	; (800eb8c <dhcp_recv+0x198>)
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800eab4:	7cfb      	ldrb	r3, [r7, #19]
 800eab6:	2b05      	cmp	r3, #5
 800eab8:	d12a      	bne.n	800eb10 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	795b      	ldrb	r3, [r3, #5]
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d112      	bne.n	800eae8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800eac2:	6979      	ldr	r1, [r7, #20]
 800eac4:	6a38      	ldr	r0, [r7, #32]
 800eac6:	f7fe fddf 	bl	800d688 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800eaca:	6a3b      	ldr	r3, [r7, #32]
 800eacc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ead0:	f003 0308 	and.w	r3, r3, #8
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d003      	beq.n	800eae0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800ead8:	6a38      	ldr	r0, [r7, #32]
 800eada:	f7fe fb45 	bl	800d168 <dhcp_check>
 800eade:	e049      	b.n	800eb74 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800eae0:	6a38      	ldr	r0, [r7, #32]
 800eae2:	f7fe fff3 	bl	800dacc <dhcp_bind>
 800eae6:	e045      	b.n	800eb74 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	795b      	ldrb	r3, [r3, #5]
 800eaec:	2b03      	cmp	r3, #3
 800eaee:	d007      	beq.n	800eb00 <dhcp_recv+0x10c>
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	795b      	ldrb	r3, [r3, #5]
 800eaf4:	2b04      	cmp	r3, #4
 800eaf6:	d003      	beq.n	800eb00 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800eafc:	2b05      	cmp	r3, #5
 800eafe:	d139      	bne.n	800eb74 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800eb00:	6979      	ldr	r1, [r7, #20]
 800eb02:	6a38      	ldr	r0, [r7, #32]
 800eb04:	f7fe fdc0 	bl	800d688 <dhcp_handle_ack>
      dhcp_bind(netif);
 800eb08:	6a38      	ldr	r0, [r7, #32]
 800eb0a:	f7fe ffdf 	bl	800dacc <dhcp_bind>
 800eb0e:	e031      	b.n	800eb74 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800eb10:	7cfb      	ldrb	r3, [r7, #19]
 800eb12:	2b06      	cmp	r3, #6
 800eb14:	d113      	bne.n	800eb3e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800eb1a:	2b03      	cmp	r3, #3
 800eb1c:	d00b      	beq.n	800eb36 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800eb1e:	69fb      	ldr	r3, [r7, #28]
 800eb20:	795b      	ldrb	r3, [r3, #5]
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d007      	beq.n	800eb36 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800eb2a:	2b04      	cmp	r3, #4
 800eb2c:	d003      	beq.n	800eb36 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	795b      	ldrb	r3, [r3, #5]
 800eb32:	2b05      	cmp	r3, #5
 800eb34:	d103      	bne.n	800eb3e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800eb36:	6a38      	ldr	r0, [r7, #32]
 800eb38:	f7fe fafc 	bl	800d134 <dhcp_handle_nak>
 800eb3c:	e01a      	b.n	800eb74 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800eb3e:	7cfb      	ldrb	r3, [r7, #19]
 800eb40:	2b02      	cmp	r3, #2
 800eb42:	d116      	bne.n	800eb72 <dhcp_recv+0x17e>
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	795b      	ldrb	r3, [r3, #5]
 800eb48:	2b06      	cmp	r3, #6
 800eb4a:	d112      	bne.n	800eb72 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800eb4c:	6979      	ldr	r1, [r7, #20]
 800eb4e:	6a38      	ldr	r0, [r7, #32]
 800eb50:	f7fe fb3e 	bl	800d1d0 <dhcp_handle_offer>
 800eb54:	e00e      	b.n	800eb74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800eb56:	bf00      	nop
 800eb58:	e00c      	b.n	800eb74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800eb5a:	bf00      	nop
 800eb5c:	e00a      	b.n	800eb74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800eb5e:	bf00      	nop
 800eb60:	e008      	b.n	800eb74 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800eb62:	bf00      	nop
 800eb64:	e006      	b.n	800eb74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800eb66:	bf00      	nop
 800eb68:	e004      	b.n	800eb74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800eb6a:	bf00      	nop
 800eb6c:	e002      	b.n	800eb74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800eb6e:	bf00      	nop
 800eb70:	e000      	b.n	800eb74 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800eb72:	bf00      	nop
  pbuf_free(p);
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f7f8 f865 	bl	8006c44 <pbuf_free>
}
 800eb7a:	bf00      	nop
 800eb7c:	3728      	adds	r7, #40	; 0x28
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	2000388c 	.word	0x2000388c
 800eb88:	20006e0c 	.word	0x20006e0c
 800eb8c:	20006e14 	.word	0x20006e14

0800eb90 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b088      	sub	sp, #32
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	60f8      	str	r0, [r7, #12]
 800eb98:	60b9      	str	r1, [r7, #8]
 800eb9a:	603b      	str	r3, [r7, #0]
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d108      	bne.n	800ebb8 <dhcp_create_msg+0x28>
 800eba6:	4b5f      	ldr	r3, [pc, #380]	; (800ed24 <dhcp_create_msg+0x194>)
 800eba8:	f240 7269 	movw	r2, #1897	; 0x769
 800ebac:	495e      	ldr	r1, [pc, #376]	; (800ed28 <dhcp_create_msg+0x198>)
 800ebae:	485f      	ldr	r0, [pc, #380]	; (800ed2c <dhcp_create_msg+0x19c>)
 800ebb0:	f002 fc42 	bl	8011438 <iprintf>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	e0b1      	b.n	800ed1c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d108      	bne.n	800ebd0 <dhcp_create_msg+0x40>
 800ebbe:	4b59      	ldr	r3, [pc, #356]	; (800ed24 <dhcp_create_msg+0x194>)
 800ebc0:	f240 726a 	movw	r2, #1898	; 0x76a
 800ebc4:	495a      	ldr	r1, [pc, #360]	; (800ed30 <dhcp_create_msg+0x1a0>)
 800ebc6:	4859      	ldr	r0, [pc, #356]	; (800ed2c <dhcp_create_msg+0x19c>)
 800ebc8:	f002 fc36 	bl	8011438 <iprintf>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	e0a5      	b.n	800ed1c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800ebd0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ebd4:	f44f 719a 	mov.w	r1, #308	; 0x134
 800ebd8:	2036      	movs	r0, #54	; 0x36
 800ebda:	f7f7 fd4f 	bl	800667c <pbuf_alloc>
 800ebde:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d101      	bne.n	800ebea <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	e098      	b.n	800ed1c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800ebea:	69bb      	ldr	r3, [r7, #24]
 800ebec:	895b      	ldrh	r3, [r3, #10]
 800ebee:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800ebf2:	d206      	bcs.n	800ec02 <dhcp_create_msg+0x72>
 800ebf4:	4b4b      	ldr	r3, [pc, #300]	; (800ed24 <dhcp_create_msg+0x194>)
 800ebf6:	f240 7271 	movw	r2, #1905	; 0x771
 800ebfa:	494e      	ldr	r1, [pc, #312]	; (800ed34 <dhcp_create_msg+0x1a4>)
 800ebfc:	484b      	ldr	r0, [pc, #300]	; (800ed2c <dhcp_create_msg+0x19c>)
 800ebfe:	f002 fc1b 	bl	8011438 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800ec02:	79fb      	ldrb	r3, [r7, #7]
 800ec04:	2b03      	cmp	r3, #3
 800ec06:	d103      	bne.n	800ec10 <dhcp_create_msg+0x80>
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	795b      	ldrb	r3, [r3, #5]
 800ec0c:	2b03      	cmp	r3, #3
 800ec0e:	d10d      	bne.n	800ec2c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	799b      	ldrb	r3, [r3, #6]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d105      	bne.n	800ec24 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800ec18:	f002 fc26 	bl	8011468 <rand>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	461a      	mov	r2, r3
 800ec20:	4b45      	ldr	r3, [pc, #276]	; (800ed38 <dhcp_create_msg+0x1a8>)
 800ec22:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800ec24:	4b44      	ldr	r3, [pc, #272]	; (800ed38 <dhcp_create_msg+0x1a8>)
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800ec32:	f44f 729a 	mov.w	r2, #308	; 0x134
 800ec36:	2100      	movs	r1, #0
 800ec38:	6978      	ldr	r0, [r7, #20]
 800ec3a:	f002 fbf5 	bl	8011428 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	2201      	movs	r2, #1
 800ec42:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	2201      	movs	r2, #1
 800ec48:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7f6 fd4c 	bl	80056f6 <lwip_htonl>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800ec64:	79fb      	ldrb	r3, [r7, #7]
 800ec66:	2b08      	cmp	r3, #8
 800ec68:	d010      	beq.n	800ec8c <dhcp_create_msg+0xfc>
 800ec6a:	79fb      	ldrb	r3, [r7, #7]
 800ec6c:	2b04      	cmp	r3, #4
 800ec6e:	d00d      	beq.n	800ec8c <dhcp_create_msg+0xfc>
 800ec70:	79fb      	ldrb	r3, [r7, #7]
 800ec72:	2b07      	cmp	r3, #7
 800ec74:	d00a      	beq.n	800ec8c <dhcp_create_msg+0xfc>
 800ec76:	79fb      	ldrb	r3, [r7, #7]
 800ec78:	2b03      	cmp	r3, #3
 800ec7a:	d10c      	bne.n	800ec96 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800ec80:	2b05      	cmp	r3, #5
 800ec82:	d003      	beq.n	800ec8c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	795b      	ldrb	r3, [r3, #5]
 800ec88:	2b04      	cmp	r3, #4
 800ec8a:	d104      	bne.n	800ec96 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	3304      	adds	r3, #4
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ec96:	2300      	movs	r3, #0
 800ec98:	83fb      	strh	r3, [r7, #30]
 800ec9a:	e00c      	b.n	800ecb6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800ec9c:	8bfa      	ldrh	r2, [r7, #30]
 800ec9e:	8bfb      	ldrh	r3, [r7, #30]
 800eca0:	68f9      	ldr	r1, [r7, #12]
 800eca2:	440a      	add	r2, r1
 800eca4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
 800eca8:	697a      	ldr	r2, [r7, #20]
 800ecaa:	4413      	add	r3, r2
 800ecac:	460a      	mov	r2, r1
 800ecae:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ecb0:	8bfb      	ldrh	r3, [r7, #30]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	83fb      	strh	r3, [r7, #30]
 800ecb6:	8bfb      	ldrh	r3, [r7, #30]
 800ecb8:	2b05      	cmp	r3, #5
 800ecba:	d9ef      	bls.n	800ec9c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800ecc4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800ecce:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800ecd8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800ece2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ecec:	2301      	movs	r3, #1
 800ecee:	2235      	movs	r2, #53	; 0x35
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	f7ff fa7f 	bl	800e1f4 <dhcp_option>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed00:	79fa      	ldrb	r2, [r7, #7]
 800ed02:	8a7b      	ldrh	r3, [r7, #18]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7ff faa9 	bl	800e25c <dhcp_option_byte>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d002      	beq.n	800ed1a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	8a7a      	ldrh	r2, [r7, #18]
 800ed18:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800ed1a:	69bb      	ldr	r3, [r7, #24]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3720      	adds	r7, #32
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	080147b0 	.word	0x080147b0
 800ed28:	08014aec 	.word	0x08014aec
 800ed2c:	08014810 	.word	0x08014810
 800ed30:	08014b0c 	.word	0x08014b0c
 800ed34:	08014b2c 	.word	0x08014b2c
 800ed38:	20000118 	.word	0x20000118

0800ed3c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	4603      	mov	r3, r0
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	607a      	str	r2, [r7, #4]
 800ed48:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800ed4a:	89fb      	ldrh	r3, [r7, #14]
 800ed4c:	1c5a      	adds	r2, r3, #1
 800ed4e:	81fa      	strh	r2, [r7, #14]
 800ed50:	461a      	mov	r2, r3
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	4413      	add	r3, r2
 800ed56:	22ff      	movs	r2, #255	; 0xff
 800ed58:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800ed5a:	e007      	b.n	800ed6c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800ed5c:	89fb      	ldrh	r3, [r7, #14]
 800ed5e:	1c5a      	adds	r2, r3, #1
 800ed60:	81fa      	strh	r2, [r7, #14]
 800ed62:	461a      	mov	r2, r3
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	4413      	add	r3, r2
 800ed68:	2200      	movs	r2, #0
 800ed6a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800ed6c:	89fb      	ldrh	r3, [r7, #14]
 800ed6e:	2b43      	cmp	r3, #67	; 0x43
 800ed70:	d904      	bls.n	800ed7c <dhcp_option_trailer+0x40>
 800ed72:	89fb      	ldrh	r3, [r7, #14]
 800ed74:	f003 0303 	and.w	r3, r3, #3
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d002      	beq.n	800ed82 <dhcp_option_trailer+0x46>
 800ed7c:	89fb      	ldrh	r3, [r7, #14]
 800ed7e:	2b43      	cmp	r3, #67	; 0x43
 800ed80:	d9ec      	bls.n	800ed5c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800ed82:	89fb      	ldrh	r3, [r7, #14]
 800ed84:	33f0      	adds	r3, #240	; 0xf0
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	4619      	mov	r1, r3
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7f7 fdd4 	bl	8006938 <pbuf_realloc>
}
 800ed90:	bf00      	nop
 800ed92:	3710      	adds	r7, #16
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b085      	sub	sp, #20
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d017      	beq.n	800edd6 <dhcp_supplied_address+0x3e>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d013      	beq.n	800edd6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	795b      	ldrb	r3, [r3, #5]
 800edb8:	2b0a      	cmp	r3, #10
 800edba:	d007      	beq.n	800edcc <dhcp_supplied_address+0x34>
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	795b      	ldrb	r3, [r3, #5]
 800edc0:	2b05      	cmp	r3, #5
 800edc2:	d003      	beq.n	800edcc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800edc8:	2b04      	cmp	r3, #4
 800edca:	d101      	bne.n	800edd0 <dhcp_supplied_address+0x38>
 800edcc:	2301      	movs	r3, #1
 800edce:	e000      	b.n	800edd2 <dhcp_supplied_address+0x3a>
 800edd0:	2300      	movs	r3, #0
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	e000      	b.n	800edd8 <dhcp_supplied_address+0x40>
  }
  return 0;
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3714      	adds	r7, #20
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800edec:	4915      	ldr	r1, [pc, #84]	; (800ee44 <etharp_free_entry+0x60>)
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	4613      	mov	r3, r2
 800edf2:	005b      	lsls	r3, r3, #1
 800edf4:	4413      	add	r3, r2
 800edf6:	00db      	lsls	r3, r3, #3
 800edf8:	440b      	add	r3, r1
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d013      	beq.n	800ee28 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ee00:	4910      	ldr	r1, [pc, #64]	; (800ee44 <etharp_free_entry+0x60>)
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	4613      	mov	r3, r2
 800ee06:	005b      	lsls	r3, r3, #1
 800ee08:	4413      	add	r3, r2
 800ee0a:	00db      	lsls	r3, r3, #3
 800ee0c:	440b      	add	r3, r1
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7f7 ff17 	bl	8006c44 <pbuf_free>
    arp_table[i].q = NULL;
 800ee16:	490b      	ldr	r1, [pc, #44]	; (800ee44 <etharp_free_entry+0x60>)
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	005b      	lsls	r3, r3, #1
 800ee1e:	4413      	add	r3, r2
 800ee20:	00db      	lsls	r3, r3, #3
 800ee22:	440b      	add	r3, r1
 800ee24:	2200      	movs	r2, #0
 800ee26:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ee28:	4906      	ldr	r1, [pc, #24]	; (800ee44 <etharp_free_entry+0x60>)
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	4413      	add	r3, r2
 800ee32:	00db      	lsls	r3, r3, #3
 800ee34:	440b      	add	r3, r1
 800ee36:	3314      	adds	r3, #20
 800ee38:	2200      	movs	r2, #0
 800ee3a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ee3c:	bf00      	nop
 800ee3e:	3708      	adds	r7, #8
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	2000011c 	.word	0x2000011c

0800ee48 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee4e:	2300      	movs	r3, #0
 800ee50:	607b      	str	r3, [r7, #4]
 800ee52:	e096      	b.n	800ef82 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ee54:	494f      	ldr	r1, [pc, #316]	; (800ef94 <etharp_tmr+0x14c>)
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	4613      	mov	r3, r2
 800ee5a:	005b      	lsls	r3, r3, #1
 800ee5c:	4413      	add	r3, r2
 800ee5e:	00db      	lsls	r3, r3, #3
 800ee60:	440b      	add	r3, r1
 800ee62:	3314      	adds	r3, #20
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ee68:	78fb      	ldrb	r3, [r7, #3]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	f000 8086 	beq.w	800ef7c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ee70:	4948      	ldr	r1, [pc, #288]	; (800ef94 <etharp_tmr+0x14c>)
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	4613      	mov	r3, r2
 800ee76:	005b      	lsls	r3, r3, #1
 800ee78:	4413      	add	r3, r2
 800ee7a:	00db      	lsls	r3, r3, #3
 800ee7c:	440b      	add	r3, r1
 800ee7e:	3312      	adds	r3, #18
 800ee80:	881b      	ldrh	r3, [r3, #0]
 800ee82:	3301      	adds	r3, #1
 800ee84:	b298      	uxth	r0, r3
 800ee86:	4943      	ldr	r1, [pc, #268]	; (800ef94 <etharp_tmr+0x14c>)
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	005b      	lsls	r3, r3, #1
 800ee8e:	4413      	add	r3, r2
 800ee90:	00db      	lsls	r3, r3, #3
 800ee92:	440b      	add	r3, r1
 800ee94:	3312      	adds	r3, #18
 800ee96:	4602      	mov	r2, r0
 800ee98:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ee9a:	493e      	ldr	r1, [pc, #248]	; (800ef94 <etharp_tmr+0x14c>)
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	4613      	mov	r3, r2
 800eea0:	005b      	lsls	r3, r3, #1
 800eea2:	4413      	add	r3, r2
 800eea4:	00db      	lsls	r3, r3, #3
 800eea6:	440b      	add	r3, r1
 800eea8:	3312      	adds	r3, #18
 800eeaa:	881b      	ldrh	r3, [r3, #0]
 800eeac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800eeb0:	d215      	bcs.n	800eede <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800eeb2:	4938      	ldr	r1, [pc, #224]	; (800ef94 <etharp_tmr+0x14c>)
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	005b      	lsls	r3, r3, #1
 800eeba:	4413      	add	r3, r2
 800eebc:	00db      	lsls	r3, r3, #3
 800eebe:	440b      	add	r3, r1
 800eec0:	3314      	adds	r3, #20
 800eec2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d10e      	bne.n	800eee6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800eec8:	4932      	ldr	r1, [pc, #200]	; (800ef94 <etharp_tmr+0x14c>)
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	4613      	mov	r3, r2
 800eece:	005b      	lsls	r3, r3, #1
 800eed0:	4413      	add	r3, r2
 800eed2:	00db      	lsls	r3, r3, #3
 800eed4:	440b      	add	r3, r1
 800eed6:	3312      	adds	r3, #18
 800eed8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800eeda:	2b04      	cmp	r3, #4
 800eedc:	d903      	bls.n	800eee6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7ff ff80 	bl	800ede4 <etharp_free_entry>
 800eee4:	e04a      	b.n	800ef7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800eee6:	492b      	ldr	r1, [pc, #172]	; (800ef94 <etharp_tmr+0x14c>)
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	4613      	mov	r3, r2
 800eeec:	005b      	lsls	r3, r3, #1
 800eeee:	4413      	add	r3, r2
 800eef0:	00db      	lsls	r3, r3, #3
 800eef2:	440b      	add	r3, r1
 800eef4:	3314      	adds	r3, #20
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	2b03      	cmp	r3, #3
 800eefa:	d10a      	bne.n	800ef12 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800eefc:	4925      	ldr	r1, [pc, #148]	; (800ef94 <etharp_tmr+0x14c>)
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	4613      	mov	r3, r2
 800ef02:	005b      	lsls	r3, r3, #1
 800ef04:	4413      	add	r3, r2
 800ef06:	00db      	lsls	r3, r3, #3
 800ef08:	440b      	add	r3, r1
 800ef0a:	3314      	adds	r3, #20
 800ef0c:	2204      	movs	r2, #4
 800ef0e:	701a      	strb	r2, [r3, #0]
 800ef10:	e034      	b.n	800ef7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ef12:	4920      	ldr	r1, [pc, #128]	; (800ef94 <etharp_tmr+0x14c>)
 800ef14:	687a      	ldr	r2, [r7, #4]
 800ef16:	4613      	mov	r3, r2
 800ef18:	005b      	lsls	r3, r3, #1
 800ef1a:	4413      	add	r3, r2
 800ef1c:	00db      	lsls	r3, r3, #3
 800ef1e:	440b      	add	r3, r1
 800ef20:	3314      	adds	r3, #20
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	2b04      	cmp	r3, #4
 800ef26:	d10a      	bne.n	800ef3e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ef28:	491a      	ldr	r1, [pc, #104]	; (800ef94 <etharp_tmr+0x14c>)
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	4613      	mov	r3, r2
 800ef2e:	005b      	lsls	r3, r3, #1
 800ef30:	4413      	add	r3, r2
 800ef32:	00db      	lsls	r3, r3, #3
 800ef34:	440b      	add	r3, r1
 800ef36:	3314      	adds	r3, #20
 800ef38:	2202      	movs	r2, #2
 800ef3a:	701a      	strb	r2, [r3, #0]
 800ef3c:	e01e      	b.n	800ef7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ef3e:	4915      	ldr	r1, [pc, #84]	; (800ef94 <etharp_tmr+0x14c>)
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	4613      	mov	r3, r2
 800ef44:	005b      	lsls	r3, r3, #1
 800ef46:	4413      	add	r3, r2
 800ef48:	00db      	lsls	r3, r3, #3
 800ef4a:	440b      	add	r3, r1
 800ef4c:	3314      	adds	r3, #20
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	2b01      	cmp	r3, #1
 800ef52:	d113      	bne.n	800ef7c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ef54:	490f      	ldr	r1, [pc, #60]	; (800ef94 <etharp_tmr+0x14c>)
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	4613      	mov	r3, r2
 800ef5a:	005b      	lsls	r3, r3, #1
 800ef5c:	4413      	add	r3, r2
 800ef5e:	00db      	lsls	r3, r3, #3
 800ef60:	440b      	add	r3, r1
 800ef62:	3308      	adds	r3, #8
 800ef64:	6818      	ldr	r0, [r3, #0]
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	4613      	mov	r3, r2
 800ef6a:	005b      	lsls	r3, r3, #1
 800ef6c:	4413      	add	r3, r2
 800ef6e:	00db      	lsls	r3, r3, #3
 800ef70:	4a08      	ldr	r2, [pc, #32]	; (800ef94 <etharp_tmr+0x14c>)
 800ef72:	4413      	add	r3, r2
 800ef74:	3304      	adds	r3, #4
 800ef76:	4619      	mov	r1, r3
 800ef78:	f000 fe72 	bl	800fc60 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	607b      	str	r3, [r7, #4]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2b09      	cmp	r3, #9
 800ef86:	f77f af65 	ble.w	800ee54 <etharp_tmr+0xc>
      }
    }
  }
}
 800ef8a:	bf00      	nop
 800ef8c:	bf00      	nop
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	2000011c 	.word	0x2000011c

0800ef98 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b08a      	sub	sp, #40	; 0x28
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	460b      	mov	r3, r1
 800efa2:	607a      	str	r2, [r7, #4]
 800efa4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800efa6:	230a      	movs	r3, #10
 800efa8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800efaa:	230a      	movs	r3, #10
 800efac:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800efae:	230a      	movs	r3, #10
 800efb0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800efb2:	2300      	movs	r3, #0
 800efb4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800efb6:	230a      	movs	r3, #10
 800efb8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800efba:	2300      	movs	r3, #0
 800efbc:	83bb      	strh	r3, [r7, #28]
 800efbe:	2300      	movs	r3, #0
 800efc0:	837b      	strh	r3, [r7, #26]
 800efc2:	2300      	movs	r3, #0
 800efc4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800efc6:	2300      	movs	r3, #0
 800efc8:	843b      	strh	r3, [r7, #32]
 800efca:	e0ae      	b.n	800f12a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800efcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efd0:	49a6      	ldr	r1, [pc, #664]	; (800f26c <etharp_find_entry+0x2d4>)
 800efd2:	4613      	mov	r3, r2
 800efd4:	005b      	lsls	r3, r3, #1
 800efd6:	4413      	add	r3, r2
 800efd8:	00db      	lsls	r3, r3, #3
 800efda:	440b      	add	r3, r1
 800efdc:	3314      	adds	r3, #20
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800efe2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800efe6:	2b0a      	cmp	r3, #10
 800efe8:	d105      	bne.n	800eff6 <etharp_find_entry+0x5e>
 800efea:	7dfb      	ldrb	r3, [r7, #23]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d102      	bne.n	800eff6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800eff0:	8c3b      	ldrh	r3, [r7, #32]
 800eff2:	847b      	strh	r3, [r7, #34]	; 0x22
 800eff4:	e095      	b.n	800f122 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800eff6:	7dfb      	ldrb	r3, [r7, #23]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f000 8092 	beq.w	800f122 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800effe:	7dfb      	ldrb	r3, [r7, #23]
 800f000:	2b01      	cmp	r3, #1
 800f002:	d009      	beq.n	800f018 <etharp_find_entry+0x80>
 800f004:	7dfb      	ldrb	r3, [r7, #23]
 800f006:	2b01      	cmp	r3, #1
 800f008:	d806      	bhi.n	800f018 <etharp_find_entry+0x80>
 800f00a:	4b99      	ldr	r3, [pc, #612]	; (800f270 <etharp_find_entry+0x2d8>)
 800f00c:	f240 1223 	movw	r2, #291	; 0x123
 800f010:	4998      	ldr	r1, [pc, #608]	; (800f274 <etharp_find_entry+0x2dc>)
 800f012:	4899      	ldr	r0, [pc, #612]	; (800f278 <etharp_find_entry+0x2e0>)
 800f014:	f002 fa10 	bl	8011438 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d020      	beq.n	800f060 <etharp_find_entry+0xc8>
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6819      	ldr	r1, [r3, #0]
 800f022:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f026:	4891      	ldr	r0, [pc, #580]	; (800f26c <etharp_find_entry+0x2d4>)
 800f028:	4613      	mov	r3, r2
 800f02a:	005b      	lsls	r3, r3, #1
 800f02c:	4413      	add	r3, r2
 800f02e:	00db      	lsls	r3, r3, #3
 800f030:	4403      	add	r3, r0
 800f032:	3304      	adds	r3, #4
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4299      	cmp	r1, r3
 800f038:	d112      	bne.n	800f060 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00c      	beq.n	800f05a <etharp_find_entry+0xc2>
 800f040:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f044:	4989      	ldr	r1, [pc, #548]	; (800f26c <etharp_find_entry+0x2d4>)
 800f046:	4613      	mov	r3, r2
 800f048:	005b      	lsls	r3, r3, #1
 800f04a:	4413      	add	r3, r2
 800f04c:	00db      	lsls	r3, r3, #3
 800f04e:	440b      	add	r3, r1
 800f050:	3308      	adds	r3, #8
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	429a      	cmp	r2, r3
 800f058:	d102      	bne.n	800f060 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f05a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f05e:	e100      	b.n	800f262 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f060:	7dfb      	ldrb	r3, [r7, #23]
 800f062:	2b01      	cmp	r3, #1
 800f064:	d140      	bne.n	800f0e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f066:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f06a:	4980      	ldr	r1, [pc, #512]	; (800f26c <etharp_find_entry+0x2d4>)
 800f06c:	4613      	mov	r3, r2
 800f06e:	005b      	lsls	r3, r3, #1
 800f070:	4413      	add	r3, r2
 800f072:	00db      	lsls	r3, r3, #3
 800f074:	440b      	add	r3, r1
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d01a      	beq.n	800f0b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f07c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f080:	497a      	ldr	r1, [pc, #488]	; (800f26c <etharp_find_entry+0x2d4>)
 800f082:	4613      	mov	r3, r2
 800f084:	005b      	lsls	r3, r3, #1
 800f086:	4413      	add	r3, r2
 800f088:	00db      	lsls	r3, r3, #3
 800f08a:	440b      	add	r3, r1
 800f08c:	3312      	adds	r3, #18
 800f08e:	881b      	ldrh	r3, [r3, #0]
 800f090:	8bba      	ldrh	r2, [r7, #28]
 800f092:	429a      	cmp	r2, r3
 800f094:	d845      	bhi.n	800f122 <etharp_find_entry+0x18a>
            old_queue = i;
 800f096:	8c3b      	ldrh	r3, [r7, #32]
 800f098:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f09a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f09e:	4973      	ldr	r1, [pc, #460]	; (800f26c <etharp_find_entry+0x2d4>)
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	005b      	lsls	r3, r3, #1
 800f0a4:	4413      	add	r3, r2
 800f0a6:	00db      	lsls	r3, r3, #3
 800f0a8:	440b      	add	r3, r1
 800f0aa:	3312      	adds	r3, #18
 800f0ac:	881b      	ldrh	r3, [r3, #0]
 800f0ae:	83bb      	strh	r3, [r7, #28]
 800f0b0:	e037      	b.n	800f122 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f0b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0b6:	496d      	ldr	r1, [pc, #436]	; (800f26c <etharp_find_entry+0x2d4>)
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	005b      	lsls	r3, r3, #1
 800f0bc:	4413      	add	r3, r2
 800f0be:	00db      	lsls	r3, r3, #3
 800f0c0:	440b      	add	r3, r1
 800f0c2:	3312      	adds	r3, #18
 800f0c4:	881b      	ldrh	r3, [r3, #0]
 800f0c6:	8b7a      	ldrh	r2, [r7, #26]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d82a      	bhi.n	800f122 <etharp_find_entry+0x18a>
            old_pending = i;
 800f0cc:	8c3b      	ldrh	r3, [r7, #32]
 800f0ce:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f0d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0d4:	4965      	ldr	r1, [pc, #404]	; (800f26c <etharp_find_entry+0x2d4>)
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	005b      	lsls	r3, r3, #1
 800f0da:	4413      	add	r3, r2
 800f0dc:	00db      	lsls	r3, r3, #3
 800f0de:	440b      	add	r3, r1
 800f0e0:	3312      	adds	r3, #18
 800f0e2:	881b      	ldrh	r3, [r3, #0]
 800f0e4:	837b      	strh	r3, [r7, #26]
 800f0e6:	e01c      	b.n	800f122 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f0e8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d919      	bls.n	800f122 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f0ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0f2:	495e      	ldr	r1, [pc, #376]	; (800f26c <etharp_find_entry+0x2d4>)
 800f0f4:	4613      	mov	r3, r2
 800f0f6:	005b      	lsls	r3, r3, #1
 800f0f8:	4413      	add	r3, r2
 800f0fa:	00db      	lsls	r3, r3, #3
 800f0fc:	440b      	add	r3, r1
 800f0fe:	3312      	adds	r3, #18
 800f100:	881b      	ldrh	r3, [r3, #0]
 800f102:	8b3a      	ldrh	r2, [r7, #24]
 800f104:	429a      	cmp	r2, r3
 800f106:	d80c      	bhi.n	800f122 <etharp_find_entry+0x18a>
            old_stable = i;
 800f108:	8c3b      	ldrh	r3, [r7, #32]
 800f10a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f10c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f110:	4956      	ldr	r1, [pc, #344]	; (800f26c <etharp_find_entry+0x2d4>)
 800f112:	4613      	mov	r3, r2
 800f114:	005b      	lsls	r3, r3, #1
 800f116:	4413      	add	r3, r2
 800f118:	00db      	lsls	r3, r3, #3
 800f11a:	440b      	add	r3, r1
 800f11c:	3312      	adds	r3, #18
 800f11e:	881b      	ldrh	r3, [r3, #0]
 800f120:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f122:	8c3b      	ldrh	r3, [r7, #32]
 800f124:	3301      	adds	r3, #1
 800f126:	b29b      	uxth	r3, r3
 800f128:	843b      	strh	r3, [r7, #32]
 800f12a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f12e:	2b09      	cmp	r3, #9
 800f130:	f77f af4c 	ble.w	800efcc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f134:	7afb      	ldrb	r3, [r7, #11]
 800f136:	f003 0302 	and.w	r3, r3, #2
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d108      	bne.n	800f150 <etharp_find_entry+0x1b8>
 800f13e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f142:	2b0a      	cmp	r3, #10
 800f144:	d107      	bne.n	800f156 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f146:	7afb      	ldrb	r3, [r7, #11]
 800f148:	f003 0301 	and.w	r3, r3, #1
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d102      	bne.n	800f156 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f150:	f04f 33ff 	mov.w	r3, #4294967295
 800f154:	e085      	b.n	800f262 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f156:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f15a:	2b09      	cmp	r3, #9
 800f15c:	dc02      	bgt.n	800f164 <etharp_find_entry+0x1cc>
    i = empty;
 800f15e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f160:	843b      	strh	r3, [r7, #32]
 800f162:	e039      	b.n	800f1d8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f164:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f168:	2b09      	cmp	r3, #9
 800f16a:	dc14      	bgt.n	800f196 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f16c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f16e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f170:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f174:	493d      	ldr	r1, [pc, #244]	; (800f26c <etharp_find_entry+0x2d4>)
 800f176:	4613      	mov	r3, r2
 800f178:	005b      	lsls	r3, r3, #1
 800f17a:	4413      	add	r3, r2
 800f17c:	00db      	lsls	r3, r3, #3
 800f17e:	440b      	add	r3, r1
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d018      	beq.n	800f1b8 <etharp_find_entry+0x220>
 800f186:	4b3a      	ldr	r3, [pc, #232]	; (800f270 <etharp_find_entry+0x2d8>)
 800f188:	f240 126d 	movw	r2, #365	; 0x16d
 800f18c:	493b      	ldr	r1, [pc, #236]	; (800f27c <etharp_find_entry+0x2e4>)
 800f18e:	483a      	ldr	r0, [pc, #232]	; (800f278 <etharp_find_entry+0x2e0>)
 800f190:	f002 f952 	bl	8011438 <iprintf>
 800f194:	e010      	b.n	800f1b8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f196:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f19a:	2b09      	cmp	r3, #9
 800f19c:	dc02      	bgt.n	800f1a4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f19e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f1a0:	843b      	strh	r3, [r7, #32]
 800f1a2:	e009      	b.n	800f1b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f1a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f1a8:	2b09      	cmp	r3, #9
 800f1aa:	dc02      	bgt.n	800f1b2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f1ac:	8bfb      	ldrh	r3, [r7, #30]
 800f1ae:	843b      	strh	r3, [r7, #32]
 800f1b0:	e002      	b.n	800f1b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f1b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1b6:	e054      	b.n	800f262 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f1b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f1bc:	2b09      	cmp	r3, #9
 800f1be:	dd06      	ble.n	800f1ce <etharp_find_entry+0x236>
 800f1c0:	4b2b      	ldr	r3, [pc, #172]	; (800f270 <etharp_find_entry+0x2d8>)
 800f1c2:	f240 127f 	movw	r2, #383	; 0x17f
 800f1c6:	492e      	ldr	r1, [pc, #184]	; (800f280 <etharp_find_entry+0x2e8>)
 800f1c8:	482b      	ldr	r0, [pc, #172]	; (800f278 <etharp_find_entry+0x2e0>)
 800f1ca:	f002 f935 	bl	8011438 <iprintf>
    etharp_free_entry(i);
 800f1ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7ff fe06 	bl	800ede4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f1d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f1dc:	2b09      	cmp	r3, #9
 800f1de:	dd06      	ble.n	800f1ee <etharp_find_entry+0x256>
 800f1e0:	4b23      	ldr	r3, [pc, #140]	; (800f270 <etharp_find_entry+0x2d8>)
 800f1e2:	f240 1283 	movw	r2, #387	; 0x183
 800f1e6:	4926      	ldr	r1, [pc, #152]	; (800f280 <etharp_find_entry+0x2e8>)
 800f1e8:	4823      	ldr	r0, [pc, #140]	; (800f278 <etharp_find_entry+0x2e0>)
 800f1ea:	f002 f925 	bl	8011438 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f1ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1f2:	491e      	ldr	r1, [pc, #120]	; (800f26c <etharp_find_entry+0x2d4>)
 800f1f4:	4613      	mov	r3, r2
 800f1f6:	005b      	lsls	r3, r3, #1
 800f1f8:	4413      	add	r3, r2
 800f1fa:	00db      	lsls	r3, r3, #3
 800f1fc:	440b      	add	r3, r1
 800f1fe:	3314      	adds	r3, #20
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d006      	beq.n	800f214 <etharp_find_entry+0x27c>
 800f206:	4b1a      	ldr	r3, [pc, #104]	; (800f270 <etharp_find_entry+0x2d8>)
 800f208:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f20c:	491d      	ldr	r1, [pc, #116]	; (800f284 <etharp_find_entry+0x2ec>)
 800f20e:	481a      	ldr	r0, [pc, #104]	; (800f278 <etharp_find_entry+0x2e0>)
 800f210:	f002 f912 	bl	8011438 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00b      	beq.n	800f232 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f21a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6819      	ldr	r1, [r3, #0]
 800f222:	4812      	ldr	r0, [pc, #72]	; (800f26c <etharp_find_entry+0x2d4>)
 800f224:	4613      	mov	r3, r2
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	4413      	add	r3, r2
 800f22a:	00db      	lsls	r3, r3, #3
 800f22c:	4403      	add	r3, r0
 800f22e:	3304      	adds	r3, #4
 800f230:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f232:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f236:	490d      	ldr	r1, [pc, #52]	; (800f26c <etharp_find_entry+0x2d4>)
 800f238:	4613      	mov	r3, r2
 800f23a:	005b      	lsls	r3, r3, #1
 800f23c:	4413      	add	r3, r2
 800f23e:	00db      	lsls	r3, r3, #3
 800f240:	440b      	add	r3, r1
 800f242:	3312      	adds	r3, #18
 800f244:	2200      	movs	r2, #0
 800f246:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f248:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f24c:	4907      	ldr	r1, [pc, #28]	; (800f26c <etharp_find_entry+0x2d4>)
 800f24e:	4613      	mov	r3, r2
 800f250:	005b      	lsls	r3, r3, #1
 800f252:	4413      	add	r3, r2
 800f254:	00db      	lsls	r3, r3, #3
 800f256:	440b      	add	r3, r1
 800f258:	3308      	adds	r3, #8
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f25e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f262:	4618      	mov	r0, r3
 800f264:	3728      	adds	r7, #40	; 0x28
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	2000011c 	.word	0x2000011c
 800f270:	08014b6c 	.word	0x08014b6c
 800f274:	08014ba4 	.word	0x08014ba4
 800f278:	08014be4 	.word	0x08014be4
 800f27c:	08014c0c 	.word	0x08014c0c
 800f280:	08014c24 	.word	0x08014c24
 800f284:	08014c38 	.word	0x08014c38

0800f288 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b088      	sub	sp, #32
 800f28c:	af02      	add	r7, sp, #8
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
 800f294:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f29c:	2b06      	cmp	r3, #6
 800f29e:	d006      	beq.n	800f2ae <etharp_update_arp_entry+0x26>
 800f2a0:	4b48      	ldr	r3, [pc, #288]	; (800f3c4 <etharp_update_arp_entry+0x13c>)
 800f2a2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f2a6:	4948      	ldr	r1, [pc, #288]	; (800f3c8 <etharp_update_arp_entry+0x140>)
 800f2a8:	4848      	ldr	r0, [pc, #288]	; (800f3cc <etharp_update_arp_entry+0x144>)
 800f2aa:	f002 f8c5 	bl	8011438 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d012      	beq.n	800f2da <etharp_update_arp_entry+0x52>
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d00e      	beq.n	800f2da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	68f9      	ldr	r1, [r7, #12]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f001 f920 	bl	8010508 <ip4_addr_isbroadcast_u32>
 800f2c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d105      	bne.n	800f2da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f2d6:	2be0      	cmp	r3, #224	; 0xe0
 800f2d8:	d102      	bne.n	800f2e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f2da:	f06f 030f 	mvn.w	r3, #15
 800f2de:	e06c      	b.n	800f3ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f2e0:	78fb      	ldrb	r3, [r7, #3]
 800f2e2:	68fa      	ldr	r2, [r7, #12]
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	68b8      	ldr	r0, [r7, #8]
 800f2e8:	f7ff fe56 	bl	800ef98 <etharp_find_entry>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f2f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	da02      	bge.n	800f2fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f2f8:	8afb      	ldrh	r3, [r7, #22]
 800f2fa:	b25b      	sxtb	r3, r3
 800f2fc:	e05d      	b.n	800f3ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f2fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f302:	4933      	ldr	r1, [pc, #204]	; (800f3d0 <etharp_update_arp_entry+0x148>)
 800f304:	4613      	mov	r3, r2
 800f306:	005b      	lsls	r3, r3, #1
 800f308:	4413      	add	r3, r2
 800f30a:	00db      	lsls	r3, r3, #3
 800f30c:	440b      	add	r3, r1
 800f30e:	3314      	adds	r3, #20
 800f310:	2202      	movs	r2, #2
 800f312:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f314:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f318:	492d      	ldr	r1, [pc, #180]	; (800f3d0 <etharp_update_arp_entry+0x148>)
 800f31a:	4613      	mov	r3, r2
 800f31c:	005b      	lsls	r3, r3, #1
 800f31e:	4413      	add	r3, r2
 800f320:	00db      	lsls	r3, r3, #3
 800f322:	440b      	add	r3, r1
 800f324:	3308      	adds	r3, #8
 800f326:	68fa      	ldr	r2, [r7, #12]
 800f328:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f32a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f32e:	4613      	mov	r3, r2
 800f330:	005b      	lsls	r3, r3, #1
 800f332:	4413      	add	r3, r2
 800f334:	00db      	lsls	r3, r3, #3
 800f336:	3308      	adds	r3, #8
 800f338:	4a25      	ldr	r2, [pc, #148]	; (800f3d0 <etharp_update_arp_entry+0x148>)
 800f33a:	4413      	add	r3, r2
 800f33c:	3304      	adds	r3, #4
 800f33e:	2206      	movs	r2, #6
 800f340:	6879      	ldr	r1, [r7, #4]
 800f342:	4618      	mov	r0, r3
 800f344:	f002 f862 	bl	801140c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f348:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f34c:	4920      	ldr	r1, [pc, #128]	; (800f3d0 <etharp_update_arp_entry+0x148>)
 800f34e:	4613      	mov	r3, r2
 800f350:	005b      	lsls	r3, r3, #1
 800f352:	4413      	add	r3, r2
 800f354:	00db      	lsls	r3, r3, #3
 800f356:	440b      	add	r3, r1
 800f358:	3312      	adds	r3, #18
 800f35a:	2200      	movs	r2, #0
 800f35c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f35e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f362:	491b      	ldr	r1, [pc, #108]	; (800f3d0 <etharp_update_arp_entry+0x148>)
 800f364:	4613      	mov	r3, r2
 800f366:	005b      	lsls	r3, r3, #1
 800f368:	4413      	add	r3, r2
 800f36a:	00db      	lsls	r3, r3, #3
 800f36c:	440b      	add	r3, r1
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d021      	beq.n	800f3b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f374:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f378:	4915      	ldr	r1, [pc, #84]	; (800f3d0 <etharp_update_arp_entry+0x148>)
 800f37a:	4613      	mov	r3, r2
 800f37c:	005b      	lsls	r3, r3, #1
 800f37e:	4413      	add	r3, r2
 800f380:	00db      	lsls	r3, r3, #3
 800f382:	440b      	add	r3, r1
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f388:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f38c:	4910      	ldr	r1, [pc, #64]	; (800f3d0 <etharp_update_arp_entry+0x148>)
 800f38e:	4613      	mov	r3, r2
 800f390:	005b      	lsls	r3, r3, #1
 800f392:	4413      	add	r3, r2
 800f394:	00db      	lsls	r3, r3, #3
 800f396:	440b      	add	r3, r1
 800f398:	2200      	movs	r2, #0
 800f39a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800f3a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f3a6:	9300      	str	r3, [sp, #0]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6939      	ldr	r1, [r7, #16]
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f001 ffb3 	bl	8011318 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f3b2:	6938      	ldr	r0, [r7, #16]
 800f3b4:	f7f7 fc46 	bl	8006c44 <pbuf_free>
  }
  return ERR_OK;
 800f3b8:	2300      	movs	r3, #0
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3718      	adds	r7, #24
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	08014b6c 	.word	0x08014b6c
 800f3c8:	08014c64 	.word	0x08014c64
 800f3cc:	08014be4 	.word	0x08014be4
 800f3d0:	2000011c 	.word	0x2000011c

0800f3d4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f3dc:	2300      	movs	r3, #0
 800f3de:	60fb      	str	r3, [r7, #12]
 800f3e0:	e01e      	b.n	800f420 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f3e2:	4913      	ldr	r1, [pc, #76]	; (800f430 <etharp_cleanup_netif+0x5c>)
 800f3e4:	68fa      	ldr	r2, [r7, #12]
 800f3e6:	4613      	mov	r3, r2
 800f3e8:	005b      	lsls	r3, r3, #1
 800f3ea:	4413      	add	r3, r2
 800f3ec:	00db      	lsls	r3, r3, #3
 800f3ee:	440b      	add	r3, r1
 800f3f0:	3314      	adds	r3, #20
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f3f6:	7afb      	ldrb	r3, [r7, #11]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d00e      	beq.n	800f41a <etharp_cleanup_netif+0x46>
 800f3fc:	490c      	ldr	r1, [pc, #48]	; (800f430 <etharp_cleanup_netif+0x5c>)
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	4613      	mov	r3, r2
 800f402:	005b      	lsls	r3, r3, #1
 800f404:	4413      	add	r3, r2
 800f406:	00db      	lsls	r3, r3, #3
 800f408:	440b      	add	r3, r1
 800f40a:	3308      	adds	r3, #8
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	429a      	cmp	r2, r3
 800f412:	d102      	bne.n	800f41a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f414:	68f8      	ldr	r0, [r7, #12]
 800f416:	f7ff fce5 	bl	800ede4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	3301      	adds	r3, #1
 800f41e:	60fb      	str	r3, [r7, #12]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2b09      	cmp	r3, #9
 800f424:	dddd      	ble.n	800f3e2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800f426:	bf00      	nop
 800f428:	bf00      	nop
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	2000011c 	.word	0x2000011c

0800f434 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f434:	b5b0      	push	{r4, r5, r7, lr}
 800f436:	b08a      	sub	sp, #40	; 0x28
 800f438:	af04      	add	r7, sp, #16
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d107      	bne.n	800f454 <etharp_input+0x20>
 800f444:	4b3f      	ldr	r3, [pc, #252]	; (800f544 <etharp_input+0x110>)
 800f446:	f240 228a 	movw	r2, #650	; 0x28a
 800f44a:	493f      	ldr	r1, [pc, #252]	; (800f548 <etharp_input+0x114>)
 800f44c:	483f      	ldr	r0, [pc, #252]	; (800f54c <etharp_input+0x118>)
 800f44e:	f001 fff3 	bl	8011438 <iprintf>
 800f452:	e074      	b.n	800f53e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	881b      	ldrh	r3, [r3, #0]
 800f45e:	b29b      	uxth	r3, r3
 800f460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f464:	d10c      	bne.n	800f480 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f46a:	2b06      	cmp	r3, #6
 800f46c:	d108      	bne.n	800f480 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f472:	2b04      	cmp	r3, #4
 800f474:	d104      	bne.n	800f480 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	885b      	ldrh	r3, [r3, #2]
 800f47a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f47c:	2b08      	cmp	r3, #8
 800f47e:	d003      	beq.n	800f488 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f7f7 fbdf 	bl	8006c44 <pbuf_free>
    return;
 800f486:	e05a      	b.n	800f53e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	330e      	adds	r3, #14
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	3318      	adds	r3, #24
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	3304      	adds	r3, #4
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d102      	bne.n	800f4a8 <etharp_input+0x74>
    for_us = 0;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	75fb      	strb	r3, [r7, #23]
 800f4a6:	e009      	b.n	800f4bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f4a8:	68ba      	ldr	r2, [r7, #8]
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	3304      	adds	r3, #4
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	bf0c      	ite	eq
 800f4b4:	2301      	moveq	r3, #1
 800f4b6:	2300      	movne	r3, #0
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	f103 0208 	add.w	r2, r3, #8
 800f4c2:	7dfb      	ldrb	r3, [r7, #23]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d001      	beq.n	800f4cc <etharp_input+0x98>
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	e000      	b.n	800f4ce <etharp_input+0x9a>
 800f4cc:	2302      	movs	r3, #2
 800f4ce:	f107 010c 	add.w	r1, r7, #12
 800f4d2:	6838      	ldr	r0, [r7, #0]
 800f4d4:	f7ff fed8 	bl	800f288 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	88db      	ldrh	r3, [r3, #6]
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4e2:	d003      	beq.n	800f4ec <etharp_input+0xb8>
 800f4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4e8:	d01e      	beq.n	800f528 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f4ea:	e025      	b.n	800f538 <etharp_input+0x104>
      if (for_us) {
 800f4ec:	7dfb      	ldrb	r3, [r7, #23]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d021      	beq.n	800f536 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	f103 052e 	add.w	r5, r3, #46	; 0x2e
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f508:	693a      	ldr	r2, [r7, #16]
 800f50a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f50c:	2102      	movs	r1, #2
 800f50e:	9103      	str	r1, [sp, #12]
 800f510:	f107 010c 	add.w	r1, r7, #12
 800f514:	9102      	str	r1, [sp, #8]
 800f516:	9201      	str	r2, [sp, #4]
 800f518:	9300      	str	r3, [sp, #0]
 800f51a:	462b      	mov	r3, r5
 800f51c:	4622      	mov	r2, r4
 800f51e:	4601      	mov	r1, r0
 800f520:	6838      	ldr	r0, [r7, #0]
 800f522:	f000 faef 	bl	800fb04 <etharp_raw>
      break;
 800f526:	e006      	b.n	800f536 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800f528:	f107 030c 	add.w	r3, r7, #12
 800f52c:	4619      	mov	r1, r3
 800f52e:	6838      	ldr	r0, [r7, #0]
 800f530:	f7fe f988 	bl	800d844 <dhcp_arp_reply>
      break;
 800f534:	e000      	b.n	800f538 <etharp_input+0x104>
      break;
 800f536:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7f7 fb83 	bl	8006c44 <pbuf_free>
}
 800f53e:	3718      	adds	r7, #24
 800f540:	46bd      	mov	sp, r7
 800f542:	bdb0      	pop	{r4, r5, r7, pc}
 800f544:	08014b6c 	.word	0x08014b6c
 800f548:	08014cbc 	.word	0x08014cbc
 800f54c:	08014be4 	.word	0x08014be4

0800f550 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af02      	add	r7, sp, #8
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	4613      	mov	r3, r2
 800f55c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f55e:	79fa      	ldrb	r2, [r7, #7]
 800f560:	4944      	ldr	r1, [pc, #272]	; (800f674 <etharp_output_to_arp_index+0x124>)
 800f562:	4613      	mov	r3, r2
 800f564:	005b      	lsls	r3, r3, #1
 800f566:	4413      	add	r3, r2
 800f568:	00db      	lsls	r3, r3, #3
 800f56a:	440b      	add	r3, r1
 800f56c:	3314      	adds	r3, #20
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	2b01      	cmp	r3, #1
 800f572:	d806      	bhi.n	800f582 <etharp_output_to_arp_index+0x32>
 800f574:	4b40      	ldr	r3, [pc, #256]	; (800f678 <etharp_output_to_arp_index+0x128>)
 800f576:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f57a:	4940      	ldr	r1, [pc, #256]	; (800f67c <etharp_output_to_arp_index+0x12c>)
 800f57c:	4840      	ldr	r0, [pc, #256]	; (800f680 <etharp_output_to_arp_index+0x130>)
 800f57e:	f001 ff5b 	bl	8011438 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f582:	79fa      	ldrb	r2, [r7, #7]
 800f584:	493b      	ldr	r1, [pc, #236]	; (800f674 <etharp_output_to_arp_index+0x124>)
 800f586:	4613      	mov	r3, r2
 800f588:	005b      	lsls	r3, r3, #1
 800f58a:	4413      	add	r3, r2
 800f58c:	00db      	lsls	r3, r3, #3
 800f58e:	440b      	add	r3, r1
 800f590:	3314      	adds	r3, #20
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	2b02      	cmp	r3, #2
 800f596:	d153      	bne.n	800f640 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f598:	79fa      	ldrb	r2, [r7, #7]
 800f59a:	4936      	ldr	r1, [pc, #216]	; (800f674 <etharp_output_to_arp_index+0x124>)
 800f59c:	4613      	mov	r3, r2
 800f59e:	005b      	lsls	r3, r3, #1
 800f5a0:	4413      	add	r3, r2
 800f5a2:	00db      	lsls	r3, r3, #3
 800f5a4:	440b      	add	r3, r1
 800f5a6:	3312      	adds	r3, #18
 800f5a8:	881b      	ldrh	r3, [r3, #0]
 800f5aa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f5ae:	d919      	bls.n	800f5e4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f5b0:	79fa      	ldrb	r2, [r7, #7]
 800f5b2:	4613      	mov	r3, r2
 800f5b4:	005b      	lsls	r3, r3, #1
 800f5b6:	4413      	add	r3, r2
 800f5b8:	00db      	lsls	r3, r3, #3
 800f5ba:	4a2e      	ldr	r2, [pc, #184]	; (800f674 <etharp_output_to_arp_index+0x124>)
 800f5bc:	4413      	add	r3, r2
 800f5be:	3304      	adds	r3, #4
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f000 fb4c 	bl	800fc60 <etharp_request>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d138      	bne.n	800f640 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f5ce:	79fa      	ldrb	r2, [r7, #7]
 800f5d0:	4928      	ldr	r1, [pc, #160]	; (800f674 <etharp_output_to_arp_index+0x124>)
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	005b      	lsls	r3, r3, #1
 800f5d6:	4413      	add	r3, r2
 800f5d8:	00db      	lsls	r3, r3, #3
 800f5da:	440b      	add	r3, r1
 800f5dc:	3314      	adds	r3, #20
 800f5de:	2203      	movs	r2, #3
 800f5e0:	701a      	strb	r2, [r3, #0]
 800f5e2:	e02d      	b.n	800f640 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f5e4:	79fa      	ldrb	r2, [r7, #7]
 800f5e6:	4923      	ldr	r1, [pc, #140]	; (800f674 <etharp_output_to_arp_index+0x124>)
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	005b      	lsls	r3, r3, #1
 800f5ec:	4413      	add	r3, r2
 800f5ee:	00db      	lsls	r3, r3, #3
 800f5f0:	440b      	add	r3, r1
 800f5f2:	3312      	adds	r3, #18
 800f5f4:	881b      	ldrh	r3, [r3, #0]
 800f5f6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f5fa:	d321      	bcc.n	800f640 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f5fc:	79fa      	ldrb	r2, [r7, #7]
 800f5fe:	4613      	mov	r3, r2
 800f600:	005b      	lsls	r3, r3, #1
 800f602:	4413      	add	r3, r2
 800f604:	00db      	lsls	r3, r3, #3
 800f606:	4a1b      	ldr	r2, [pc, #108]	; (800f674 <etharp_output_to_arp_index+0x124>)
 800f608:	4413      	add	r3, r2
 800f60a:	1d19      	adds	r1, r3, #4
 800f60c:	79fa      	ldrb	r2, [r7, #7]
 800f60e:	4613      	mov	r3, r2
 800f610:	005b      	lsls	r3, r3, #1
 800f612:	4413      	add	r3, r2
 800f614:	00db      	lsls	r3, r3, #3
 800f616:	3308      	adds	r3, #8
 800f618:	4a16      	ldr	r2, [pc, #88]	; (800f674 <etharp_output_to_arp_index+0x124>)
 800f61a:	4413      	add	r3, r2
 800f61c:	3304      	adds	r3, #4
 800f61e:	461a      	mov	r2, r3
 800f620:	68f8      	ldr	r0, [r7, #12]
 800f622:	f000 fafb 	bl	800fc1c <etharp_request_dst>
 800f626:	4603      	mov	r3, r0
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d109      	bne.n	800f640 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f62c:	79fa      	ldrb	r2, [r7, #7]
 800f62e:	4911      	ldr	r1, [pc, #68]	; (800f674 <etharp_output_to_arp_index+0x124>)
 800f630:	4613      	mov	r3, r2
 800f632:	005b      	lsls	r3, r3, #1
 800f634:	4413      	add	r3, r2
 800f636:	00db      	lsls	r3, r3, #3
 800f638:	440b      	add	r3, r1
 800f63a:	3314      	adds	r3, #20
 800f63c:	2203      	movs	r2, #3
 800f63e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 800f646:	79fa      	ldrb	r2, [r7, #7]
 800f648:	4613      	mov	r3, r2
 800f64a:	005b      	lsls	r3, r3, #1
 800f64c:	4413      	add	r3, r2
 800f64e:	00db      	lsls	r3, r3, #3
 800f650:	3308      	adds	r3, #8
 800f652:	4a08      	ldr	r2, [pc, #32]	; (800f674 <etharp_output_to_arp_index+0x124>)
 800f654:	4413      	add	r3, r2
 800f656:	3304      	adds	r3, #4
 800f658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f65c:	9200      	str	r2, [sp, #0]
 800f65e:	460a      	mov	r2, r1
 800f660:	68b9      	ldr	r1, [r7, #8]
 800f662:	68f8      	ldr	r0, [r7, #12]
 800f664:	f001 fe58 	bl	8011318 <ethernet_output>
 800f668:	4603      	mov	r3, r0
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3710      	adds	r7, #16
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	2000011c 	.word	0x2000011c
 800f678:	08014b6c 	.word	0x08014b6c
 800f67c:	08014cdc 	.word	0x08014cdc
 800f680:	08014be4 	.word	0x08014be4

0800f684 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b08a      	sub	sp, #40	; 0x28
 800f688:	af02      	add	r7, sp, #8
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d106      	bne.n	800f6a8 <etharp_output+0x24>
 800f69a:	4b73      	ldr	r3, [pc, #460]	; (800f868 <etharp_output+0x1e4>)
 800f69c:	f240 321e 	movw	r2, #798	; 0x31e
 800f6a0:	4972      	ldr	r1, [pc, #456]	; (800f86c <etharp_output+0x1e8>)
 800f6a2:	4873      	ldr	r0, [pc, #460]	; (800f870 <etharp_output+0x1ec>)
 800f6a4:	f001 fec8 	bl	8011438 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d106      	bne.n	800f6bc <etharp_output+0x38>
 800f6ae:	4b6e      	ldr	r3, [pc, #440]	; (800f868 <etharp_output+0x1e4>)
 800f6b0:	f240 321f 	movw	r2, #799	; 0x31f
 800f6b4:	496f      	ldr	r1, [pc, #444]	; (800f874 <etharp_output+0x1f0>)
 800f6b6:	486e      	ldr	r0, [pc, #440]	; (800f870 <etharp_output+0x1ec>)
 800f6b8:	f001 febe 	bl	8011438 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d106      	bne.n	800f6d0 <etharp_output+0x4c>
 800f6c2:	4b69      	ldr	r3, [pc, #420]	; (800f868 <etharp_output+0x1e4>)
 800f6c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f6c8:	496b      	ldr	r1, [pc, #428]	; (800f878 <etharp_output+0x1f4>)
 800f6ca:	4869      	ldr	r0, [pc, #420]	; (800f870 <etharp_output+0x1ec>)
 800f6cc:	f001 feb4 	bl	8011438 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	68f9      	ldr	r1, [r7, #12]
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f000 ff16 	bl	8010508 <ip4_addr_isbroadcast_u32>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d002      	beq.n	800f6e8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f6e2:	4b66      	ldr	r3, [pc, #408]	; (800f87c <etharp_output+0x1f8>)
 800f6e4:	61fb      	str	r3, [r7, #28]
 800f6e6:	e0af      	b.n	800f848 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f6f0:	2be0      	cmp	r3, #224	; 0xe0
 800f6f2:	d118      	bne.n	800f726 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f6fc:	235e      	movs	r3, #94	; 0x5e
 800f6fe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	3301      	adds	r3, #1
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	3302      	adds	r3, #2
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	3303      	adds	r3, #3
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f71e:	f107 0310 	add.w	r3, r7, #16
 800f722:	61fb      	str	r3, [r7, #28]
 800f724:	e090      	b.n	800f848 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	3304      	adds	r3, #4
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	405a      	eors	r2, r3
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	3308      	adds	r3, #8
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4013      	ands	r3, r2
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d012      	beq.n	800f764 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f744:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f748:	4293      	cmp	r3, r2
 800f74a:	d00b      	beq.n	800f764 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	330c      	adds	r3, #12
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d003      	beq.n	800f75e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	330c      	adds	r3, #12
 800f75a:	61bb      	str	r3, [r7, #24]
 800f75c:	e002      	b.n	800f764 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f75e:	f06f 0303 	mvn.w	r3, #3
 800f762:	e07d      	b.n	800f860 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f764:	4b46      	ldr	r3, [pc, #280]	; (800f880 <etharp_output+0x1fc>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	4619      	mov	r1, r3
 800f76a:	4a46      	ldr	r2, [pc, #280]	; (800f884 <etharp_output+0x200>)
 800f76c:	460b      	mov	r3, r1
 800f76e:	005b      	lsls	r3, r3, #1
 800f770:	440b      	add	r3, r1
 800f772:	00db      	lsls	r3, r3, #3
 800f774:	4413      	add	r3, r2
 800f776:	3314      	adds	r3, #20
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	d925      	bls.n	800f7ca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f77e:	4b40      	ldr	r3, [pc, #256]	; (800f880 <etharp_output+0x1fc>)
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	4619      	mov	r1, r3
 800f784:	4a3f      	ldr	r2, [pc, #252]	; (800f884 <etharp_output+0x200>)
 800f786:	460b      	mov	r3, r1
 800f788:	005b      	lsls	r3, r3, #1
 800f78a:	440b      	add	r3, r1
 800f78c:	00db      	lsls	r3, r3, #3
 800f78e:	4413      	add	r3, r2
 800f790:	3308      	adds	r3, #8
 800f792:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f794:	68fa      	ldr	r2, [r7, #12]
 800f796:	429a      	cmp	r2, r3
 800f798:	d117      	bne.n	800f7ca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	4b38      	ldr	r3, [pc, #224]	; (800f880 <etharp_output+0x1fc>)
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	4937      	ldr	r1, [pc, #220]	; (800f884 <etharp_output+0x200>)
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	005b      	lsls	r3, r3, #1
 800f7aa:	4403      	add	r3, r0
 800f7ac:	00db      	lsls	r3, r3, #3
 800f7ae:	440b      	add	r3, r1
 800f7b0:	3304      	adds	r3, #4
 800f7b2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d108      	bne.n	800f7ca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f7b8:	4b31      	ldr	r3, [pc, #196]	; (800f880 <etharp_output+0x1fc>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	461a      	mov	r2, r3
 800f7be:	68b9      	ldr	r1, [r7, #8]
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f7ff fec5 	bl	800f550 <etharp_output_to_arp_index>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	e04a      	b.n	800f860 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	75fb      	strb	r3, [r7, #23]
 800f7ce:	e031      	b.n	800f834 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f7d0:	7dfa      	ldrb	r2, [r7, #23]
 800f7d2:	492c      	ldr	r1, [pc, #176]	; (800f884 <etharp_output+0x200>)
 800f7d4:	4613      	mov	r3, r2
 800f7d6:	005b      	lsls	r3, r3, #1
 800f7d8:	4413      	add	r3, r2
 800f7da:	00db      	lsls	r3, r3, #3
 800f7dc:	440b      	add	r3, r1
 800f7de:	3314      	adds	r3, #20
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	2b01      	cmp	r3, #1
 800f7e4:	d923      	bls.n	800f82e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f7e6:	7dfa      	ldrb	r2, [r7, #23]
 800f7e8:	4926      	ldr	r1, [pc, #152]	; (800f884 <etharp_output+0x200>)
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	005b      	lsls	r3, r3, #1
 800f7ee:	4413      	add	r3, r2
 800f7f0:	00db      	lsls	r3, r3, #3
 800f7f2:	440b      	add	r3, r1
 800f7f4:	3308      	adds	r3, #8
 800f7f6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f7f8:	68fa      	ldr	r2, [r7, #12]
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d117      	bne.n	800f82e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f7fe:	69bb      	ldr	r3, [r7, #24]
 800f800:	6819      	ldr	r1, [r3, #0]
 800f802:	7dfa      	ldrb	r2, [r7, #23]
 800f804:	481f      	ldr	r0, [pc, #124]	; (800f884 <etharp_output+0x200>)
 800f806:	4613      	mov	r3, r2
 800f808:	005b      	lsls	r3, r3, #1
 800f80a:	4413      	add	r3, r2
 800f80c:	00db      	lsls	r3, r3, #3
 800f80e:	4403      	add	r3, r0
 800f810:	3304      	adds	r3, #4
 800f812:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f814:	4299      	cmp	r1, r3
 800f816:	d10a      	bne.n	800f82e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f818:	4a19      	ldr	r2, [pc, #100]	; (800f880 <etharp_output+0x1fc>)
 800f81a:	7dfb      	ldrb	r3, [r7, #23]
 800f81c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f81e:	7dfb      	ldrb	r3, [r7, #23]
 800f820:	461a      	mov	r2, r3
 800f822:	68b9      	ldr	r1, [r7, #8]
 800f824:	68f8      	ldr	r0, [r7, #12]
 800f826:	f7ff fe93 	bl	800f550 <etharp_output_to_arp_index>
 800f82a:	4603      	mov	r3, r0
 800f82c:	e018      	b.n	800f860 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f82e:	7dfb      	ldrb	r3, [r7, #23]
 800f830:	3301      	adds	r3, #1
 800f832:	75fb      	strb	r3, [r7, #23]
 800f834:	7dfb      	ldrb	r3, [r7, #23]
 800f836:	2b09      	cmp	r3, #9
 800f838:	d9ca      	bls.n	800f7d0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f83a:	68ba      	ldr	r2, [r7, #8]
 800f83c:	69b9      	ldr	r1, [r7, #24]
 800f83e:	68f8      	ldr	r0, [r7, #12]
 800f840:	f000 f822 	bl	800f888 <etharp_query>
 800f844:	4603      	mov	r3, r0
 800f846:	e00b      	b.n	800f860 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800f84e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f852:	9300      	str	r3, [sp, #0]
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	68b9      	ldr	r1, [r7, #8]
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	f001 fd5d 	bl	8011318 <ethernet_output>
 800f85e:	4603      	mov	r3, r0
}
 800f860:	4618      	mov	r0, r3
 800f862:	3720      	adds	r7, #32
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	08014b6c 	.word	0x08014b6c
 800f86c:	08014cbc 	.word	0x08014cbc
 800f870:	08014be4 	.word	0x08014be4
 800f874:	08014d0c 	.word	0x08014d0c
 800f878:	08014cac 	.word	0x08014cac
 800f87c:	08015330 	.word	0x08015330
 800f880:	2000020c 	.word	0x2000020c
 800f884:	2000011c 	.word	0x2000011c

0800f888 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b08c      	sub	sp, #48	; 0x30
 800f88c:	af02      	add	r7, sp, #8
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	332e      	adds	r3, #46	; 0x2e
 800f898:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f89a:	23ff      	movs	r3, #255	; 0xff
 800f89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	68f9      	ldr	r1, [r7, #12]
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f000 fe2c 	bl	8010508 <ip4_addr_isbroadcast_u32>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d10c      	bne.n	800f8d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f8be:	2be0      	cmp	r3, #224	; 0xe0
 800f8c0:	d006      	beq.n	800f8d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d003      	beq.n	800f8d0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d102      	bne.n	800f8d6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f8d0:	f06f 030f 	mvn.w	r3, #15
 800f8d4:	e101      	b.n	800fada <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	2101      	movs	r1, #1
 800f8da:	68b8      	ldr	r0, [r7, #8]
 800f8dc:	f7ff fb5c 	bl	800ef98 <etharp_find_entry>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f8e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	da02      	bge.n	800f8f2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f8ec:	8a7b      	ldrh	r3, [r7, #18]
 800f8ee:	b25b      	sxtb	r3, r3
 800f8f0:	e0f3      	b.n	800fada <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f8f2:	8a7b      	ldrh	r3, [r7, #18]
 800f8f4:	2b7e      	cmp	r3, #126	; 0x7e
 800f8f6:	d906      	bls.n	800f906 <etharp_query+0x7e>
 800f8f8:	4b7a      	ldr	r3, [pc, #488]	; (800fae4 <etharp_query+0x25c>)
 800f8fa:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f8fe:	497a      	ldr	r1, [pc, #488]	; (800fae8 <etharp_query+0x260>)
 800f900:	487a      	ldr	r0, [pc, #488]	; (800faec <etharp_query+0x264>)
 800f902:	f001 fd99 	bl	8011438 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f906:	8a7b      	ldrh	r3, [r7, #18]
 800f908:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f90a:	7c7a      	ldrb	r2, [r7, #17]
 800f90c:	4978      	ldr	r1, [pc, #480]	; (800faf0 <etharp_query+0x268>)
 800f90e:	4613      	mov	r3, r2
 800f910:	005b      	lsls	r3, r3, #1
 800f912:	4413      	add	r3, r2
 800f914:	00db      	lsls	r3, r3, #3
 800f916:	440b      	add	r3, r1
 800f918:	3314      	adds	r3, #20
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d115      	bne.n	800f94c <etharp_query+0xc4>
    is_new_entry = 1;
 800f920:	2301      	movs	r3, #1
 800f922:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f924:	7c7a      	ldrb	r2, [r7, #17]
 800f926:	4972      	ldr	r1, [pc, #456]	; (800faf0 <etharp_query+0x268>)
 800f928:	4613      	mov	r3, r2
 800f92a:	005b      	lsls	r3, r3, #1
 800f92c:	4413      	add	r3, r2
 800f92e:	00db      	lsls	r3, r3, #3
 800f930:	440b      	add	r3, r1
 800f932:	3314      	adds	r3, #20
 800f934:	2201      	movs	r2, #1
 800f936:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f938:	7c7a      	ldrb	r2, [r7, #17]
 800f93a:	496d      	ldr	r1, [pc, #436]	; (800faf0 <etharp_query+0x268>)
 800f93c:	4613      	mov	r3, r2
 800f93e:	005b      	lsls	r3, r3, #1
 800f940:	4413      	add	r3, r2
 800f942:	00db      	lsls	r3, r3, #3
 800f944:	440b      	add	r3, r1
 800f946:	3308      	adds	r3, #8
 800f948:	68fa      	ldr	r2, [r7, #12]
 800f94a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f94c:	7c7a      	ldrb	r2, [r7, #17]
 800f94e:	4968      	ldr	r1, [pc, #416]	; (800faf0 <etharp_query+0x268>)
 800f950:	4613      	mov	r3, r2
 800f952:	005b      	lsls	r3, r3, #1
 800f954:	4413      	add	r3, r2
 800f956:	00db      	lsls	r3, r3, #3
 800f958:	440b      	add	r3, r1
 800f95a:	3314      	adds	r3, #20
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d011      	beq.n	800f986 <etharp_query+0xfe>
 800f962:	7c7a      	ldrb	r2, [r7, #17]
 800f964:	4962      	ldr	r1, [pc, #392]	; (800faf0 <etharp_query+0x268>)
 800f966:	4613      	mov	r3, r2
 800f968:	005b      	lsls	r3, r3, #1
 800f96a:	4413      	add	r3, r2
 800f96c:	00db      	lsls	r3, r3, #3
 800f96e:	440b      	add	r3, r1
 800f970:	3314      	adds	r3, #20
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	2b01      	cmp	r3, #1
 800f976:	d806      	bhi.n	800f986 <etharp_query+0xfe>
 800f978:	4b5a      	ldr	r3, [pc, #360]	; (800fae4 <etharp_query+0x25c>)
 800f97a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f97e:	495d      	ldr	r1, [pc, #372]	; (800faf4 <etharp_query+0x26c>)
 800f980:	485a      	ldr	r0, [pc, #360]	; (800faec <etharp_query+0x264>)
 800f982:	f001 fd59 	bl	8011438 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f986:	6a3b      	ldr	r3, [r7, #32]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d102      	bne.n	800f992 <etharp_query+0x10a>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d10c      	bne.n	800f9ac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f992:	68b9      	ldr	r1, [r7, #8]
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f000 f963 	bl	800fc60 <etharp_request>
 800f99a:	4603      	mov	r3, r0
 800f99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d102      	bne.n	800f9ac <etharp_query+0x124>
      return result;
 800f9a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f9aa:	e096      	b.n	800fada <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d106      	bne.n	800f9c0 <etharp_query+0x138>
 800f9b2:	4b4c      	ldr	r3, [pc, #304]	; (800fae4 <etharp_query+0x25c>)
 800f9b4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f9b8:	494f      	ldr	r1, [pc, #316]	; (800faf8 <etharp_query+0x270>)
 800f9ba:	484c      	ldr	r0, [pc, #304]	; (800faec <etharp_query+0x264>)
 800f9bc:	f001 fd3c 	bl	8011438 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f9c0:	7c7a      	ldrb	r2, [r7, #17]
 800f9c2:	494b      	ldr	r1, [pc, #300]	; (800faf0 <etharp_query+0x268>)
 800f9c4:	4613      	mov	r3, r2
 800f9c6:	005b      	lsls	r3, r3, #1
 800f9c8:	4413      	add	r3, r2
 800f9ca:	00db      	lsls	r3, r3, #3
 800f9cc:	440b      	add	r3, r1
 800f9ce:	3314      	adds	r3, #20
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d917      	bls.n	800fa06 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f9d6:	4a49      	ldr	r2, [pc, #292]	; (800fafc <etharp_query+0x274>)
 800f9d8:	7c7b      	ldrb	r3, [r7, #17]
 800f9da:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f9dc:	7c7a      	ldrb	r2, [r7, #17]
 800f9de:	4613      	mov	r3, r2
 800f9e0:	005b      	lsls	r3, r3, #1
 800f9e2:	4413      	add	r3, r2
 800f9e4:	00db      	lsls	r3, r3, #3
 800f9e6:	3308      	adds	r3, #8
 800f9e8:	4a41      	ldr	r2, [pc, #260]	; (800faf0 <etharp_query+0x268>)
 800f9ea:	4413      	add	r3, r2
 800f9ec:	3304      	adds	r3, #4
 800f9ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f9f2:	9200      	str	r2, [sp, #0]
 800f9f4:	697a      	ldr	r2, [r7, #20]
 800f9f6:	6879      	ldr	r1, [r7, #4]
 800f9f8:	68f8      	ldr	r0, [r7, #12]
 800f9fa:	f001 fc8d 	bl	8011318 <ethernet_output>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa04:	e067      	b.n	800fad6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fa06:	7c7a      	ldrb	r2, [r7, #17]
 800fa08:	4939      	ldr	r1, [pc, #228]	; (800faf0 <etharp_query+0x268>)
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	005b      	lsls	r3, r3, #1
 800fa0e:	4413      	add	r3, r2
 800fa10:	00db      	lsls	r3, r3, #3
 800fa12:	440b      	add	r3, r1
 800fa14:	3314      	adds	r3, #20
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d15c      	bne.n	800fad6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fa24:	e01c      	b.n	800fa60 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	895a      	ldrh	r2, [r3, #10]
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	891b      	ldrh	r3, [r3, #8]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d10a      	bne.n	800fa48 <etharp_query+0x1c0>
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d006      	beq.n	800fa48 <etharp_query+0x1c0>
 800fa3a:	4b2a      	ldr	r3, [pc, #168]	; (800fae4 <etharp_query+0x25c>)
 800fa3c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800fa40:	492f      	ldr	r1, [pc, #188]	; (800fb00 <etharp_query+0x278>)
 800fa42:	482a      	ldr	r0, [pc, #168]	; (800faec <etharp_query+0x264>)
 800fa44:	f001 fcf8 	bl	8011438 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800fa48:	69fb      	ldr	r3, [r7, #28]
 800fa4a:	7b1b      	ldrb	r3, [r3, #12]
 800fa4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d002      	beq.n	800fa5a <etharp_query+0x1d2>
        copy_needed = 1;
 800fa54:	2301      	movs	r3, #1
 800fa56:	61bb      	str	r3, [r7, #24]
        break;
 800fa58:	e005      	b.n	800fa66 <etharp_query+0x1de>
      }
      p = p->next;
 800fa5a:	69fb      	ldr	r3, [r7, #28]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d1df      	bne.n	800fa26 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d007      	beq.n	800fa7c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800fa72:	200e      	movs	r0, #14
 800fa74:	f7f7 fb52 	bl	800711c <pbuf_clone>
 800fa78:	61f8      	str	r0, [r7, #28]
 800fa7a:	e004      	b.n	800fa86 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800fa80:	69f8      	ldr	r0, [r7, #28]
 800fa82:	f7f7 f97f 	bl	8006d84 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d021      	beq.n	800fad0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fa8c:	7c7a      	ldrb	r2, [r7, #17]
 800fa8e:	4918      	ldr	r1, [pc, #96]	; (800faf0 <etharp_query+0x268>)
 800fa90:	4613      	mov	r3, r2
 800fa92:	005b      	lsls	r3, r3, #1
 800fa94:	4413      	add	r3, r2
 800fa96:	00db      	lsls	r3, r3, #3
 800fa98:	440b      	add	r3, r1
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00a      	beq.n	800fab6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800faa0:	7c7a      	ldrb	r2, [r7, #17]
 800faa2:	4913      	ldr	r1, [pc, #76]	; (800faf0 <etharp_query+0x268>)
 800faa4:	4613      	mov	r3, r2
 800faa6:	005b      	lsls	r3, r3, #1
 800faa8:	4413      	add	r3, r2
 800faaa:	00db      	lsls	r3, r3, #3
 800faac:	440b      	add	r3, r1
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7f7 f8c7 	bl	8006c44 <pbuf_free>
      }
      arp_table[i].q = p;
 800fab6:	7c7a      	ldrb	r2, [r7, #17]
 800fab8:	490d      	ldr	r1, [pc, #52]	; (800faf0 <etharp_query+0x268>)
 800faba:	4613      	mov	r3, r2
 800fabc:	005b      	lsls	r3, r3, #1
 800fabe:	4413      	add	r3, r2
 800fac0:	00db      	lsls	r3, r3, #3
 800fac2:	440b      	add	r3, r1
 800fac4:	69fa      	ldr	r2, [r7, #28]
 800fac6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fac8:	2300      	movs	r3, #0
 800faca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800face:	e002      	b.n	800fad6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fad0:	23ff      	movs	r3, #255	; 0xff
 800fad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800fad6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3728      	adds	r7, #40	; 0x28
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
 800fae2:	bf00      	nop
 800fae4:	08014b6c 	.word	0x08014b6c
 800fae8:	08014d18 	.word	0x08014d18
 800faec:	08014be4 	.word	0x08014be4
 800faf0:	2000011c 	.word	0x2000011c
 800faf4:	08014d28 	.word	0x08014d28
 800faf8:	08014d0c 	.word	0x08014d0c
 800fafc:	2000020c 	.word	0x2000020c
 800fb00:	08014d50 	.word	0x08014d50

0800fb04 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b08a      	sub	sp, #40	; 0x28
 800fb08:	af02      	add	r7, sp, #8
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
 800fb10:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fb12:	2300      	movs	r3, #0
 800fb14:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d106      	bne.n	800fb2a <etharp_raw+0x26>
 800fb1c:	4b3a      	ldr	r3, [pc, #232]	; (800fc08 <etharp_raw+0x104>)
 800fb1e:	f240 4257 	movw	r2, #1111	; 0x457
 800fb22:	493a      	ldr	r1, [pc, #232]	; (800fc0c <etharp_raw+0x108>)
 800fb24:	483a      	ldr	r0, [pc, #232]	; (800fc10 <etharp_raw+0x10c>)
 800fb26:	f001 fc87 	bl	8011438 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fb2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb2e:	211c      	movs	r1, #28
 800fb30:	200e      	movs	r0, #14
 800fb32:	f7f6 fda3 	bl	800667c <pbuf_alloc>
 800fb36:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d102      	bne.n	800fb44 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fb3e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb42:	e05d      	b.n	800fc00 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fb44:	69bb      	ldr	r3, [r7, #24]
 800fb46:	895b      	ldrh	r3, [r3, #10]
 800fb48:	2b1b      	cmp	r3, #27
 800fb4a:	d806      	bhi.n	800fb5a <etharp_raw+0x56>
 800fb4c:	4b2e      	ldr	r3, [pc, #184]	; (800fc08 <etharp_raw+0x104>)
 800fb4e:	f240 4262 	movw	r2, #1122	; 0x462
 800fb52:	4930      	ldr	r1, [pc, #192]	; (800fc14 <etharp_raw+0x110>)
 800fb54:	482e      	ldr	r0, [pc, #184]	; (800fc10 <etharp_raw+0x10c>)
 800fb56:	f001 fc6f 	bl	8011438 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fb5a:	69bb      	ldr	r3, [r7, #24]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fb60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7f5 fdb2 	bl	80056cc <lwip_htons>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fb76:	2b06      	cmp	r3, #6
 800fb78:	d006      	beq.n	800fb88 <etharp_raw+0x84>
 800fb7a:	4b23      	ldr	r3, [pc, #140]	; (800fc08 <etharp_raw+0x104>)
 800fb7c:	f240 4269 	movw	r2, #1129	; 0x469
 800fb80:	4925      	ldr	r1, [pc, #148]	; (800fc18 <etharp_raw+0x114>)
 800fb82:	4823      	ldr	r0, [pc, #140]	; (800fc10 <etharp_raw+0x10c>)
 800fb84:	f001 fc58 	bl	8011438 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	3308      	adds	r3, #8
 800fb8c:	2206      	movs	r2, #6
 800fb8e:	6839      	ldr	r1, [r7, #0]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f001 fc3b 	bl	801140c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	3312      	adds	r3, #18
 800fb9a:	2206      	movs	r2, #6
 800fb9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f001 fc34 	bl	801140c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	330e      	adds	r3, #14
 800fba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbaa:	6812      	ldr	r2, [r2, #0]
 800fbac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	3318      	adds	r3, #24
 800fbb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbb4:	6812      	ldr	r2, [r2, #0]
 800fbb6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	701a      	strb	r2, [r3, #0]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f042 0201 	orr.w	r2, r2, #1
 800fbc4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f042 0208 	orr.w	r2, r2, #8
 800fbce:	709a      	strb	r2, [r3, #2]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	2206      	movs	r2, #6
 800fbd8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	2204      	movs	r2, #4
 800fbde:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fbe0:	f640 0306 	movw	r3, #2054	; 0x806
 800fbe4:	9300      	str	r3, [sp, #0]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	68ba      	ldr	r2, [r7, #8]
 800fbea:	69b9      	ldr	r1, [r7, #24]
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	f001 fb93 	bl	8011318 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fbf2:	69b8      	ldr	r0, [r7, #24]
 800fbf4:	f7f7 f826 	bl	8006c44 <pbuf_free>
  p = NULL;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fbfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3720      	adds	r7, #32
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	08014b6c 	.word	0x08014b6c
 800fc0c:	08014cbc 	.word	0x08014cbc
 800fc10:	08014be4 	.word	0x08014be4
 800fc14:	08014d6c 	.word	0x08014d6c
 800fc18:	08014da0 	.word	0x08014da0

0800fc1c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b088      	sub	sp, #32
 800fc20:	af04      	add	r7, sp, #16
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f103 012e 	add.w	r1, r3, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fc38:	2201      	movs	r2, #1
 800fc3a:	9203      	str	r2, [sp, #12]
 800fc3c:	68ba      	ldr	r2, [r7, #8]
 800fc3e:	9202      	str	r2, [sp, #8]
 800fc40:	4a06      	ldr	r2, [pc, #24]	; (800fc5c <etharp_request_dst+0x40>)
 800fc42:	9201      	str	r2, [sp, #4]
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	4603      	mov	r3, r0
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f7ff ff5a 	bl	800fb04 <etharp_raw>
 800fc50:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3710      	adds	r7, #16
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	08015338 	.word	0x08015338

0800fc60 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fc6a:	4a05      	ldr	r2, [pc, #20]	; (800fc80 <etharp_request+0x20>)
 800fc6c:	6839      	ldr	r1, [r7, #0]
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f7ff ffd4 	bl	800fc1c <etharp_request_dst>
 800fc74:	4603      	mov	r3, r0
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	08015330 	.word	0x08015330

0800fc84 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b08e      	sub	sp, #56	; 0x38
 800fc88:	af04      	add	r7, sp, #16
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fc8e:	4b79      	ldr	r3, [pc, #484]	; (800fe74 <icmp_input+0x1f0>)
 800fc90:	689b      	ldr	r3, [r3, #8]
 800fc92:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	f003 030f 	and.w	r3, r3, #15
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	009b      	lsls	r3, r3, #2
 800fca0:	b2db      	uxtb	r3, r3
 800fca2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fca4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fca6:	2b13      	cmp	r3, #19
 800fca8:	f240 80cd 	bls.w	800fe46 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	895b      	ldrh	r3, [r3, #10]
 800fcb0:	2b03      	cmp	r3, #3
 800fcb2:	f240 80ca 	bls.w	800fe4a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fcc0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f000 80b7 	beq.w	800fe38 <icmp_input+0x1b4>
 800fcca:	2b08      	cmp	r3, #8
 800fccc:	f040 80b7 	bne.w	800fe3e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fcd0:	4b69      	ldr	r3, [pc, #420]	; (800fe78 <icmp_input+0x1f4>)
 800fcd2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fcd4:	4b67      	ldr	r3, [pc, #412]	; (800fe74 <icmp_input+0x1f0>)
 800fcd6:	695b      	ldr	r3, [r3, #20]
 800fcd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fcdc:	2be0      	cmp	r3, #224	; 0xe0
 800fcde:	f000 80bb 	beq.w	800fe58 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fce2:	4b64      	ldr	r3, [pc, #400]	; (800fe74 <icmp_input+0x1f0>)
 800fce4:	695b      	ldr	r3, [r3, #20]
 800fce6:	4a63      	ldr	r2, [pc, #396]	; (800fe74 <icmp_input+0x1f0>)
 800fce8:	6812      	ldr	r2, [r2, #0]
 800fcea:	4611      	mov	r1, r2
 800fcec:	4618      	mov	r0, r3
 800fcee:	f000 fc0b 	bl	8010508 <ip4_addr_isbroadcast_u32>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	f040 80b1 	bne.w	800fe5c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	891b      	ldrh	r3, [r3, #8]
 800fcfe:	2b07      	cmp	r3, #7
 800fd00:	f240 80a5 	bls.w	800fe4e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fd04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd06:	330e      	adds	r3, #14
 800fd08:	4619      	mov	r1, r3
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f7f6 ff04 	bl	8006b18 <pbuf_add_header>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d04b      	beq.n	800fdae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	891a      	ldrh	r2, [r3, #8]
 800fd1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd1c:	4413      	add	r3, r2
 800fd1e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	891b      	ldrh	r3, [r3, #8]
 800fd24:	8b7a      	ldrh	r2, [r7, #26]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	f0c0 809a 	bcc.w	800fe60 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fd2c:	8b7b      	ldrh	r3, [r7, #26]
 800fd2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd32:	4619      	mov	r1, r3
 800fd34:	200e      	movs	r0, #14
 800fd36:	f7f6 fca1 	bl	800667c <pbuf_alloc>
 800fd3a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	f000 8090 	beq.w	800fe64 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	895b      	ldrh	r3, [r3, #10]
 800fd48:	461a      	mov	r2, r3
 800fd4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd4c:	3308      	adds	r3, #8
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d203      	bcs.n	800fd5a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fd52:	6978      	ldr	r0, [r7, #20]
 800fd54:	f7f6 ff76 	bl	8006c44 <pbuf_free>
          goto icmperr;
 800fd58:	e085      	b.n	800fe66 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fd60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd62:	4618      	mov	r0, r3
 800fd64:	f001 fb52 	bl	801140c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fd68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	6978      	ldr	r0, [r7, #20]
 800fd6e:	f7f6 fee3 	bl	8006b38 <pbuf_remove_header>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d009      	beq.n	800fd8c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fd78:	4b40      	ldr	r3, [pc, #256]	; (800fe7c <icmp_input+0x1f8>)
 800fd7a:	22b6      	movs	r2, #182	; 0xb6
 800fd7c:	4940      	ldr	r1, [pc, #256]	; (800fe80 <icmp_input+0x1fc>)
 800fd7e:	4841      	ldr	r0, [pc, #260]	; (800fe84 <icmp_input+0x200>)
 800fd80:	f001 fb5a 	bl	8011438 <iprintf>
          pbuf_free(r);
 800fd84:	6978      	ldr	r0, [r7, #20]
 800fd86:	f7f6 ff5d 	bl	8006c44 <pbuf_free>
          goto icmperr;
 800fd8a:	e06c      	b.n	800fe66 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fd8c:	6879      	ldr	r1, [r7, #4]
 800fd8e:	6978      	ldr	r0, [r7, #20]
 800fd90:	f7f7 f880 	bl	8006e94 <pbuf_copy>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d003      	beq.n	800fda2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fd9a:	6978      	ldr	r0, [r7, #20]
 800fd9c:	f7f6 ff52 	bl	8006c44 <pbuf_free>
          goto icmperr;
 800fda0:	e061      	b.n	800fe66 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f7f6 ff4e 	bl	8006c44 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	607b      	str	r3, [r7, #4]
 800fdac:	e00f      	b.n	800fdce <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fdae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdb0:	330e      	adds	r3, #14
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7f6 febf 	bl	8006b38 <pbuf_remove_header>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d006      	beq.n	800fdce <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fdc0:	4b2e      	ldr	r3, [pc, #184]	; (800fe7c <icmp_input+0x1f8>)
 800fdc2:	22c7      	movs	r2, #199	; 0xc7
 800fdc4:	4930      	ldr	r1, [pc, #192]	; (800fe88 <icmp_input+0x204>)
 800fdc6:	482f      	ldr	r0, [pc, #188]	; (800fe84 <icmp_input+0x200>)
 800fdc8:	f001 fb36 	bl	8011438 <iprintf>
          goto icmperr;
 800fdcc:	e04b      	b.n	800fe66 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fdd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f7f6 fe9d 	bl	8006b18 <pbuf_add_header>
 800fdde:	4603      	mov	r3, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d12b      	bne.n	800fe3c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	685b      	ldr	r3, [r3, #4]
 800fde8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	681a      	ldr	r2, [r3, #0]
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fdf2:	4b20      	ldr	r3, [pc, #128]	; (800fe74 <icmp_input+0x1f0>)
 800fdf4:	691a      	ldr	r2, [r3, #16]
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	2200      	movs	r2, #0
 800fe04:	709a      	strb	r2, [r3, #2]
 800fe06:	2200      	movs	r2, #0
 800fe08:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	22ff      	movs	r2, #255	; 0xff
 800fe0e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2200      	movs	r2, #0
 800fe14:	729a      	strb	r2, [r3, #10]
 800fe16:	2200      	movs	r2, #0
 800fe18:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	9302      	str	r3, [sp, #8]
 800fe1e:	2301      	movs	r3, #1
 800fe20:	9301      	str	r3, [sp, #4]
 800fe22:	2300      	movs	r3, #0
 800fe24:	9300      	str	r3, [sp, #0]
 800fe26:	23ff      	movs	r3, #255	; 0xff
 800fe28:	2200      	movs	r2, #0
 800fe2a:	69f9      	ldr	r1, [r7, #28]
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 fa93 	bl	8010358 <ip4_output_if>
 800fe32:	4603      	mov	r3, r0
 800fe34:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fe36:	e001      	b.n	800fe3c <icmp_input+0x1b8>
      break;
 800fe38:	bf00      	nop
 800fe3a:	e000      	b.n	800fe3e <icmp_input+0x1ba>
      break;
 800fe3c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f7f6 ff00 	bl	8006c44 <pbuf_free>
  return;
 800fe44:	e013      	b.n	800fe6e <icmp_input+0x1ea>
    goto lenerr;
 800fe46:	bf00      	nop
 800fe48:	e002      	b.n	800fe50 <icmp_input+0x1cc>
    goto lenerr;
 800fe4a:	bf00      	nop
 800fe4c:	e000      	b.n	800fe50 <icmp_input+0x1cc>
        goto lenerr;
 800fe4e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7f6 fef7 	bl	8006c44 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fe56:	e00a      	b.n	800fe6e <icmp_input+0x1ea>
        goto icmperr;
 800fe58:	bf00      	nop
 800fe5a:	e004      	b.n	800fe66 <icmp_input+0x1e2>
        goto icmperr;
 800fe5c:	bf00      	nop
 800fe5e:	e002      	b.n	800fe66 <icmp_input+0x1e2>
          goto icmperr;
 800fe60:	bf00      	nop
 800fe62:	e000      	b.n	800fe66 <icmp_input+0x1e2>
          goto icmperr;
 800fe64:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f7f6 feec 	bl	8006c44 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fe6c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fe6e:	3728      	adds	r7, #40	; 0x28
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	2000388c 	.word	0x2000388c
 800fe78:	200038a0 	.word	0x200038a0
 800fe7c:	08014de4 	.word	0x08014de4
 800fe80:	08014e1c 	.word	0x08014e1c
 800fe84:	08014e54 	.word	0x08014e54
 800fe88:	08014e7c 	.word	0x08014e7c

0800fe8c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	460b      	mov	r3, r1
 800fe96:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fe98:	78fb      	ldrb	r3, [r7, #3]
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	2103      	movs	r1, #3
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f000 f814 	bl	800fecc <icmp_send_response>
}
 800fea4:	bf00      	nop
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	460b      	mov	r3, r1
 800feb6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800feb8:	78fb      	ldrb	r3, [r7, #3]
 800feba:	461a      	mov	r2, r3
 800febc:	210b      	movs	r1, #11
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f000 f804 	bl	800fecc <icmp_send_response>
}
 800fec4:	bf00      	nop
 800fec6:	3708      	adds	r7, #8
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}

0800fecc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b08c      	sub	sp, #48	; 0x30
 800fed0:	af04      	add	r7, sp, #16
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	460b      	mov	r3, r1
 800fed6:	70fb      	strb	r3, [r7, #3]
 800fed8:	4613      	mov	r3, r2
 800feda:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fedc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fee0:	2124      	movs	r1, #36	; 0x24
 800fee2:	2022      	movs	r0, #34	; 0x22
 800fee4:	f7f6 fbca 	bl	800667c <pbuf_alloc>
 800fee8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800feea:	69fb      	ldr	r3, [r7, #28]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d04c      	beq.n	800ff8a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	895b      	ldrh	r3, [r3, #10]
 800fef4:	2b23      	cmp	r3, #35	; 0x23
 800fef6:	d806      	bhi.n	800ff06 <icmp_send_response+0x3a>
 800fef8:	4b26      	ldr	r3, [pc, #152]	; (800ff94 <icmp_send_response+0xc8>)
 800fefa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fefe:	4926      	ldr	r1, [pc, #152]	; (800ff98 <icmp_send_response+0xcc>)
 800ff00:	4826      	ldr	r0, [pc, #152]	; (800ff9c <icmp_send_response+0xd0>)
 800ff02:	f001 fa99 	bl	8011438 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ff0c:	69fb      	ldr	r3, [r7, #28]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	78fa      	ldrb	r2, [r7, #3]
 800ff16:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	78ba      	ldrb	r2, [r7, #2]
 800ff1c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	2200      	movs	r2, #0
 800ff22:	711a      	strb	r2, [r3, #4]
 800ff24:	2200      	movs	r2, #0
 800ff26:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	719a      	strb	r2, [r3, #6]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ff32:	69fb      	ldr	r3, [r7, #28]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	f103 0008 	add.w	r0, r3, #8
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	221c      	movs	r2, #28
 800ff40:	4619      	mov	r1, r3
 800ff42:	f001 fa63 	bl	801140c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ff46:	69bb      	ldr	r3, [r7, #24]
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ff4c:	f107 030c 	add.w	r3, r7, #12
 800ff50:	4618      	mov	r0, r3
 800ff52:	f000 f825 	bl	800ffa0 <ip4_route>
 800ff56:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d011      	beq.n	800ff82 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	2200      	movs	r2, #0
 800ff62:	709a      	strb	r2, [r3, #2]
 800ff64:	2200      	movs	r2, #0
 800ff66:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ff68:	f107 020c 	add.w	r2, r7, #12
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	9302      	str	r3, [sp, #8]
 800ff70:	2301      	movs	r3, #1
 800ff72:	9301      	str	r3, [sp, #4]
 800ff74:	2300      	movs	r3, #0
 800ff76:	9300      	str	r3, [sp, #0]
 800ff78:	23ff      	movs	r3, #255	; 0xff
 800ff7a:	2100      	movs	r1, #0
 800ff7c:	69f8      	ldr	r0, [r7, #28]
 800ff7e:	f000 f9eb 	bl	8010358 <ip4_output_if>
  }
  pbuf_free(q);
 800ff82:	69f8      	ldr	r0, [r7, #28]
 800ff84:	f7f6 fe5e 	bl	8006c44 <pbuf_free>
 800ff88:	e000      	b.n	800ff8c <icmp_send_response+0xc0>
    return;
 800ff8a:	bf00      	nop
}
 800ff8c:	3720      	adds	r7, #32
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	08014de4 	.word	0x08014de4
 800ff98:	08014eb0 	.word	0x08014eb0
 800ff9c:	08014e54 	.word	0x08014e54

0800ffa0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b085      	sub	sp, #20
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ffa8:	4b33      	ldr	r3, [pc, #204]	; (8010078 <ip4_route+0xd8>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	60fb      	str	r3, [r7, #12]
 800ffae:	e036      	b.n	801001e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ffb6:	f003 0301 	and.w	r3, r3, #1
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d02b      	beq.n	8010018 <ip4_route+0x78>
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ffc6:	089b      	lsrs	r3, r3, #2
 800ffc8:	f003 0301 	and.w	r3, r3, #1
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d022      	beq.n	8010018 <ip4_route+0x78>
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	3304      	adds	r3, #4
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d01d      	beq.n	8010018 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	3304      	adds	r3, #4
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	405a      	eors	r2, r3
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	3308      	adds	r3, #8
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	4013      	ands	r3, r2
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d101      	bne.n	800fff8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	e038      	b.n	801006a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fffe:	f003 0302 	and.w	r3, r3, #2
 8010002:	2b00      	cmp	r3, #0
 8010004:	d108      	bne.n	8010018 <ip4_route+0x78>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	330c      	adds	r3, #12
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	429a      	cmp	r2, r3
 8010012:	d101      	bne.n	8010018 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	e028      	b.n	801006a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	60fb      	str	r3, [r7, #12]
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d1c5      	bne.n	800ffb0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010024:	4b15      	ldr	r3, [pc, #84]	; (801007c <ip4_route+0xdc>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d01a      	beq.n	8010062 <ip4_route+0xc2>
 801002c:	4b13      	ldr	r3, [pc, #76]	; (801007c <ip4_route+0xdc>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010034:	f003 0301 	and.w	r3, r3, #1
 8010038:	2b00      	cmp	r3, #0
 801003a:	d012      	beq.n	8010062 <ip4_route+0xc2>
 801003c:	4b0f      	ldr	r3, [pc, #60]	; (801007c <ip4_route+0xdc>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010044:	f003 0304 	and.w	r3, r3, #4
 8010048:	2b00      	cmp	r3, #0
 801004a:	d00a      	beq.n	8010062 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801004c:	4b0b      	ldr	r3, [pc, #44]	; (801007c <ip4_route+0xdc>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	3304      	adds	r3, #4
 8010052:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010054:	2b00      	cmp	r3, #0
 8010056:	d004      	beq.n	8010062 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	b2db      	uxtb	r3, r3
 801005e:	2b7f      	cmp	r3, #127	; 0x7f
 8010060:	d101      	bne.n	8010066 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010062:	2300      	movs	r3, #0
 8010064:	e001      	b.n	801006a <ip4_route+0xca>
  }

  return netif_default;
 8010066:	4b05      	ldr	r3, [pc, #20]	; (801007c <ip4_route+0xdc>)
 8010068:	681b      	ldr	r3, [r3, #0]
}
 801006a:	4618      	mov	r0, r3
 801006c:	3714      	adds	r7, #20
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr
 8010076:	bf00      	nop
 8010078:	20006de0 	.word	0x20006de0
 801007c:	20006de4 	.word	0x20006de4

08010080 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801008e:	f003 0301 	and.w	r3, r3, #1
 8010092:	b2db      	uxtb	r3, r3
 8010094:	2b00      	cmp	r3, #0
 8010096:	d016      	beq.n	80100c6 <ip4_input_accept+0x46>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	3304      	adds	r3, #4
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d011      	beq.n	80100c6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80100a2:	4b0b      	ldr	r3, [pc, #44]	; (80100d0 <ip4_input_accept+0x50>)
 80100a4:	695a      	ldr	r2, [r3, #20]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	3304      	adds	r3, #4
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d008      	beq.n	80100c2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80100b0:	4b07      	ldr	r3, [pc, #28]	; (80100d0 <ip4_input_accept+0x50>)
 80100b2:	695b      	ldr	r3, [r3, #20]
 80100b4:	6879      	ldr	r1, [r7, #4]
 80100b6:	4618      	mov	r0, r3
 80100b8:	f000 fa26 	bl	8010508 <ip4_addr_isbroadcast_u32>
 80100bc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d001      	beq.n	80100c6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80100c2:	2301      	movs	r3, #1
 80100c4:	e000      	b.n	80100c8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80100c6:	2300      	movs	r3, #0
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	2000388c 	.word	0x2000388c

080100d4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b088      	sub	sp, #32
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80100de:	2301      	movs	r3, #1
 80100e0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	091b      	lsrs	r3, r3, #4
 80100ee:	b2db      	uxtb	r3, r3
 80100f0:	2b04      	cmp	r3, #4
 80100f2:	d004      	beq.n	80100fe <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f7f6 fda5 	bl	8006c44 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80100fa:	2300      	movs	r3, #0
 80100fc:	e123      	b.n	8010346 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	f003 030f 	and.w	r3, r3, #15
 8010106:	b2db      	uxtb	r3, r3
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	b2db      	uxtb	r3, r3
 801010c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	885b      	ldrh	r3, [r3, #2]
 8010112:	b29b      	uxth	r3, r3
 8010114:	4618      	mov	r0, r3
 8010116:	f7f5 fad9 	bl	80056cc <lwip_htons>
 801011a:	4603      	mov	r3, r0
 801011c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	891b      	ldrh	r3, [r3, #8]
 8010122:	8a3a      	ldrh	r2, [r7, #16]
 8010124:	429a      	cmp	r2, r3
 8010126:	d204      	bcs.n	8010132 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8010128:	8a3b      	ldrh	r3, [r7, #16]
 801012a:	4619      	mov	r1, r3
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f7f6 fc03 	bl	8006938 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	895b      	ldrh	r3, [r3, #10]
 8010136:	8a7a      	ldrh	r2, [r7, #18]
 8010138:	429a      	cmp	r2, r3
 801013a:	d807      	bhi.n	801014c <ip4_input+0x78>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	891b      	ldrh	r3, [r3, #8]
 8010140:	8a3a      	ldrh	r2, [r7, #16]
 8010142:	429a      	cmp	r2, r3
 8010144:	d802      	bhi.n	801014c <ip4_input+0x78>
 8010146:	8a7b      	ldrh	r3, [r7, #18]
 8010148:	2b13      	cmp	r3, #19
 801014a:	d804      	bhi.n	8010156 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f7f6 fd79 	bl	8006c44 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010152:	2300      	movs	r3, #0
 8010154:	e0f7      	b.n	8010346 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010156:	69fb      	ldr	r3, [r7, #28]
 8010158:	691b      	ldr	r3, [r3, #16]
 801015a:	4a7d      	ldr	r2, [pc, #500]	; (8010350 <ip4_input+0x27c>)
 801015c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	4a7b      	ldr	r2, [pc, #492]	; (8010350 <ip4_input+0x27c>)
 8010164:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010166:	4b7a      	ldr	r3, [pc, #488]	; (8010350 <ip4_input+0x27c>)
 8010168:	695b      	ldr	r3, [r3, #20]
 801016a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801016e:	2be0      	cmp	r3, #224	; 0xe0
 8010170:	d112      	bne.n	8010198 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010178:	f003 0301 	and.w	r3, r3, #1
 801017c:	b2db      	uxtb	r3, r3
 801017e:	2b00      	cmp	r3, #0
 8010180:	d007      	beq.n	8010192 <ip4_input+0xbe>
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	3304      	adds	r3, #4
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d002      	beq.n	8010192 <ip4_input+0xbe>
      netif = inp;
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	61bb      	str	r3, [r7, #24]
 8010190:	e02a      	b.n	80101e8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8010192:	2300      	movs	r3, #0
 8010194:	61bb      	str	r3, [r7, #24]
 8010196:	e027      	b.n	80101e8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010198:	6838      	ldr	r0, [r7, #0]
 801019a:	f7ff ff71 	bl	8010080 <ip4_input_accept>
 801019e:	4603      	mov	r3, r0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d002      	beq.n	80101aa <ip4_input+0xd6>
      netif = inp;
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	61bb      	str	r3, [r7, #24]
 80101a8:	e01e      	b.n	80101e8 <ip4_input+0x114>
    } else {
      netif = NULL;
 80101aa:	2300      	movs	r3, #0
 80101ac:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80101ae:	4b68      	ldr	r3, [pc, #416]	; (8010350 <ip4_input+0x27c>)
 80101b0:	695b      	ldr	r3, [r3, #20]
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	2b7f      	cmp	r3, #127	; 0x7f
 80101b6:	d017      	beq.n	80101e8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80101b8:	4b66      	ldr	r3, [pc, #408]	; (8010354 <ip4_input+0x280>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	61bb      	str	r3, [r7, #24]
 80101be:	e00e      	b.n	80101de <ip4_input+0x10a>
          if (netif == inp) {
 80101c0:	69ba      	ldr	r2, [r7, #24]
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d006      	beq.n	80101d6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80101c8:	69b8      	ldr	r0, [r7, #24]
 80101ca:	f7ff ff59 	bl	8010080 <ip4_input_accept>
 80101ce:	4603      	mov	r3, r0
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d108      	bne.n	80101e6 <ip4_input+0x112>
 80101d4:	e000      	b.n	80101d8 <ip4_input+0x104>
            continue;
 80101d6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	61bb      	str	r3, [r7, #24]
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d1ed      	bne.n	80101c0 <ip4_input+0xec>
 80101e4:	e000      	b.n	80101e8 <ip4_input+0x114>
            break;
 80101e6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80101e8:	69bb      	ldr	r3, [r7, #24]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d111      	bne.n	8010212 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	7a5b      	ldrb	r3, [r3, #9]
 80101f2:	2b11      	cmp	r3, #17
 80101f4:	d10d      	bne.n	8010212 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80101f6:	8a7b      	ldrh	r3, [r7, #18]
 80101f8:	69fa      	ldr	r2, [r7, #28]
 80101fa:	4413      	add	r3, r2
 80101fc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	885b      	ldrh	r3, [r3, #2]
 8010202:	b29b      	uxth	r3, r3
 8010204:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8010208:	d103      	bne.n	8010212 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801020e:	2300      	movs	r3, #0
 8010210:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d017      	beq.n	8010248 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8010218:	4b4d      	ldr	r3, [pc, #308]	; (8010350 <ip4_input+0x27c>)
 801021a:	691b      	ldr	r3, [r3, #16]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d013      	beq.n	8010248 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010220:	4b4b      	ldr	r3, [pc, #300]	; (8010350 <ip4_input+0x27c>)
 8010222:	691b      	ldr	r3, [r3, #16]
 8010224:	6839      	ldr	r1, [r7, #0]
 8010226:	4618      	mov	r0, r3
 8010228:	f000 f96e 	bl	8010508 <ip4_addr_isbroadcast_u32>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d105      	bne.n	801023e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010232:	4b47      	ldr	r3, [pc, #284]	; (8010350 <ip4_input+0x27c>)
 8010234:	691b      	ldr	r3, [r3, #16]
 8010236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801023a:	2be0      	cmp	r3, #224	; 0xe0
 801023c:	d104      	bne.n	8010248 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7f6 fd00 	bl	8006c44 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010244:	2300      	movs	r3, #0
 8010246:	e07e      	b.n	8010346 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d104      	bne.n	8010258 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f7f6 fcf8 	bl	8006c44 <pbuf_free>
    return ERR_OK;
 8010254:	2300      	movs	r3, #0
 8010256:	e076      	b.n	8010346 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	88db      	ldrh	r3, [r3, #6]
 801025c:	b29b      	uxth	r3, r3
 801025e:	461a      	mov	r2, r3
 8010260:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010264:	4013      	ands	r3, r2
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00b      	beq.n	8010282 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f000 fc92 	bl	8010b94 <ip4_reass>
 8010270:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d101      	bne.n	801027c <ip4_input+0x1a8>
      return ERR_OK;
 8010278:	2300      	movs	r3, #0
 801027a:	e064      	b.n	8010346 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010282:	4a33      	ldr	r2, [pc, #204]	; (8010350 <ip4_input+0x27c>)
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010288:	4a31      	ldr	r2, [pc, #196]	; (8010350 <ip4_input+0x27c>)
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801028e:	4a30      	ldr	r2, [pc, #192]	; (8010350 <ip4_input+0x27c>)
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010294:	69fb      	ldr	r3, [r7, #28]
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	f003 030f 	and.w	r3, r3, #15
 801029c:	b2db      	uxtb	r3, r3
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	b29a      	uxth	r2, r3
 80102a4:	4b2a      	ldr	r3, [pc, #168]	; (8010350 <ip4_input+0x27c>)
 80102a6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80102a8:	8a7b      	ldrh	r3, [r7, #18]
 80102aa:	4619      	mov	r1, r3
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f7f6 fc43 	bl	8006b38 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80102b2:	69fb      	ldr	r3, [r7, #28]
 80102b4:	7a5b      	ldrb	r3, [r3, #9]
 80102b6:	2b11      	cmp	r3, #17
 80102b8:	d006      	beq.n	80102c8 <ip4_input+0x1f4>
 80102ba:	2b11      	cmp	r3, #17
 80102bc:	dc13      	bgt.n	80102e6 <ip4_input+0x212>
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d00c      	beq.n	80102dc <ip4_input+0x208>
 80102c2:	2b06      	cmp	r3, #6
 80102c4:	d005      	beq.n	80102d2 <ip4_input+0x1fe>
 80102c6:	e00e      	b.n	80102e6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80102c8:	6839      	ldr	r1, [r7, #0]
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f7fc faa8 	bl	800c820 <udp_input>
        break;
 80102d0:	e026      	b.n	8010320 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80102d2:	6839      	ldr	r1, [r7, #0]
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f7f8 faed 	bl	80088b4 <tcp_input>
        break;
 80102da:	e021      	b.n	8010320 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80102dc:	6839      	ldr	r1, [r7, #0]
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7ff fcd0 	bl	800fc84 <icmp_input>
        break;
 80102e4:	e01c      	b.n	8010320 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80102e6:	4b1a      	ldr	r3, [pc, #104]	; (8010350 <ip4_input+0x27c>)
 80102e8:	695b      	ldr	r3, [r3, #20]
 80102ea:	69b9      	ldr	r1, [r7, #24]
 80102ec:	4618      	mov	r0, r3
 80102ee:	f000 f90b 	bl	8010508 <ip4_addr_isbroadcast_u32>
 80102f2:	4603      	mov	r3, r0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d10f      	bne.n	8010318 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80102f8:	4b15      	ldr	r3, [pc, #84]	; (8010350 <ip4_input+0x27c>)
 80102fa:	695b      	ldr	r3, [r3, #20]
 80102fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010300:	2be0      	cmp	r3, #224	; 0xe0
 8010302:	d009      	beq.n	8010318 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010304:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010308:	4619      	mov	r1, r3
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f7f6 fc87 	bl	8006c1e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010310:	2102      	movs	r1, #2
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f7ff fdba 	bl	800fe8c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f7f6 fc93 	bl	8006c44 <pbuf_free>
        break;
 801031e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010320:	4b0b      	ldr	r3, [pc, #44]	; (8010350 <ip4_input+0x27c>)
 8010322:	2200      	movs	r2, #0
 8010324:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010326:	4b0a      	ldr	r3, [pc, #40]	; (8010350 <ip4_input+0x27c>)
 8010328:	2200      	movs	r2, #0
 801032a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801032c:	4b08      	ldr	r3, [pc, #32]	; (8010350 <ip4_input+0x27c>)
 801032e:	2200      	movs	r2, #0
 8010330:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010332:	4b07      	ldr	r3, [pc, #28]	; (8010350 <ip4_input+0x27c>)
 8010334:	2200      	movs	r2, #0
 8010336:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010338:	4b05      	ldr	r3, [pc, #20]	; (8010350 <ip4_input+0x27c>)
 801033a:	2200      	movs	r2, #0
 801033c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801033e:	4b04      	ldr	r3, [pc, #16]	; (8010350 <ip4_input+0x27c>)
 8010340:	2200      	movs	r2, #0
 8010342:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010344:	2300      	movs	r3, #0
}
 8010346:	4618      	mov	r0, r3
 8010348:	3720      	adds	r7, #32
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	2000388c 	.word	0x2000388c
 8010354:	20006de0 	.word	0x20006de0

08010358 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b08a      	sub	sp, #40	; 0x28
 801035c:	af04      	add	r7, sp, #16
 801035e:	60f8      	str	r0, [r7, #12]
 8010360:	60b9      	str	r1, [r7, #8]
 8010362:	607a      	str	r2, [r7, #4]
 8010364:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d009      	beq.n	8010384 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d003      	beq.n	801037e <ip4_output_if+0x26>
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d102      	bne.n	8010384 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801037e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010380:	3304      	adds	r3, #4
 8010382:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010384:	78fa      	ldrb	r2, [r7, #3]
 8010386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010388:	9302      	str	r3, [sp, #8]
 801038a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801038e:	9301      	str	r3, [sp, #4]
 8010390:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010394:	9300      	str	r3, [sp, #0]
 8010396:	4613      	mov	r3, r2
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	6979      	ldr	r1, [r7, #20]
 801039c:	68f8      	ldr	r0, [r7, #12]
 801039e:	f000 f805 	bl	80103ac <ip4_output_if_src>
 80103a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3718      	adds	r7, #24
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b088      	sub	sp, #32
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	60f8      	str	r0, [r7, #12]
 80103b4:	60b9      	str	r1, [r7, #8]
 80103b6:	607a      	str	r2, [r7, #4]
 80103b8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	7b9b      	ldrb	r3, [r3, #14]
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d006      	beq.n	80103d0 <ip4_output_if_src+0x24>
 80103c2:	4b4b      	ldr	r3, [pc, #300]	; (80104f0 <ip4_output_if_src+0x144>)
 80103c4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80103c8:	494a      	ldr	r1, [pc, #296]	; (80104f4 <ip4_output_if_src+0x148>)
 80103ca:	484b      	ldr	r0, [pc, #300]	; (80104f8 <ip4_output_if_src+0x14c>)
 80103cc:	f001 f834 	bl	8011438 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d060      	beq.n	8010498 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80103d6:	2314      	movs	r3, #20
 80103d8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80103da:	2114      	movs	r1, #20
 80103dc:	68f8      	ldr	r0, [r7, #12]
 80103de:	f7f6 fb9b 	bl	8006b18 <pbuf_add_header>
 80103e2:	4603      	mov	r3, r0
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d002      	beq.n	80103ee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80103e8:	f06f 0301 	mvn.w	r3, #1
 80103ec:	e07c      	b.n	80104e8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	895b      	ldrh	r3, [r3, #10]
 80103f8:	2b13      	cmp	r3, #19
 80103fa:	d806      	bhi.n	801040a <ip4_output_if_src+0x5e>
 80103fc:	4b3c      	ldr	r3, [pc, #240]	; (80104f0 <ip4_output_if_src+0x144>)
 80103fe:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010402:	493e      	ldr	r1, [pc, #248]	; (80104fc <ip4_output_if_src+0x150>)
 8010404:	483c      	ldr	r0, [pc, #240]	; (80104f8 <ip4_output_if_src+0x14c>)
 8010406:	f001 f817 	bl	8011438 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	78fa      	ldrb	r2, [r7, #3]
 801040e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010416:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681a      	ldr	r2, [r3, #0]
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010420:	8b7b      	ldrh	r3, [r7, #26]
 8010422:	089b      	lsrs	r3, r3, #2
 8010424:	b29b      	uxth	r3, r3
 8010426:	b2db      	uxtb	r3, r3
 8010428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801042c:	b2da      	uxtb	r2, r3
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010438:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	891b      	ldrh	r3, [r3, #8]
 801043e:	4618      	mov	r0, r3
 8010440:	f7f5 f944 	bl	80056cc <lwip_htons>
 8010444:	4603      	mov	r3, r0
 8010446:	461a      	mov	r2, r3
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801044c:	69fb      	ldr	r3, [r7, #28]
 801044e:	2200      	movs	r2, #0
 8010450:	719a      	strb	r2, [r3, #6]
 8010452:	2200      	movs	r2, #0
 8010454:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010456:	4b2a      	ldr	r3, [pc, #168]	; (8010500 <ip4_output_if_src+0x154>)
 8010458:	881b      	ldrh	r3, [r3, #0]
 801045a:	4618      	mov	r0, r3
 801045c:	f7f5 f936 	bl	80056cc <lwip_htons>
 8010460:	4603      	mov	r3, r0
 8010462:	461a      	mov	r2, r3
 8010464:	69fb      	ldr	r3, [r7, #28]
 8010466:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010468:	4b25      	ldr	r3, [pc, #148]	; (8010500 <ip4_output_if_src+0x154>)
 801046a:	881b      	ldrh	r3, [r3, #0]
 801046c:	3301      	adds	r3, #1
 801046e:	b29a      	uxth	r2, r3
 8010470:	4b23      	ldr	r3, [pc, #140]	; (8010500 <ip4_output_if_src+0x154>)
 8010472:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d104      	bne.n	8010484 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801047a:	4b22      	ldr	r3, [pc, #136]	; (8010504 <ip4_output_if_src+0x158>)
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	60da      	str	r2, [r3, #12]
 8010482:	e003      	b.n	801048c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	69fb      	ldr	r3, [r7, #28]
 801048a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801048c:	69fb      	ldr	r3, [r7, #28]
 801048e:	2200      	movs	r2, #0
 8010490:	729a      	strb	r2, [r3, #10]
 8010492:	2200      	movs	r2, #0
 8010494:	72da      	strb	r2, [r3, #11]
 8010496:	e00f      	b.n	80104b8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	895b      	ldrh	r3, [r3, #10]
 801049c:	2b13      	cmp	r3, #19
 801049e:	d802      	bhi.n	80104a6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80104a0:	f06f 0301 	mvn.w	r3, #1
 80104a4:	e020      	b.n	80104e8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	691b      	ldr	r3, [r3, #16]
 80104b0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80104b2:	f107 0314 	add.w	r3, r7, #20
 80104b6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80104b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d00c      	beq.n	80104da <ip4_output_if_src+0x12e>
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	891a      	ldrh	r2, [r3, #8]
 80104c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d906      	bls.n	80104da <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80104d0:	68f8      	ldr	r0, [r7, #12]
 80104d2:	f000 fd4d 	bl	8010f70 <ip4_frag>
 80104d6:	4603      	mov	r3, r0
 80104d8:	e006      	b.n	80104e8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80104da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104dc:	695b      	ldr	r3, [r3, #20]
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	68f9      	ldr	r1, [r7, #12]
 80104e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104e4:	4798      	blx	r3
 80104e6:	4603      	mov	r3, r0
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3720      	adds	r7, #32
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}
 80104f0:	08014edc 	.word	0x08014edc
 80104f4:	08014f10 	.word	0x08014f10
 80104f8:	08014f1c 	.word	0x08014f1c
 80104fc:	08014f44 	.word	0x08014f44
 8010500:	2000020e 	.word	0x2000020e
 8010504:	08015328 	.word	0x08015328

08010508 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010508:	b480      	push	{r7}
 801050a:	b085      	sub	sp, #20
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801051c:	d002      	beq.n	8010524 <ip4_addr_isbroadcast_u32+0x1c>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d101      	bne.n	8010528 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010524:	2301      	movs	r3, #1
 8010526:	e02a      	b.n	801057e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801052e:	f003 0302 	and.w	r3, r3, #2
 8010532:	2b00      	cmp	r3, #0
 8010534:	d101      	bne.n	801053a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010536:	2300      	movs	r3, #0
 8010538:	e021      	b.n	801057e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	3304      	adds	r3, #4
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	687a      	ldr	r2, [r7, #4]
 8010542:	429a      	cmp	r2, r3
 8010544:	d101      	bne.n	801054a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010546:	2300      	movs	r3, #0
 8010548:	e019      	b.n	801057e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801054a:	68fa      	ldr	r2, [r7, #12]
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	3304      	adds	r3, #4
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	405a      	eors	r2, r3
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	3308      	adds	r3, #8
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	4013      	ands	r3, r2
 801055c:	2b00      	cmp	r3, #0
 801055e:	d10d      	bne.n	801057c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	3308      	adds	r3, #8
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	43da      	mvns	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	3308      	adds	r3, #8
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010574:	429a      	cmp	r2, r3
 8010576:	d101      	bne.n	801057c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010578:	2301      	movs	r3, #1
 801057a:	e000      	b.n	801057e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801057c:	2300      	movs	r3, #0
  }
}
 801057e:	4618      	mov	r0, r3
 8010580:	3714      	adds	r7, #20
 8010582:	46bd      	mov	sp, r7
 8010584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010588:	4770      	bx	lr
	...

0801058c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b084      	sub	sp, #16
 8010590:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010592:	2300      	movs	r3, #0
 8010594:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010596:	4b12      	ldr	r3, [pc, #72]	; (80105e0 <ip_reass_tmr+0x54>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801059c:	e018      	b.n	80105d0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	7fdb      	ldrb	r3, [r3, #31]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d00b      	beq.n	80105be <ip_reass_tmr+0x32>
      r->timer--;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	7fdb      	ldrb	r3, [r3, #31]
 80105aa:	3b01      	subs	r3, #1
 80105ac:	b2da      	uxtb	r2, r3
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	60fb      	str	r3, [r7, #12]
 80105bc:	e008      	b.n	80105d0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80105c8:	68b9      	ldr	r1, [r7, #8]
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 f80a 	bl	80105e4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d1e3      	bne.n	801059e <ip_reass_tmr+0x12>
    }
  }
}
 80105d6:	bf00      	nop
 80105d8:	bf00      	nop
 80105da:	3710      	adds	r7, #16
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}
 80105e0:	20000210 	.word	0x20000210

080105e4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b088      	sub	sp, #32
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80105ee:	2300      	movs	r3, #0
 80105f0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80105f2:	683a      	ldr	r2, [r7, #0]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d105      	bne.n	8010606 <ip_reass_free_complete_datagram+0x22>
 80105fa:	4b45      	ldr	r3, [pc, #276]	; (8010710 <ip_reass_free_complete_datagram+0x12c>)
 80105fc:	22ab      	movs	r2, #171	; 0xab
 80105fe:	4945      	ldr	r1, [pc, #276]	; (8010714 <ip_reass_free_complete_datagram+0x130>)
 8010600:	4845      	ldr	r0, [pc, #276]	; (8010718 <ip_reass_free_complete_datagram+0x134>)
 8010602:	f000 ff19 	bl	8011438 <iprintf>
  if (prev != NULL) {
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d00a      	beq.n	8010622 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	429a      	cmp	r2, r3
 8010614:	d005      	beq.n	8010622 <ip_reass_free_complete_datagram+0x3e>
 8010616:	4b3e      	ldr	r3, [pc, #248]	; (8010710 <ip_reass_free_complete_datagram+0x12c>)
 8010618:	22ad      	movs	r2, #173	; 0xad
 801061a:	4940      	ldr	r1, [pc, #256]	; (801071c <ip_reass_free_complete_datagram+0x138>)
 801061c:	483e      	ldr	r0, [pc, #248]	; (8010718 <ip_reass_free_complete_datagram+0x134>)
 801061e:	f000 ff0b 	bl	8011438 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	889b      	ldrh	r3, [r3, #4]
 801062e:	b29b      	uxth	r3, r3
 8010630:	2b00      	cmp	r3, #0
 8010632:	d12a      	bne.n	801068a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	685b      	ldr	r3, [r3, #4]
 8010638:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010642:	69bb      	ldr	r3, [r7, #24]
 8010644:	6858      	ldr	r0, [r3, #4]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	3308      	adds	r3, #8
 801064a:	2214      	movs	r2, #20
 801064c:	4619      	mov	r1, r3
 801064e:	f000 fedd 	bl	801140c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010652:	2101      	movs	r1, #1
 8010654:	69b8      	ldr	r0, [r7, #24]
 8010656:	f7ff fc29 	bl	800feac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801065a:	69b8      	ldr	r0, [r7, #24]
 801065c:	f7f6 fb7a 	bl	8006d54 <pbuf_clen>
 8010660:	4603      	mov	r3, r0
 8010662:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010664:	8bfa      	ldrh	r2, [r7, #30]
 8010666:	8a7b      	ldrh	r3, [r7, #18]
 8010668:	4413      	add	r3, r2
 801066a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801066e:	db05      	blt.n	801067c <ip_reass_free_complete_datagram+0x98>
 8010670:	4b27      	ldr	r3, [pc, #156]	; (8010710 <ip_reass_free_complete_datagram+0x12c>)
 8010672:	22bc      	movs	r2, #188	; 0xbc
 8010674:	492a      	ldr	r1, [pc, #168]	; (8010720 <ip_reass_free_complete_datagram+0x13c>)
 8010676:	4828      	ldr	r0, [pc, #160]	; (8010718 <ip_reass_free_complete_datagram+0x134>)
 8010678:	f000 fede 	bl	8011438 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801067c:	8bfa      	ldrh	r2, [r7, #30]
 801067e:	8a7b      	ldrh	r3, [r7, #18]
 8010680:	4413      	add	r3, r2
 8010682:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010684:	69b8      	ldr	r0, [r7, #24]
 8010686:	f7f6 fadd 	bl	8006c44 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010690:	e01f      	b.n	80106d2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010692:	69bb      	ldr	r3, [r7, #24]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801069c:	697b      	ldr	r3, [r7, #20]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f7f6 fb56 	bl	8006d54 <pbuf_clen>
 80106a8:	4603      	mov	r3, r0
 80106aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80106ac:	8bfa      	ldrh	r2, [r7, #30]
 80106ae:	8a7b      	ldrh	r3, [r7, #18]
 80106b0:	4413      	add	r3, r2
 80106b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106b6:	db05      	blt.n	80106c4 <ip_reass_free_complete_datagram+0xe0>
 80106b8:	4b15      	ldr	r3, [pc, #84]	; (8010710 <ip_reass_free_complete_datagram+0x12c>)
 80106ba:	22cc      	movs	r2, #204	; 0xcc
 80106bc:	4918      	ldr	r1, [pc, #96]	; (8010720 <ip_reass_free_complete_datagram+0x13c>)
 80106be:	4816      	ldr	r0, [pc, #88]	; (8010718 <ip_reass_free_complete_datagram+0x134>)
 80106c0:	f000 feba 	bl	8011438 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80106c4:	8bfa      	ldrh	r2, [r7, #30]
 80106c6:	8a7b      	ldrh	r3, [r7, #18]
 80106c8:	4413      	add	r3, r2
 80106ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80106cc:	68f8      	ldr	r0, [r7, #12]
 80106ce:	f7f6 fab9 	bl	8006c44 <pbuf_free>
  while (p != NULL) {
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1dc      	bne.n	8010692 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80106d8:	6839      	ldr	r1, [r7, #0]
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f000 f8c2 	bl	8010864 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80106e0:	4b10      	ldr	r3, [pc, #64]	; (8010724 <ip_reass_free_complete_datagram+0x140>)
 80106e2:	881b      	ldrh	r3, [r3, #0]
 80106e4:	8bfa      	ldrh	r2, [r7, #30]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d905      	bls.n	80106f6 <ip_reass_free_complete_datagram+0x112>
 80106ea:	4b09      	ldr	r3, [pc, #36]	; (8010710 <ip_reass_free_complete_datagram+0x12c>)
 80106ec:	22d2      	movs	r2, #210	; 0xd2
 80106ee:	490e      	ldr	r1, [pc, #56]	; (8010728 <ip_reass_free_complete_datagram+0x144>)
 80106f0:	4809      	ldr	r0, [pc, #36]	; (8010718 <ip_reass_free_complete_datagram+0x134>)
 80106f2:	f000 fea1 	bl	8011438 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80106f6:	4b0b      	ldr	r3, [pc, #44]	; (8010724 <ip_reass_free_complete_datagram+0x140>)
 80106f8:	881a      	ldrh	r2, [r3, #0]
 80106fa:	8bfb      	ldrh	r3, [r7, #30]
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	b29a      	uxth	r2, r3
 8010700:	4b08      	ldr	r3, [pc, #32]	; (8010724 <ip_reass_free_complete_datagram+0x140>)
 8010702:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010704:	8bfb      	ldrh	r3, [r7, #30]
}
 8010706:	4618      	mov	r0, r3
 8010708:	3720      	adds	r7, #32
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	08014f74 	.word	0x08014f74
 8010714:	08014fb0 	.word	0x08014fb0
 8010718:	08014fbc 	.word	0x08014fbc
 801071c:	08014fe4 	.word	0x08014fe4
 8010720:	08014ff8 	.word	0x08014ff8
 8010724:	20000214 	.word	0x20000214
 8010728:	08015018 	.word	0x08015018

0801072c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b08a      	sub	sp, #40	; 0x28
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010736:	2300      	movs	r3, #0
 8010738:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801073a:	2300      	movs	r3, #0
 801073c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801073e:	2300      	movs	r3, #0
 8010740:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010742:	2300      	movs	r3, #0
 8010744:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010746:	2300      	movs	r3, #0
 8010748:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801074a:	4b28      	ldr	r3, [pc, #160]	; (80107ec <ip_reass_remove_oldest_datagram+0xc0>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010750:	e030      	b.n	80107b4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010754:	695a      	ldr	r2, [r3, #20]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	429a      	cmp	r2, r3
 801075c:	d10c      	bne.n	8010778 <ip_reass_remove_oldest_datagram+0x4c>
 801075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010760:	699a      	ldr	r2, [r3, #24]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	691b      	ldr	r3, [r3, #16]
 8010766:	429a      	cmp	r2, r3
 8010768:	d106      	bne.n	8010778 <ip_reass_remove_oldest_datagram+0x4c>
 801076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076c:	899a      	ldrh	r2, [r3, #12]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	889b      	ldrh	r3, [r3, #4]
 8010772:	b29b      	uxth	r3, r3
 8010774:	429a      	cmp	r2, r3
 8010776:	d014      	beq.n	80107a2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	3301      	adds	r3, #1
 801077c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801077e:	6a3b      	ldr	r3, [r7, #32]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d104      	bne.n	801078e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010786:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010788:	69fb      	ldr	r3, [r7, #28]
 801078a:	61bb      	str	r3, [r7, #24]
 801078c:	e009      	b.n	80107a2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010790:	7fda      	ldrb	r2, [r3, #31]
 8010792:	6a3b      	ldr	r3, [r7, #32]
 8010794:	7fdb      	ldrb	r3, [r3, #31]
 8010796:	429a      	cmp	r2, r3
 8010798:	d803      	bhi.n	80107a2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80107a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d001      	beq.n	80107ae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80107aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80107ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80107b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d1cb      	bne.n	8010752 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d008      	beq.n	80107d2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80107c0:	69b9      	ldr	r1, [r7, #24]
 80107c2:	6a38      	ldr	r0, [r7, #32]
 80107c4:	f7ff ff0e 	bl	80105e4 <ip_reass_free_complete_datagram>
 80107c8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80107ca:	697a      	ldr	r2, [r7, #20]
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	4413      	add	r3, r2
 80107d0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80107d2:	697a      	ldr	r2, [r7, #20]
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	da02      	bge.n	80107e0 <ip_reass_remove_oldest_datagram+0xb4>
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	dcac      	bgt.n	801073a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80107e0:	697b      	ldr	r3, [r7, #20]
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3728      	adds	r7, #40	; 0x28
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}
 80107ea:	bf00      	nop
 80107ec:	20000210 	.word	0x20000210

080107f0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80107fa:	2004      	movs	r0, #4
 80107fc:	f7f5 fbbc 	bl	8005f78 <memp_malloc>
 8010800:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d110      	bne.n	801082a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010808:	6839      	ldr	r1, [r7, #0]
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7ff ff8e 	bl	801072c <ip_reass_remove_oldest_datagram>
 8010810:	4602      	mov	r2, r0
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	4293      	cmp	r3, r2
 8010816:	dc03      	bgt.n	8010820 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010818:	2004      	movs	r0, #4
 801081a:	f7f5 fbad 	bl	8005f78 <memp_malloc>
 801081e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d101      	bne.n	801082a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010826:	2300      	movs	r3, #0
 8010828:	e016      	b.n	8010858 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801082a:	2220      	movs	r2, #32
 801082c:	2100      	movs	r1, #0
 801082e:	68f8      	ldr	r0, [r7, #12]
 8010830:	f000 fdfa 	bl	8011428 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	220f      	movs	r2, #15
 8010838:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801083a:	4b09      	ldr	r3, [pc, #36]	; (8010860 <ip_reass_enqueue_new_datagram+0x70>)
 801083c:	681a      	ldr	r2, [r3, #0]
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010842:	4a07      	ldr	r2, [pc, #28]	; (8010860 <ip_reass_enqueue_new_datagram+0x70>)
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	3308      	adds	r3, #8
 801084c:	2214      	movs	r2, #20
 801084e:	6879      	ldr	r1, [r7, #4]
 8010850:	4618      	mov	r0, r3
 8010852:	f000 fddb 	bl	801140c <memcpy>
  return ipr;
 8010856:	68fb      	ldr	r3, [r7, #12]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}
 8010860:	20000210 	.word	0x20000210

08010864 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b082      	sub	sp, #8
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801086e:	4b10      	ldr	r3, [pc, #64]	; (80108b0 <ip_reass_dequeue_datagram+0x4c>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	429a      	cmp	r2, r3
 8010876:	d104      	bne.n	8010882 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	4a0c      	ldr	r2, [pc, #48]	; (80108b0 <ip_reass_dequeue_datagram+0x4c>)
 801087e:	6013      	str	r3, [r2, #0]
 8010880:	e00d      	b.n	801089e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d106      	bne.n	8010896 <ip_reass_dequeue_datagram+0x32>
 8010888:	4b0a      	ldr	r3, [pc, #40]	; (80108b4 <ip_reass_dequeue_datagram+0x50>)
 801088a:	f240 1245 	movw	r2, #325	; 0x145
 801088e:	490a      	ldr	r1, [pc, #40]	; (80108b8 <ip_reass_dequeue_datagram+0x54>)
 8010890:	480a      	ldr	r0, [pc, #40]	; (80108bc <ip_reass_dequeue_datagram+0x58>)
 8010892:	f000 fdd1 	bl	8011438 <iprintf>
    prev->next = ipr->next;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801089e:	6879      	ldr	r1, [r7, #4]
 80108a0:	2004      	movs	r0, #4
 80108a2:	f7f5 fbb5 	bl	8006010 <memp_free>
}
 80108a6:	bf00      	nop
 80108a8:	3708      	adds	r7, #8
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	20000210 	.word	0x20000210
 80108b4:	08014f74 	.word	0x08014f74
 80108b8:	0801503c 	.word	0x0801503c
 80108bc:	08014fbc 	.word	0x08014fbc

080108c0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b08c      	sub	sp, #48	; 0x30
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80108cc:	2300      	movs	r3, #0
 80108ce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80108d0:	2301      	movs	r3, #1
 80108d2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	885b      	ldrh	r3, [r3, #2]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7f4 fef3 	bl	80056cc <lwip_htons>
 80108e6:	4603      	mov	r3, r0
 80108e8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80108ea:	69fb      	ldr	r3, [r7, #28]
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	f003 030f 	and.w	r3, r3, #15
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	009b      	lsls	r3, r3, #2
 80108f6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80108f8:	7e7b      	ldrb	r3, [r7, #25]
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	8b7a      	ldrh	r2, [r7, #26]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d202      	bcs.n	8010908 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010902:	f04f 33ff 	mov.w	r3, #4294967295
 8010906:	e135      	b.n	8010b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010908:	7e7b      	ldrb	r3, [r7, #25]
 801090a:	b29b      	uxth	r3, r3
 801090c:	8b7a      	ldrh	r2, [r7, #26]
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	88db      	ldrh	r3, [r3, #6]
 8010916:	b29b      	uxth	r3, r3
 8010918:	4618      	mov	r0, r3
 801091a:	f7f4 fed7 	bl	80056cc <lwip_htons>
 801091e:	4603      	mov	r3, r0
 8010920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010924:	b29b      	uxth	r3, r3
 8010926:	00db      	lsls	r3, r3, #3
 8010928:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010932:	2200      	movs	r2, #0
 8010934:	701a      	strb	r2, [r3, #0]
 8010936:	2200      	movs	r2, #0
 8010938:	705a      	strb	r2, [r3, #1]
 801093a:	2200      	movs	r2, #0
 801093c:	709a      	strb	r2, [r3, #2]
 801093e:	2200      	movs	r2, #0
 8010940:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010944:	8afa      	ldrh	r2, [r7, #22]
 8010946:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010948:	8afa      	ldrh	r2, [r7, #22]
 801094a:	8b7b      	ldrh	r3, [r7, #26]
 801094c:	4413      	add	r3, r2
 801094e:	b29a      	uxth	r2, r3
 8010950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010952:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010956:	88db      	ldrh	r3, [r3, #6]
 8010958:	b29b      	uxth	r3, r3
 801095a:	8afa      	ldrh	r2, [r7, #22]
 801095c:	429a      	cmp	r2, r3
 801095e:	d902      	bls.n	8010966 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010960:	f04f 33ff 	mov.w	r3, #4294967295
 8010964:	e106      	b.n	8010b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	627b      	str	r3, [r7, #36]	; 0x24
 801096c:	e068      	b.n	8010a40 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010976:	889b      	ldrh	r3, [r3, #4]
 8010978:	b29a      	uxth	r2, r3
 801097a:	693b      	ldr	r3, [r7, #16]
 801097c:	889b      	ldrh	r3, [r3, #4]
 801097e:	b29b      	uxth	r3, r3
 8010980:	429a      	cmp	r2, r3
 8010982:	d235      	bcs.n	80109f0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010988:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801098a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098c:	2b00      	cmp	r3, #0
 801098e:	d020      	beq.n	80109d2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010992:	889b      	ldrh	r3, [r3, #4]
 8010994:	b29a      	uxth	r2, r3
 8010996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010998:	88db      	ldrh	r3, [r3, #6]
 801099a:	b29b      	uxth	r3, r3
 801099c:	429a      	cmp	r2, r3
 801099e:	d307      	bcc.n	80109b0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80109a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a2:	88db      	ldrh	r3, [r3, #6]
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	889b      	ldrh	r3, [r3, #4]
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d902      	bls.n	80109b6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80109b0:	f04f 33ff 	mov.w	r3, #4294967295
 80109b4:	e0de      	b.n	8010b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80109b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b8:	68ba      	ldr	r2, [r7, #8]
 80109ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80109bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109be:	88db      	ldrh	r3, [r3, #6]
 80109c0:	b29a      	uxth	r2, r3
 80109c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c4:	889b      	ldrh	r3, [r3, #4]
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d03d      	beq.n	8010a48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80109cc:	2300      	movs	r3, #0
 80109ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80109d0:	e03a      	b.n	8010a48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80109d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d4:	88db      	ldrh	r3, [r3, #6]
 80109d6:	b29a      	uxth	r2, r3
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	889b      	ldrh	r3, [r3, #4]
 80109dc:	b29b      	uxth	r3, r3
 80109de:	429a      	cmp	r2, r3
 80109e0:	d902      	bls.n	80109e8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80109e2:	f04f 33ff 	mov.w	r3, #4294967295
 80109e6:	e0c5      	b.n	8010b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	68ba      	ldr	r2, [r7, #8]
 80109ec:	605a      	str	r2, [r3, #4]
      break;
 80109ee:	e02b      	b.n	8010a48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80109f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f2:	889b      	ldrh	r3, [r3, #4]
 80109f4:	b29a      	uxth	r2, r3
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	889b      	ldrh	r3, [r3, #4]
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d102      	bne.n	8010a06 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010a00:	f04f 33ff 	mov.w	r3, #4294967295
 8010a04:	e0b6      	b.n	8010b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a08:	889b      	ldrh	r3, [r3, #4]
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	88db      	ldrh	r3, [r3, #6]
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d202      	bcs.n	8010a1c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010a16:	f04f 33ff 	mov.w	r3, #4294967295
 8010a1a:	e0ab      	b.n	8010b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d009      	beq.n	8010a36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a24:	88db      	ldrh	r3, [r3, #6]
 8010a26:	b29a      	uxth	r2, r3
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	889b      	ldrh	r3, [r3, #4]
 8010a2c:	b29b      	uxth	r3, r3
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d001      	beq.n	8010a36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010a32:	2300      	movs	r3, #0
 8010a34:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d193      	bne.n	801096e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010a46:	e000      	b.n	8010a4a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010a48:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d12d      	bne.n	8010aac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d01c      	beq.n	8010a90 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a58:	88db      	ldrh	r3, [r3, #6]
 8010a5a:	b29a      	uxth	r2, r3
 8010a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5e:	889b      	ldrh	r3, [r3, #4]
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d906      	bls.n	8010a74 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010a66:	4b45      	ldr	r3, [pc, #276]	; (8010b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010a68:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010a6c:	4944      	ldr	r1, [pc, #272]	; (8010b80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010a6e:	4845      	ldr	r0, [pc, #276]	; (8010b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010a70:	f000 fce2 	bl	8011438 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a76:	68ba      	ldr	r2, [r7, #8]
 8010a78:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7c:	88db      	ldrh	r3, [r3, #6]
 8010a7e:	b29a      	uxth	r2, r3
 8010a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a82:	889b      	ldrh	r3, [r3, #4]
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d010      	beq.n	8010aac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	623b      	str	r3, [r7, #32]
 8010a8e:	e00d      	b.n	8010aac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d006      	beq.n	8010aa6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010a98:	4b38      	ldr	r3, [pc, #224]	; (8010b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010a9a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8010a9e:	493a      	ldr	r1, [pc, #232]	; (8010b88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010aa0:	4838      	ldr	r0, [pc, #224]	; (8010b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010aa2:	f000 fcc9 	bl	8011438 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	68ba      	ldr	r2, [r7, #8]
 8010aaa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d105      	bne.n	8010abe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	7f9b      	ldrb	r3, [r3, #30]
 8010ab6:	f003 0301 	and.w	r3, r3, #1
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d059      	beq.n	8010b72 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010abe:	6a3b      	ldr	r3, [r7, #32]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d04f      	beq.n	8010b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d006      	beq.n	8010ada <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	889b      	ldrh	r3, [r3, #4]
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d002      	beq.n	8010ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010ada:	2300      	movs	r3, #0
 8010adc:	623b      	str	r3, [r7, #32]
 8010ade:	e041      	b.n	8010b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010aea:	e012      	b.n	8010b12 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af4:	88db      	ldrh	r3, [r3, #6]
 8010af6:	b29a      	uxth	r2, r3
 8010af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010afa:	889b      	ldrh	r3, [r3, #4]
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d002      	beq.n	8010b08 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010b02:	2300      	movs	r3, #0
 8010b04:	623b      	str	r3, [r7, #32]
            break;
 8010b06:	e007      	b.n	8010b18 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d1e9      	bne.n	8010aec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010b18:	6a3b      	ldr	r3, [r7, #32]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d022      	beq.n	8010b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d106      	bne.n	8010b34 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010b26:	4b15      	ldr	r3, [pc, #84]	; (8010b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010b28:	f240 12df 	movw	r2, #479	; 0x1df
 8010b2c:	4917      	ldr	r1, [pc, #92]	; (8010b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010b2e:	4815      	ldr	r0, [pc, #84]	; (8010b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010b30:	f000 fc82 	bl	8011438 <iprintf>
          LWIP_ASSERT("sanity check",
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	685b      	ldr	r3, [r3, #4]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d106      	bne.n	8010b4e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010b40:	4b0e      	ldr	r3, [pc, #56]	; (8010b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010b42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010b46:	4911      	ldr	r1, [pc, #68]	; (8010b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010b48:	480e      	ldr	r0, [pc, #56]	; (8010b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010b4a:	f000 fc75 	bl	8011438 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d006      	beq.n	8010b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010b56:	4b09      	ldr	r3, [pc, #36]	; (8010b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010b58:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010b5c:	490c      	ldr	r1, [pc, #48]	; (8010b90 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010b5e:	4809      	ldr	r0, [pc, #36]	; (8010b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010b60:	f000 fc6a 	bl	8011438 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010b64:	6a3b      	ldr	r3, [r7, #32]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	bf14      	ite	ne
 8010b6a:	2301      	movne	r3, #1
 8010b6c:	2300      	moveq	r3, #0
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	e000      	b.n	8010b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010b72:	2300      	movs	r3, #0
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3730      	adds	r7, #48	; 0x30
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	08014f74 	.word	0x08014f74
 8010b80:	08015058 	.word	0x08015058
 8010b84:	08014fbc 	.word	0x08014fbc
 8010b88:	08015078 	.word	0x08015078
 8010b8c:	080150b0 	.word	0x080150b0
 8010b90:	080150c0 	.word	0x080150c0

08010b94 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b08e      	sub	sp, #56	; 0x38
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	f003 030f 	and.w	r3, r3, #15
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	009b      	lsls	r3, r3, #2
 8010bae:	b2db      	uxtb	r3, r3
 8010bb0:	2b14      	cmp	r3, #20
 8010bb2:	f040 8167 	bne.w	8010e84 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb8:	88db      	ldrh	r3, [r3, #6]
 8010bba:	b29b      	uxth	r3, r3
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7f4 fd85 	bl	80056cc <lwip_htons>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	00db      	lsls	r3, r3, #3
 8010bcc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd0:	885b      	ldrh	r3, [r3, #2]
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7f4 fd79 	bl	80056cc <lwip_htons>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	f003 030f 	and.w	r3, r3, #15
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	009b      	lsls	r3, r3, #2
 8010bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010bee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	f0c0 8146 	bcc.w	8010e88 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010c04:	1ad3      	subs	r3, r2, r3
 8010c06:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f7f6 f8a3 	bl	8006d54 <pbuf_clen>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010c12:	4b9f      	ldr	r3, [pc, #636]	; (8010e90 <ip4_reass+0x2fc>)
 8010c14:	881b      	ldrh	r3, [r3, #0]
 8010c16:	461a      	mov	r2, r3
 8010c18:	8c3b      	ldrh	r3, [r7, #32]
 8010c1a:	4413      	add	r3, r2
 8010c1c:	2b0a      	cmp	r3, #10
 8010c1e:	dd10      	ble.n	8010c42 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010c20:	8c3b      	ldrh	r3, [r7, #32]
 8010c22:	4619      	mov	r1, r3
 8010c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c26:	f7ff fd81 	bl	801072c <ip_reass_remove_oldest_datagram>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	f000 812d 	beq.w	8010e8c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010c32:	4b97      	ldr	r3, [pc, #604]	; (8010e90 <ip4_reass+0x2fc>)
 8010c34:	881b      	ldrh	r3, [r3, #0]
 8010c36:	461a      	mov	r2, r3
 8010c38:	8c3b      	ldrh	r3, [r7, #32]
 8010c3a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010c3c:	2b0a      	cmp	r3, #10
 8010c3e:	f300 8125 	bgt.w	8010e8c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010c42:	4b94      	ldr	r3, [pc, #592]	; (8010e94 <ip4_reass+0x300>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	633b      	str	r3, [r7, #48]	; 0x30
 8010c48:	e015      	b.n	8010c76 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4c:	695a      	ldr	r2, [r3, #20]
 8010c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d10c      	bne.n	8010c70 <ip4_reass+0xdc>
 8010c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c58:	699a      	ldr	r2, [r3, #24]
 8010c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c5c:	691b      	ldr	r3, [r3, #16]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d106      	bne.n	8010c70 <ip4_reass+0xdc>
 8010c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c64:	899a      	ldrh	r2, [r3, #12]
 8010c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c68:	889b      	ldrh	r3, [r3, #4]
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d006      	beq.n	8010c7e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	633b      	str	r3, [r7, #48]	; 0x30
 8010c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d1e6      	bne.n	8010c4a <ip4_reass+0xb6>
 8010c7c:	e000      	b.n	8010c80 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010c7e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d109      	bne.n	8010c9a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010c86:	8c3b      	ldrh	r3, [r7, #32]
 8010c88:	4619      	mov	r1, r3
 8010c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c8c:	f7ff fdb0 	bl	80107f0 <ip_reass_enqueue_new_datagram>
 8010c90:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d11c      	bne.n	8010cd2 <ip4_reass+0x13e>
      goto nullreturn;
 8010c98:	e109      	b.n	8010eae <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9c:	88db      	ldrh	r3, [r3, #6]
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7f4 fd13 	bl	80056cc <lwip_htons>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d110      	bne.n	8010cd2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb2:	89db      	ldrh	r3, [r3, #14]
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7f4 fd09 	bl	80056cc <lwip_htons>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d006      	beq.n	8010cd2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc6:	3308      	adds	r3, #8
 8010cc8:	2214      	movs	r2, #20
 8010cca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f000 fb9d 	bl	801140c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd4:	88db      	ldrh	r3, [r3, #6]
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	f003 0320 	and.w	r3, r3, #32
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	bf0c      	ite	eq
 8010ce0:	2301      	moveq	r3, #1
 8010ce2:	2300      	movne	r3, #0
 8010ce4:	b2db      	uxtb	r3, r3
 8010ce6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d00e      	beq.n	8010d0c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010cee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010cf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010cf2:	4413      	add	r3, r2
 8010cf4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010cf6:	8b7a      	ldrh	r2, [r7, #26]
 8010cf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	f0c0 80a0 	bcc.w	8010e40 <ip4_reass+0x2ac>
 8010d00:	8b7b      	ldrh	r3, [r7, #26]
 8010d02:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010d06:	4293      	cmp	r3, r2
 8010d08:	f200 809a 	bhi.w	8010e40 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010d0c:	69fa      	ldr	r2, [r7, #28]
 8010d0e:	6879      	ldr	r1, [r7, #4]
 8010d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d12:	f7ff fdd5 	bl	80108c0 <ip_reass_chain_frag_into_datagram_and_validate>
 8010d16:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d1e:	f000 8091 	beq.w	8010e44 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010d22:	4b5b      	ldr	r3, [pc, #364]	; (8010e90 <ip4_reass+0x2fc>)
 8010d24:	881a      	ldrh	r2, [r3, #0]
 8010d26:	8c3b      	ldrh	r3, [r7, #32]
 8010d28:	4413      	add	r3, r2
 8010d2a:	b29a      	uxth	r2, r3
 8010d2c:	4b58      	ldr	r3, [pc, #352]	; (8010e90 <ip4_reass+0x2fc>)
 8010d2e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010d30:	69fb      	ldr	r3, [r7, #28]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d00d      	beq.n	8010d52 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010d36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d3a:	4413      	add	r3, r2
 8010d3c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d40:	8a7a      	ldrh	r2, [r7, #18]
 8010d42:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d46:	7f9b      	ldrb	r3, [r3, #30]
 8010d48:	f043 0301 	orr.w	r3, r3, #1
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d50:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	d171      	bne.n	8010e3c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5a:	8b9b      	ldrh	r3, [r3, #28]
 8010d5c:	3314      	adds	r3, #20
 8010d5e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6c:	685b      	ldr	r3, [r3, #4]
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d74:	3308      	adds	r3, #8
 8010d76:	2214      	movs	r2, #20
 8010d78:	4619      	mov	r1, r3
 8010d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d7c:	f000 fb46 	bl	801140c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010d80:	8a3b      	ldrh	r3, [r7, #16]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7f4 fca2 	bl	80056cc <lwip_htons>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d8e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d92:	2200      	movs	r2, #0
 8010d94:	719a      	strb	r2, [r3, #6]
 8010d96:	2200      	movs	r2, #0
 8010d98:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	729a      	strb	r2, [r3, #10]
 8010da0:	2200      	movs	r2, #0
 8010da2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010daa:	e00d      	b.n	8010dc8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dae:	685b      	ldr	r3, [r3, #4]
 8010db0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010db2:	2114      	movs	r1, #20
 8010db4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010db6:	f7f5 febf 	bl	8006b38 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010dba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f7f6 f803 	bl	8006dc8 <pbuf_cat>
      r = iprh->next_pbuf;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d1ee      	bne.n	8010dac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010dce:	4b31      	ldr	r3, [pc, #196]	; (8010e94 <ip4_reass+0x300>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d102      	bne.n	8010dde <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ddc:	e010      	b.n	8010e00 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010dde:	4b2d      	ldr	r3, [pc, #180]	; (8010e94 <ip4_reass+0x300>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010de4:	e007      	b.n	8010df6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d006      	beq.n	8010dfe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d1f4      	bne.n	8010de6 <ip4_reass+0x252>
 8010dfc:	e000      	b.n	8010e00 <ip4_reass+0x26c>
          break;
 8010dfe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010e00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e04:	f7ff fd2e 	bl	8010864 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f7f5 ffa3 	bl	8006d54 <pbuf_clen>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010e12:	4b1f      	ldr	r3, [pc, #124]	; (8010e90 <ip4_reass+0x2fc>)
 8010e14:	881b      	ldrh	r3, [r3, #0]
 8010e16:	8c3a      	ldrh	r2, [r7, #32]
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d906      	bls.n	8010e2a <ip4_reass+0x296>
 8010e1c:	4b1e      	ldr	r3, [pc, #120]	; (8010e98 <ip4_reass+0x304>)
 8010e1e:	f240 229b 	movw	r2, #667	; 0x29b
 8010e22:	491e      	ldr	r1, [pc, #120]	; (8010e9c <ip4_reass+0x308>)
 8010e24:	481e      	ldr	r0, [pc, #120]	; (8010ea0 <ip4_reass+0x30c>)
 8010e26:	f000 fb07 	bl	8011438 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010e2a:	4b19      	ldr	r3, [pc, #100]	; (8010e90 <ip4_reass+0x2fc>)
 8010e2c:	881a      	ldrh	r2, [r3, #0]
 8010e2e:	8c3b      	ldrh	r3, [r7, #32]
 8010e30:	1ad3      	subs	r3, r2, r3
 8010e32:	b29a      	uxth	r2, r3
 8010e34:	4b16      	ldr	r3, [pc, #88]	; (8010e90 <ip4_reass+0x2fc>)
 8010e36:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	e03c      	b.n	8010eb6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	e03a      	b.n	8010eb6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8010e40:	bf00      	nop
 8010e42:	e000      	b.n	8010e46 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010e44:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d106      	bne.n	8010e5a <ip4_reass+0x2c6>
 8010e4c:	4b12      	ldr	r3, [pc, #72]	; (8010e98 <ip4_reass+0x304>)
 8010e4e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010e52:	4914      	ldr	r1, [pc, #80]	; (8010ea4 <ip4_reass+0x310>)
 8010e54:	4812      	ldr	r0, [pc, #72]	; (8010ea0 <ip4_reass+0x30c>)
 8010e56:	f000 faef 	bl	8011438 <iprintf>
  if (ipr->p == NULL) {
 8010e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d124      	bne.n	8010eac <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010e62:	4b0c      	ldr	r3, [pc, #48]	; (8010e94 <ip4_reass+0x300>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d006      	beq.n	8010e7a <ip4_reass+0x2e6>
 8010e6c:	4b0a      	ldr	r3, [pc, #40]	; (8010e98 <ip4_reass+0x304>)
 8010e6e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010e72:	490d      	ldr	r1, [pc, #52]	; (8010ea8 <ip4_reass+0x314>)
 8010e74:	480a      	ldr	r0, [pc, #40]	; (8010ea0 <ip4_reass+0x30c>)
 8010e76:	f000 fadf 	bl	8011438 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010e7a:	2100      	movs	r1, #0
 8010e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e7e:	f7ff fcf1 	bl	8010864 <ip_reass_dequeue_datagram>
 8010e82:	e014      	b.n	8010eae <ip4_reass+0x31a>
    goto nullreturn;
 8010e84:	bf00      	nop
 8010e86:	e012      	b.n	8010eae <ip4_reass+0x31a>
    goto nullreturn;
 8010e88:	bf00      	nop
 8010e8a:	e010      	b.n	8010eae <ip4_reass+0x31a>
      goto nullreturn;
 8010e8c:	bf00      	nop
 8010e8e:	e00e      	b.n	8010eae <ip4_reass+0x31a>
 8010e90:	20000214 	.word	0x20000214
 8010e94:	20000210 	.word	0x20000210
 8010e98:	08014f74 	.word	0x08014f74
 8010e9c:	080150e4 	.word	0x080150e4
 8010ea0:	08014fbc 	.word	0x08014fbc
 8010ea4:	08015100 	.word	0x08015100
 8010ea8:	0801510c 	.word	0x0801510c
  }

nullreturn:
 8010eac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f7f5 fec8 	bl	8006c44 <pbuf_free>
  return NULL;
 8010eb4:	2300      	movs	r3, #0
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3738      	adds	r7, #56	; 0x38
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop

08010ec0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010ec4:	2005      	movs	r0, #5
 8010ec6:	f7f5 f857 	bl	8005f78 <memp_malloc>
 8010eca:	4603      	mov	r3, r0
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	bd80      	pop	{r7, pc}

08010ed0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d106      	bne.n	8010eec <ip_frag_free_pbuf_custom_ref+0x1c>
 8010ede:	4b07      	ldr	r3, [pc, #28]	; (8010efc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010ee0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010ee4:	4906      	ldr	r1, [pc, #24]	; (8010f00 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010ee6:	4807      	ldr	r0, [pc, #28]	; (8010f04 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010ee8:	f000 faa6 	bl	8011438 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010eec:	6879      	ldr	r1, [r7, #4]
 8010eee:	2005      	movs	r0, #5
 8010ef0:	f7f5 f88e 	bl	8006010 <memp_free>
}
 8010ef4:	bf00      	nop
 8010ef6:	3708      	adds	r7, #8
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	08014f74 	.word	0x08014f74
 8010f00:	0801512c 	.word	0x0801512c
 8010f04:	08014fbc 	.word	0x08014fbc

08010f08 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d106      	bne.n	8010f28 <ipfrag_free_pbuf_custom+0x20>
 8010f1a:	4b11      	ldr	r3, [pc, #68]	; (8010f60 <ipfrag_free_pbuf_custom+0x58>)
 8010f1c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010f20:	4910      	ldr	r1, [pc, #64]	; (8010f64 <ipfrag_free_pbuf_custom+0x5c>)
 8010f22:	4811      	ldr	r0, [pc, #68]	; (8010f68 <ipfrag_free_pbuf_custom+0x60>)
 8010f24:	f000 fa88 	bl	8011438 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010f28:	68fa      	ldr	r2, [r7, #12]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d006      	beq.n	8010f3e <ipfrag_free_pbuf_custom+0x36>
 8010f30:	4b0b      	ldr	r3, [pc, #44]	; (8010f60 <ipfrag_free_pbuf_custom+0x58>)
 8010f32:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010f36:	490d      	ldr	r1, [pc, #52]	; (8010f6c <ipfrag_free_pbuf_custom+0x64>)
 8010f38:	480b      	ldr	r0, [pc, #44]	; (8010f68 <ipfrag_free_pbuf_custom+0x60>)
 8010f3a:	f000 fa7d 	bl	8011438 <iprintf>
  if (pcr->original != NULL) {
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	695b      	ldr	r3, [r3, #20]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d004      	beq.n	8010f50 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	695b      	ldr	r3, [r3, #20]
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7f5 fe7a 	bl	8006c44 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010f50:	68f8      	ldr	r0, [r7, #12]
 8010f52:	f7ff ffbd 	bl	8010ed0 <ip_frag_free_pbuf_custom_ref>
}
 8010f56:	bf00      	nop
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	08014f74 	.word	0x08014f74
 8010f64:	08015138 	.word	0x08015138
 8010f68:	08014fbc 	.word	0x08014fbc
 8010f6c:	08015144 	.word	0x08015144

08010f70 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b094      	sub	sp, #80	; 0x50
 8010f74:	af02      	add	r7, sp, #8
 8010f76:	60f8      	str	r0, [r7, #12]
 8010f78:	60b9      	str	r1, [r7, #8]
 8010f7a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010f86:	3b14      	subs	r3, #20
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	da00      	bge.n	8010f8e <ip4_frag+0x1e>
 8010f8c:	3307      	adds	r3, #7
 8010f8e:	10db      	asrs	r3, r3, #3
 8010f90:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010f92:	2314      	movs	r3, #20
 8010f94:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	f003 030f 	and.w	r3, r3, #15
 8010fa8:	b2db      	uxtb	r3, r3
 8010faa:	009b      	lsls	r3, r3, #2
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	2b14      	cmp	r3, #20
 8010fb0:	d002      	beq.n	8010fb8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010fb2:	f06f 0305 	mvn.w	r3, #5
 8010fb6:	e110      	b.n	80111da <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	895b      	ldrh	r3, [r3, #10]
 8010fbc:	2b13      	cmp	r3, #19
 8010fbe:	d809      	bhi.n	8010fd4 <ip4_frag+0x64>
 8010fc0:	4b88      	ldr	r3, [pc, #544]	; (80111e4 <ip4_frag+0x274>)
 8010fc2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010fc6:	4988      	ldr	r1, [pc, #544]	; (80111e8 <ip4_frag+0x278>)
 8010fc8:	4888      	ldr	r0, [pc, #544]	; (80111ec <ip4_frag+0x27c>)
 8010fca:	f000 fa35 	bl	8011438 <iprintf>
 8010fce:	f06f 0305 	mvn.w	r3, #5
 8010fd2:	e102      	b.n	80111da <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd6:	88db      	ldrh	r3, [r3, #6]
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7f4 fb76 	bl	80056cc <lwip_htons>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010fe4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010fe6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010fea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010fee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ff4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	891b      	ldrh	r3, [r3, #8]
 8010ffa:	3b14      	subs	r3, #20
 8010ffc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011000:	e0e1      	b.n	80111c6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011002:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011004:	00db      	lsls	r3, r3, #3
 8011006:	b29b      	uxth	r3, r3
 8011008:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801100c:	4293      	cmp	r3, r2
 801100e:	bf28      	it	cs
 8011010:	4613      	movcs	r3, r2
 8011012:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011014:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011018:	2114      	movs	r1, #20
 801101a:	200e      	movs	r0, #14
 801101c:	f7f5 fb2e 	bl	800667c <pbuf_alloc>
 8011020:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011024:	2b00      	cmp	r3, #0
 8011026:	f000 80d5 	beq.w	80111d4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102c:	895b      	ldrh	r3, [r3, #10]
 801102e:	2b13      	cmp	r3, #19
 8011030:	d806      	bhi.n	8011040 <ip4_frag+0xd0>
 8011032:	4b6c      	ldr	r3, [pc, #432]	; (80111e4 <ip4_frag+0x274>)
 8011034:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011038:	496d      	ldr	r1, [pc, #436]	; (80111f0 <ip4_frag+0x280>)
 801103a:	486c      	ldr	r0, [pc, #432]	; (80111ec <ip4_frag+0x27c>)
 801103c:	f000 f9fc 	bl	8011438 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	2214      	movs	r2, #20
 8011046:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011048:	4618      	mov	r0, r3
 801104a:	f000 f9df 	bl	801140c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011054:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011056:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801105a:	e064      	b.n	8011126 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	895a      	ldrh	r2, [r3, #10]
 8011060:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011062:	1ad3      	subs	r3, r2, r3
 8011064:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	895b      	ldrh	r3, [r3, #10]
 801106a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801106c:	429a      	cmp	r2, r3
 801106e:	d906      	bls.n	801107e <ip4_frag+0x10e>
 8011070:	4b5c      	ldr	r3, [pc, #368]	; (80111e4 <ip4_frag+0x274>)
 8011072:	f240 322d 	movw	r2, #813	; 0x32d
 8011076:	495f      	ldr	r1, [pc, #380]	; (80111f4 <ip4_frag+0x284>)
 8011078:	485c      	ldr	r0, [pc, #368]	; (80111ec <ip4_frag+0x27c>)
 801107a:	f000 f9dd 	bl	8011438 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801107e:	8bfa      	ldrh	r2, [r7, #30]
 8011080:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011084:	4293      	cmp	r3, r2
 8011086:	bf28      	it	cs
 8011088:	4613      	movcs	r3, r2
 801108a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801108e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011092:	2b00      	cmp	r3, #0
 8011094:	d105      	bne.n	80110a2 <ip4_frag+0x132>
        poff = 0;
 8011096:	2300      	movs	r3, #0
 8011098:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	60fb      	str	r3, [r7, #12]
        continue;
 80110a0:	e041      	b.n	8011126 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80110a2:	f7ff ff0d 	bl	8010ec0 <ip_frag_alloc_pbuf_custom_ref>
 80110a6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80110a8:	69bb      	ldr	r3, [r7, #24]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d103      	bne.n	80110b6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80110ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110b0:	f7f5 fdc8 	bl	8006c44 <pbuf_free>
        goto memerr;
 80110b4:	e08f      	b.n	80111d6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80110b6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80110bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80110be:	4413      	add	r3, r2
 80110c0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80110c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80110c8:	9201      	str	r2, [sp, #4]
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	4603      	mov	r3, r0
 80110ce:	2241      	movs	r2, #65	; 0x41
 80110d0:	2000      	movs	r0, #0
 80110d2:	f7f5 fbfd 	bl	80068d0 <pbuf_alloced_custom>
 80110d6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d106      	bne.n	80110ec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80110de:	69b8      	ldr	r0, [r7, #24]
 80110e0:	f7ff fef6 	bl	8010ed0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80110e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110e6:	f7f5 fdad 	bl	8006c44 <pbuf_free>
        goto memerr;
 80110ea:	e074      	b.n	80111d6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f7f5 fe49 	bl	8006d84 <pbuf_ref>
      pcr->original = p;
 80110f2:	69bb      	ldr	r3, [r7, #24]
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80110f8:	69bb      	ldr	r3, [r7, #24]
 80110fa:	4a3f      	ldr	r2, [pc, #252]	; (80111f8 <ip4_frag+0x288>)
 80110fc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80110fe:	6979      	ldr	r1, [r7, #20]
 8011100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011102:	f7f5 fe61 	bl	8006dc8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011106:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801110a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801110e:	1ad3      	subs	r3, r2, r3
 8011110:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011114:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011118:	2b00      	cmp	r3, #0
 801111a:	d004      	beq.n	8011126 <ip4_frag+0x1b6>
        poff = 0;
 801111c:	2300      	movs	r3, #0
 801111e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011126:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801112a:	2b00      	cmp	r3, #0
 801112c:	d196      	bne.n	801105c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801112e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011130:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011134:	4413      	add	r3, r2
 8011136:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801113c:	f1a3 0213 	sub.w	r2, r3, #19
 8011140:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011144:	429a      	cmp	r2, r3
 8011146:	bfcc      	ite	gt
 8011148:	2301      	movgt	r3, #1
 801114a:	2300      	movle	r3, #0
 801114c:	b2db      	uxtb	r3, r3
 801114e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011150:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011158:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801115a:	6a3b      	ldr	r3, [r7, #32]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d002      	beq.n	8011166 <ip4_frag+0x1f6>
 8011160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011162:	2b00      	cmp	r3, #0
 8011164:	d003      	beq.n	801116e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011166:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011168:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801116c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801116e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011170:	4618      	mov	r0, r3
 8011172:	f7f4 faab 	bl	80056cc <lwip_htons>
 8011176:	4603      	mov	r3, r0
 8011178:	461a      	mov	r2, r3
 801117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801117c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801117e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011180:	3314      	adds	r3, #20
 8011182:	b29b      	uxth	r3, r3
 8011184:	4618      	mov	r0, r3
 8011186:	f7f4 faa1 	bl	80056cc <lwip_htons>
 801118a:	4603      	mov	r3, r0
 801118c:	461a      	mov	r2, r3
 801118e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011190:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011194:	2200      	movs	r2, #0
 8011196:	729a      	strb	r2, [r3, #10]
 8011198:	2200      	movs	r2, #0
 801119a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	695b      	ldr	r3, [r3, #20]
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80111a4:	68b8      	ldr	r0, [r7, #8]
 80111a6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80111a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111aa:	f7f5 fd4b 	bl	8006c44 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80111ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80111b4:	1ad3      	subs	r3, r2, r3
 80111b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80111ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80111be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80111c0:	4413      	add	r3, r2
 80111c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80111c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f47f af19 	bne.w	8011002 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80111d0:	2300      	movs	r3, #0
 80111d2:	e002      	b.n	80111da <ip4_frag+0x26a>
      goto memerr;
 80111d4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80111d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3748      	adds	r7, #72	; 0x48
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	08014f74 	.word	0x08014f74
 80111e8:	08015150 	.word	0x08015150
 80111ec:	08014fbc 	.word	0x08014fbc
 80111f0:	0801516c 	.word	0x0801516c
 80111f4:	0801518c 	.word	0x0801518c
 80111f8:	08010f09 	.word	0x08010f09

080111fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b086      	sub	sp, #24
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011206:	230e      	movs	r3, #14
 8011208:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	895b      	ldrh	r3, [r3, #10]
 801120e:	2b0e      	cmp	r3, #14
 8011210:	d96e      	bls.n	80112f0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	7bdb      	ldrb	r3, [r3, #15]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d106      	bne.n	8011228 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011220:	3301      	adds	r3, #1
 8011222:	b2da      	uxtb	r2, r3
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	7b1a      	ldrb	r2, [r3, #12]
 8011232:	7b5b      	ldrb	r3, [r3, #13]
 8011234:	021b      	lsls	r3, r3, #8
 8011236:	4313      	orrs	r3, r2
 8011238:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	f003 0301 	and.w	r3, r3, #1
 8011242:	2b00      	cmp	r3, #0
 8011244:	d023      	beq.n	801128e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	781b      	ldrb	r3, [r3, #0]
 801124a:	2b01      	cmp	r3, #1
 801124c:	d10f      	bne.n	801126e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	785b      	ldrb	r3, [r3, #1]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d11b      	bne.n	801128e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011256:	693b      	ldr	r3, [r7, #16]
 8011258:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801125a:	2b5e      	cmp	r3, #94	; 0x5e
 801125c:	d117      	bne.n	801128e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	7b5b      	ldrb	r3, [r3, #13]
 8011262:	f043 0310 	orr.w	r3, r3, #16
 8011266:	b2da      	uxtb	r2, r3
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	735a      	strb	r2, [r3, #13]
 801126c:	e00f      	b.n	801128e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	2206      	movs	r2, #6
 8011272:	4928      	ldr	r1, [pc, #160]	; (8011314 <ethernet_input+0x118>)
 8011274:	4618      	mov	r0, r3
 8011276:	f000 f8bb 	bl	80113f0 <memcmp>
 801127a:	4603      	mov	r3, r0
 801127c:	2b00      	cmp	r3, #0
 801127e:	d106      	bne.n	801128e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	7b5b      	ldrb	r3, [r3, #13]
 8011284:	f043 0308 	orr.w	r3, r3, #8
 8011288:	b2da      	uxtb	r2, r3
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801128e:	89fb      	ldrh	r3, [r7, #14]
 8011290:	2b08      	cmp	r3, #8
 8011292:	d003      	beq.n	801129c <ethernet_input+0xa0>
 8011294:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011298:	d014      	beq.n	80112c4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801129a:	e032      	b.n	8011302 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80112a2:	f003 0308 	and.w	r3, r3, #8
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d024      	beq.n	80112f4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80112aa:	8afb      	ldrh	r3, [r7, #22]
 80112ac:	4619      	mov	r1, r3
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f7f5 fc42 	bl	8006b38 <pbuf_remove_header>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d11e      	bne.n	80112f8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80112ba:	6839      	ldr	r1, [r7, #0]
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f7fe ff09 	bl	80100d4 <ip4_input>
      break;
 80112c2:	e013      	b.n	80112ec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80112ca:	f003 0308 	and.w	r3, r3, #8
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d014      	beq.n	80112fc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80112d2:	8afb      	ldrh	r3, [r7, #22]
 80112d4:	4619      	mov	r1, r3
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f7f5 fc2e 	bl	8006b38 <pbuf_remove_header>
 80112dc:	4603      	mov	r3, r0
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d10e      	bne.n	8011300 <ethernet_input+0x104>
        etharp_input(p, netif);
 80112e2:	6839      	ldr	r1, [r7, #0]
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f7fe f8a5 	bl	800f434 <etharp_input>
      break;
 80112ea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80112ec:	2300      	movs	r3, #0
 80112ee:	e00c      	b.n	801130a <ethernet_input+0x10e>
    goto free_and_return;
 80112f0:	bf00      	nop
 80112f2:	e006      	b.n	8011302 <ethernet_input+0x106>
        goto free_and_return;
 80112f4:	bf00      	nop
 80112f6:	e004      	b.n	8011302 <ethernet_input+0x106>
        goto free_and_return;
 80112f8:	bf00      	nop
 80112fa:	e002      	b.n	8011302 <ethernet_input+0x106>
        goto free_and_return;
 80112fc:	bf00      	nop
 80112fe:	e000      	b.n	8011302 <ethernet_input+0x106>
        goto free_and_return;
 8011300:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f7f5 fc9e 	bl	8006c44 <pbuf_free>
  return ERR_OK;
 8011308:	2300      	movs	r3, #0
}
 801130a:	4618      	mov	r0, r3
 801130c:	3718      	adds	r7, #24
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	08015330 	.word	0x08015330

08011318 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011318:	b580      	push	{r7, lr}
 801131a:	b086      	sub	sp, #24
 801131c:	af00      	add	r7, sp, #0
 801131e:	60f8      	str	r0, [r7, #12]
 8011320:	60b9      	str	r1, [r7, #8]
 8011322:	607a      	str	r2, [r7, #4]
 8011324:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011326:	8c3b      	ldrh	r3, [r7, #32]
 8011328:	4618      	mov	r0, r3
 801132a:	f7f4 f9cf 	bl	80056cc <lwip_htons>
 801132e:	4603      	mov	r3, r0
 8011330:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011332:	210e      	movs	r1, #14
 8011334:	68b8      	ldr	r0, [r7, #8]
 8011336:	f7f5 fbef 	bl	8006b18 <pbuf_add_header>
 801133a:	4603      	mov	r3, r0
 801133c:	2b00      	cmp	r3, #0
 801133e:	d125      	bne.n	801138c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	8afa      	ldrh	r2, [r7, #22]
 801134a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	2206      	movs	r2, #6
 8011350:	6839      	ldr	r1, [r7, #0]
 8011352:	4618      	mov	r0, r3
 8011354:	f000 f85a 	bl	801140c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	3306      	adds	r3, #6
 801135c:	2206      	movs	r2, #6
 801135e:	6879      	ldr	r1, [r7, #4]
 8011360:	4618      	mov	r0, r3
 8011362:	f000 f853 	bl	801140c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801136c:	2b06      	cmp	r3, #6
 801136e:	d006      	beq.n	801137e <ethernet_output+0x66>
 8011370:	4b0a      	ldr	r3, [pc, #40]	; (801139c <ethernet_output+0x84>)
 8011372:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011376:	490a      	ldr	r1, [pc, #40]	; (80113a0 <ethernet_output+0x88>)
 8011378:	480a      	ldr	r0, [pc, #40]	; (80113a4 <ethernet_output+0x8c>)
 801137a:	f000 f85d 	bl	8011438 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	699b      	ldr	r3, [r3, #24]
 8011382:	68b9      	ldr	r1, [r7, #8]
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	4798      	blx	r3
 8011388:	4603      	mov	r3, r0
 801138a:	e002      	b.n	8011392 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801138c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801138e:	f06f 0301 	mvn.w	r3, #1
}
 8011392:	4618      	mov	r0, r3
 8011394:	3718      	adds	r7, #24
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	0801519c 	.word	0x0801519c
 80113a0:	080151d4 	.word	0x080151d4
 80113a4:	08015208 	.word	0x08015208

080113a8 <__libc_init_array>:
 80113a8:	b570      	push	{r4, r5, r6, lr}
 80113aa:	4d0d      	ldr	r5, [pc, #52]	; (80113e0 <__libc_init_array+0x38>)
 80113ac:	4c0d      	ldr	r4, [pc, #52]	; (80113e4 <__libc_init_array+0x3c>)
 80113ae:	1b64      	subs	r4, r4, r5
 80113b0:	10a4      	asrs	r4, r4, #2
 80113b2:	2600      	movs	r6, #0
 80113b4:	42a6      	cmp	r6, r4
 80113b6:	d109      	bne.n	80113cc <__libc_init_array+0x24>
 80113b8:	4d0b      	ldr	r5, [pc, #44]	; (80113e8 <__libc_init_array+0x40>)
 80113ba:	4c0c      	ldr	r4, [pc, #48]	; (80113ec <__libc_init_array+0x44>)
 80113bc:	f001 f856 	bl	801246c <_init>
 80113c0:	1b64      	subs	r4, r4, r5
 80113c2:	10a4      	asrs	r4, r4, #2
 80113c4:	2600      	movs	r6, #0
 80113c6:	42a6      	cmp	r6, r4
 80113c8:	d105      	bne.n	80113d6 <__libc_init_array+0x2e>
 80113ca:	bd70      	pop	{r4, r5, r6, pc}
 80113cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80113d0:	4798      	blx	r3
 80113d2:	3601      	adds	r6, #1
 80113d4:	e7ee      	b.n	80113b4 <__libc_init_array+0xc>
 80113d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80113da:	4798      	blx	r3
 80113dc:	3601      	adds	r6, #1
 80113de:	e7f2      	b.n	80113c6 <__libc_init_array+0x1e>
 80113e0:	08015494 	.word	0x08015494
 80113e4:	08015494 	.word	0x08015494
 80113e8:	08015494 	.word	0x08015494
 80113ec:	08015498 	.word	0x08015498

080113f0 <memcmp>:
 80113f0:	b530      	push	{r4, r5, lr}
 80113f2:	3901      	subs	r1, #1
 80113f4:	2400      	movs	r4, #0
 80113f6:	42a2      	cmp	r2, r4
 80113f8:	d101      	bne.n	80113fe <memcmp+0xe>
 80113fa:	2000      	movs	r0, #0
 80113fc:	e005      	b.n	801140a <memcmp+0x1a>
 80113fe:	5d03      	ldrb	r3, [r0, r4]
 8011400:	3401      	adds	r4, #1
 8011402:	5d0d      	ldrb	r5, [r1, r4]
 8011404:	42ab      	cmp	r3, r5
 8011406:	d0f6      	beq.n	80113f6 <memcmp+0x6>
 8011408:	1b58      	subs	r0, r3, r5
 801140a:	bd30      	pop	{r4, r5, pc}

0801140c <memcpy>:
 801140c:	440a      	add	r2, r1
 801140e:	4291      	cmp	r1, r2
 8011410:	f100 33ff 	add.w	r3, r0, #4294967295
 8011414:	d100      	bne.n	8011418 <memcpy+0xc>
 8011416:	4770      	bx	lr
 8011418:	b510      	push	{r4, lr}
 801141a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801141e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011422:	4291      	cmp	r1, r2
 8011424:	d1f9      	bne.n	801141a <memcpy+0xe>
 8011426:	bd10      	pop	{r4, pc}

08011428 <memset>:
 8011428:	4402      	add	r2, r0
 801142a:	4603      	mov	r3, r0
 801142c:	4293      	cmp	r3, r2
 801142e:	d100      	bne.n	8011432 <memset+0xa>
 8011430:	4770      	bx	lr
 8011432:	f803 1b01 	strb.w	r1, [r3], #1
 8011436:	e7f9      	b.n	801142c <memset+0x4>

08011438 <iprintf>:
 8011438:	b40f      	push	{r0, r1, r2, r3}
 801143a:	4b0a      	ldr	r3, [pc, #40]	; (8011464 <iprintf+0x2c>)
 801143c:	b513      	push	{r0, r1, r4, lr}
 801143e:	681c      	ldr	r4, [r3, #0]
 8011440:	b124      	cbz	r4, 801144c <iprintf+0x14>
 8011442:	69a3      	ldr	r3, [r4, #24]
 8011444:	b913      	cbnz	r3, 801144c <iprintf+0x14>
 8011446:	4620      	mov	r0, r4
 8011448:	f000 f8c4 	bl	80115d4 <__sinit>
 801144c:	ab05      	add	r3, sp, #20
 801144e:	9a04      	ldr	r2, [sp, #16]
 8011450:	68a1      	ldr	r1, [r4, #8]
 8011452:	9301      	str	r3, [sp, #4]
 8011454:	4620      	mov	r0, r4
 8011456:	f000 fa4b 	bl	80118f0 <_vfiprintf_r>
 801145a:	b002      	add	sp, #8
 801145c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011460:	b004      	add	sp, #16
 8011462:	4770      	bx	lr
 8011464:	20000018 	.word	0x20000018

08011468 <rand>:
 8011468:	4b17      	ldr	r3, [pc, #92]	; (80114c8 <rand+0x60>)
 801146a:	b510      	push	{r4, lr}
 801146c:	681c      	ldr	r4, [r3, #0]
 801146e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011470:	b9b3      	cbnz	r3, 80114a0 <rand+0x38>
 8011472:	2018      	movs	r0, #24
 8011474:	f000 f960 	bl	8011738 <malloc>
 8011478:	63a0      	str	r0, [r4, #56]	; 0x38
 801147a:	b928      	cbnz	r0, 8011488 <rand+0x20>
 801147c:	4602      	mov	r2, r0
 801147e:	4b13      	ldr	r3, [pc, #76]	; (80114cc <rand+0x64>)
 8011480:	4813      	ldr	r0, [pc, #76]	; (80114d0 <rand+0x68>)
 8011482:	214e      	movs	r1, #78	; 0x4e
 8011484:	f000 f830 	bl	80114e8 <__assert_func>
 8011488:	4a12      	ldr	r2, [pc, #72]	; (80114d4 <rand+0x6c>)
 801148a:	4b13      	ldr	r3, [pc, #76]	; (80114d8 <rand+0x70>)
 801148c:	e9c0 2300 	strd	r2, r3, [r0]
 8011490:	4b12      	ldr	r3, [pc, #72]	; (80114dc <rand+0x74>)
 8011492:	6083      	str	r3, [r0, #8]
 8011494:	230b      	movs	r3, #11
 8011496:	8183      	strh	r3, [r0, #12]
 8011498:	2201      	movs	r2, #1
 801149a:	2300      	movs	r3, #0
 801149c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80114a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80114a2:	480f      	ldr	r0, [pc, #60]	; (80114e0 <rand+0x78>)
 80114a4:	690a      	ldr	r2, [r1, #16]
 80114a6:	694b      	ldr	r3, [r1, #20]
 80114a8:	4c0e      	ldr	r4, [pc, #56]	; (80114e4 <rand+0x7c>)
 80114aa:	4350      	muls	r0, r2
 80114ac:	fb04 0003 	mla	r0, r4, r3, r0
 80114b0:	fba2 3404 	umull	r3, r4, r2, r4
 80114b4:	1c5a      	adds	r2, r3, #1
 80114b6:	4404      	add	r4, r0
 80114b8:	f144 0000 	adc.w	r0, r4, #0
 80114bc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80114c0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80114c4:	bd10      	pop	{r4, pc}
 80114c6:	bf00      	nop
 80114c8:	20000018 	.word	0x20000018
 80114cc:	08015344 	.word	0x08015344
 80114d0:	0801535b 	.word	0x0801535b
 80114d4:	abcd330e 	.word	0xabcd330e
 80114d8:	e66d1234 	.word	0xe66d1234
 80114dc:	0005deec 	.word	0x0005deec
 80114e0:	5851f42d 	.word	0x5851f42d
 80114e4:	4c957f2d 	.word	0x4c957f2d

080114e8 <__assert_func>:
 80114e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114ea:	4614      	mov	r4, r2
 80114ec:	461a      	mov	r2, r3
 80114ee:	4b09      	ldr	r3, [pc, #36]	; (8011514 <__assert_func+0x2c>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	4605      	mov	r5, r0
 80114f4:	68d8      	ldr	r0, [r3, #12]
 80114f6:	b14c      	cbz	r4, 801150c <__assert_func+0x24>
 80114f8:	4b07      	ldr	r3, [pc, #28]	; (8011518 <__assert_func+0x30>)
 80114fa:	9100      	str	r1, [sp, #0]
 80114fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011500:	4906      	ldr	r1, [pc, #24]	; (801151c <__assert_func+0x34>)
 8011502:	462b      	mov	r3, r5
 8011504:	f000 f8e4 	bl	80116d0 <fiprintf>
 8011508:	f000 fddc 	bl	80120c4 <abort>
 801150c:	4b04      	ldr	r3, [pc, #16]	; (8011520 <__assert_func+0x38>)
 801150e:	461c      	mov	r4, r3
 8011510:	e7f3      	b.n	80114fa <__assert_func+0x12>
 8011512:	bf00      	nop
 8011514:	20000018 	.word	0x20000018
 8011518:	080153ba 	.word	0x080153ba
 801151c:	080153c7 	.word	0x080153c7
 8011520:	080153f5 	.word	0x080153f5

08011524 <std>:
 8011524:	2300      	movs	r3, #0
 8011526:	b510      	push	{r4, lr}
 8011528:	4604      	mov	r4, r0
 801152a:	e9c0 3300 	strd	r3, r3, [r0]
 801152e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011532:	6083      	str	r3, [r0, #8]
 8011534:	8181      	strh	r1, [r0, #12]
 8011536:	6643      	str	r3, [r0, #100]	; 0x64
 8011538:	81c2      	strh	r2, [r0, #14]
 801153a:	6183      	str	r3, [r0, #24]
 801153c:	4619      	mov	r1, r3
 801153e:	2208      	movs	r2, #8
 8011540:	305c      	adds	r0, #92	; 0x5c
 8011542:	f7ff ff71 	bl	8011428 <memset>
 8011546:	4b05      	ldr	r3, [pc, #20]	; (801155c <std+0x38>)
 8011548:	6263      	str	r3, [r4, #36]	; 0x24
 801154a:	4b05      	ldr	r3, [pc, #20]	; (8011560 <std+0x3c>)
 801154c:	62a3      	str	r3, [r4, #40]	; 0x28
 801154e:	4b05      	ldr	r3, [pc, #20]	; (8011564 <std+0x40>)
 8011550:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011552:	4b05      	ldr	r3, [pc, #20]	; (8011568 <std+0x44>)
 8011554:	6224      	str	r4, [r4, #32]
 8011556:	6323      	str	r3, [r4, #48]	; 0x30
 8011558:	bd10      	pop	{r4, pc}
 801155a:	bf00      	nop
 801155c:	08011e99 	.word	0x08011e99
 8011560:	08011ebb 	.word	0x08011ebb
 8011564:	08011ef3 	.word	0x08011ef3
 8011568:	08011f17 	.word	0x08011f17

0801156c <_cleanup_r>:
 801156c:	4901      	ldr	r1, [pc, #4]	; (8011574 <_cleanup_r+0x8>)
 801156e:	f000 b8c1 	b.w	80116f4 <_fwalk_reent>
 8011572:	bf00      	nop
 8011574:	08012201 	.word	0x08012201

08011578 <__sfmoreglue>:
 8011578:	b570      	push	{r4, r5, r6, lr}
 801157a:	1e4a      	subs	r2, r1, #1
 801157c:	2568      	movs	r5, #104	; 0x68
 801157e:	4355      	muls	r5, r2
 8011580:	460e      	mov	r6, r1
 8011582:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011586:	f000 f92f 	bl	80117e8 <_malloc_r>
 801158a:	4604      	mov	r4, r0
 801158c:	b140      	cbz	r0, 80115a0 <__sfmoreglue+0x28>
 801158e:	2100      	movs	r1, #0
 8011590:	e9c0 1600 	strd	r1, r6, [r0]
 8011594:	300c      	adds	r0, #12
 8011596:	60a0      	str	r0, [r4, #8]
 8011598:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801159c:	f7ff ff44 	bl	8011428 <memset>
 80115a0:	4620      	mov	r0, r4
 80115a2:	bd70      	pop	{r4, r5, r6, pc}

080115a4 <__sfp_lock_acquire>:
 80115a4:	4801      	ldr	r0, [pc, #4]	; (80115ac <__sfp_lock_acquire+0x8>)
 80115a6:	f000 b8c5 	b.w	8011734 <__retarget_lock_acquire_recursive>
 80115aa:	bf00      	nop
 80115ac:	20006e40 	.word	0x20006e40

080115b0 <__sfp_lock_release>:
 80115b0:	4801      	ldr	r0, [pc, #4]	; (80115b8 <__sfp_lock_release+0x8>)
 80115b2:	f000 b8c0 	b.w	8011736 <__retarget_lock_release_recursive>
 80115b6:	bf00      	nop
 80115b8:	20006e40 	.word	0x20006e40

080115bc <__sinit_lock_acquire>:
 80115bc:	4801      	ldr	r0, [pc, #4]	; (80115c4 <__sinit_lock_acquire+0x8>)
 80115be:	f000 b8b9 	b.w	8011734 <__retarget_lock_acquire_recursive>
 80115c2:	bf00      	nop
 80115c4:	20006e3b 	.word	0x20006e3b

080115c8 <__sinit_lock_release>:
 80115c8:	4801      	ldr	r0, [pc, #4]	; (80115d0 <__sinit_lock_release+0x8>)
 80115ca:	f000 b8b4 	b.w	8011736 <__retarget_lock_release_recursive>
 80115ce:	bf00      	nop
 80115d0:	20006e3b 	.word	0x20006e3b

080115d4 <__sinit>:
 80115d4:	b510      	push	{r4, lr}
 80115d6:	4604      	mov	r4, r0
 80115d8:	f7ff fff0 	bl	80115bc <__sinit_lock_acquire>
 80115dc:	69a3      	ldr	r3, [r4, #24]
 80115de:	b11b      	cbz	r3, 80115e8 <__sinit+0x14>
 80115e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115e4:	f7ff bff0 	b.w	80115c8 <__sinit_lock_release>
 80115e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80115ec:	6523      	str	r3, [r4, #80]	; 0x50
 80115ee:	4b13      	ldr	r3, [pc, #76]	; (801163c <__sinit+0x68>)
 80115f0:	4a13      	ldr	r2, [pc, #76]	; (8011640 <__sinit+0x6c>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80115f6:	42a3      	cmp	r3, r4
 80115f8:	bf04      	itt	eq
 80115fa:	2301      	moveq	r3, #1
 80115fc:	61a3      	streq	r3, [r4, #24]
 80115fe:	4620      	mov	r0, r4
 8011600:	f000 f820 	bl	8011644 <__sfp>
 8011604:	6060      	str	r0, [r4, #4]
 8011606:	4620      	mov	r0, r4
 8011608:	f000 f81c 	bl	8011644 <__sfp>
 801160c:	60a0      	str	r0, [r4, #8]
 801160e:	4620      	mov	r0, r4
 8011610:	f000 f818 	bl	8011644 <__sfp>
 8011614:	2200      	movs	r2, #0
 8011616:	60e0      	str	r0, [r4, #12]
 8011618:	2104      	movs	r1, #4
 801161a:	6860      	ldr	r0, [r4, #4]
 801161c:	f7ff ff82 	bl	8011524 <std>
 8011620:	68a0      	ldr	r0, [r4, #8]
 8011622:	2201      	movs	r2, #1
 8011624:	2109      	movs	r1, #9
 8011626:	f7ff ff7d 	bl	8011524 <std>
 801162a:	68e0      	ldr	r0, [r4, #12]
 801162c:	2202      	movs	r2, #2
 801162e:	2112      	movs	r1, #18
 8011630:	f7ff ff78 	bl	8011524 <std>
 8011634:	2301      	movs	r3, #1
 8011636:	61a3      	str	r3, [r4, #24]
 8011638:	e7d2      	b.n	80115e0 <__sinit+0xc>
 801163a:	bf00      	nop
 801163c:	08015340 	.word	0x08015340
 8011640:	0801156d 	.word	0x0801156d

08011644 <__sfp>:
 8011644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011646:	4607      	mov	r7, r0
 8011648:	f7ff ffac 	bl	80115a4 <__sfp_lock_acquire>
 801164c:	4b1e      	ldr	r3, [pc, #120]	; (80116c8 <__sfp+0x84>)
 801164e:	681e      	ldr	r6, [r3, #0]
 8011650:	69b3      	ldr	r3, [r6, #24]
 8011652:	b913      	cbnz	r3, 801165a <__sfp+0x16>
 8011654:	4630      	mov	r0, r6
 8011656:	f7ff ffbd 	bl	80115d4 <__sinit>
 801165a:	3648      	adds	r6, #72	; 0x48
 801165c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011660:	3b01      	subs	r3, #1
 8011662:	d503      	bpl.n	801166c <__sfp+0x28>
 8011664:	6833      	ldr	r3, [r6, #0]
 8011666:	b30b      	cbz	r3, 80116ac <__sfp+0x68>
 8011668:	6836      	ldr	r6, [r6, #0]
 801166a:	e7f7      	b.n	801165c <__sfp+0x18>
 801166c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011670:	b9d5      	cbnz	r5, 80116a8 <__sfp+0x64>
 8011672:	4b16      	ldr	r3, [pc, #88]	; (80116cc <__sfp+0x88>)
 8011674:	60e3      	str	r3, [r4, #12]
 8011676:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801167a:	6665      	str	r5, [r4, #100]	; 0x64
 801167c:	f000 f859 	bl	8011732 <__retarget_lock_init_recursive>
 8011680:	f7ff ff96 	bl	80115b0 <__sfp_lock_release>
 8011684:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011688:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801168c:	6025      	str	r5, [r4, #0]
 801168e:	61a5      	str	r5, [r4, #24]
 8011690:	2208      	movs	r2, #8
 8011692:	4629      	mov	r1, r5
 8011694:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011698:	f7ff fec6 	bl	8011428 <memset>
 801169c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80116a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80116a4:	4620      	mov	r0, r4
 80116a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116a8:	3468      	adds	r4, #104	; 0x68
 80116aa:	e7d9      	b.n	8011660 <__sfp+0x1c>
 80116ac:	2104      	movs	r1, #4
 80116ae:	4638      	mov	r0, r7
 80116b0:	f7ff ff62 	bl	8011578 <__sfmoreglue>
 80116b4:	4604      	mov	r4, r0
 80116b6:	6030      	str	r0, [r6, #0]
 80116b8:	2800      	cmp	r0, #0
 80116ba:	d1d5      	bne.n	8011668 <__sfp+0x24>
 80116bc:	f7ff ff78 	bl	80115b0 <__sfp_lock_release>
 80116c0:	230c      	movs	r3, #12
 80116c2:	603b      	str	r3, [r7, #0]
 80116c4:	e7ee      	b.n	80116a4 <__sfp+0x60>
 80116c6:	bf00      	nop
 80116c8:	08015340 	.word	0x08015340
 80116cc:	ffff0001 	.word	0xffff0001

080116d0 <fiprintf>:
 80116d0:	b40e      	push	{r1, r2, r3}
 80116d2:	b503      	push	{r0, r1, lr}
 80116d4:	4601      	mov	r1, r0
 80116d6:	ab03      	add	r3, sp, #12
 80116d8:	4805      	ldr	r0, [pc, #20]	; (80116f0 <fiprintf+0x20>)
 80116da:	f853 2b04 	ldr.w	r2, [r3], #4
 80116de:	6800      	ldr	r0, [r0, #0]
 80116e0:	9301      	str	r3, [sp, #4]
 80116e2:	f000 f905 	bl	80118f0 <_vfiprintf_r>
 80116e6:	b002      	add	sp, #8
 80116e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80116ec:	b003      	add	sp, #12
 80116ee:	4770      	bx	lr
 80116f0:	20000018 	.word	0x20000018

080116f4 <_fwalk_reent>:
 80116f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116f8:	4606      	mov	r6, r0
 80116fa:	4688      	mov	r8, r1
 80116fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011700:	2700      	movs	r7, #0
 8011702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011706:	f1b9 0901 	subs.w	r9, r9, #1
 801170a:	d505      	bpl.n	8011718 <_fwalk_reent+0x24>
 801170c:	6824      	ldr	r4, [r4, #0]
 801170e:	2c00      	cmp	r4, #0
 8011710:	d1f7      	bne.n	8011702 <_fwalk_reent+0xe>
 8011712:	4638      	mov	r0, r7
 8011714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011718:	89ab      	ldrh	r3, [r5, #12]
 801171a:	2b01      	cmp	r3, #1
 801171c:	d907      	bls.n	801172e <_fwalk_reent+0x3a>
 801171e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011722:	3301      	adds	r3, #1
 8011724:	d003      	beq.n	801172e <_fwalk_reent+0x3a>
 8011726:	4629      	mov	r1, r5
 8011728:	4630      	mov	r0, r6
 801172a:	47c0      	blx	r8
 801172c:	4307      	orrs	r7, r0
 801172e:	3568      	adds	r5, #104	; 0x68
 8011730:	e7e9      	b.n	8011706 <_fwalk_reent+0x12>

08011732 <__retarget_lock_init_recursive>:
 8011732:	4770      	bx	lr

08011734 <__retarget_lock_acquire_recursive>:
 8011734:	4770      	bx	lr

08011736 <__retarget_lock_release_recursive>:
 8011736:	4770      	bx	lr

08011738 <malloc>:
 8011738:	4b02      	ldr	r3, [pc, #8]	; (8011744 <malloc+0xc>)
 801173a:	4601      	mov	r1, r0
 801173c:	6818      	ldr	r0, [r3, #0]
 801173e:	f000 b853 	b.w	80117e8 <_malloc_r>
 8011742:	bf00      	nop
 8011744:	20000018 	.word	0x20000018

08011748 <_free_r>:
 8011748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801174a:	2900      	cmp	r1, #0
 801174c:	d048      	beq.n	80117e0 <_free_r+0x98>
 801174e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011752:	9001      	str	r0, [sp, #4]
 8011754:	2b00      	cmp	r3, #0
 8011756:	f1a1 0404 	sub.w	r4, r1, #4
 801175a:	bfb8      	it	lt
 801175c:	18e4      	addlt	r4, r4, r3
 801175e:	f000 fe01 	bl	8012364 <__malloc_lock>
 8011762:	4a20      	ldr	r2, [pc, #128]	; (80117e4 <_free_r+0x9c>)
 8011764:	9801      	ldr	r0, [sp, #4]
 8011766:	6813      	ldr	r3, [r2, #0]
 8011768:	4615      	mov	r5, r2
 801176a:	b933      	cbnz	r3, 801177a <_free_r+0x32>
 801176c:	6063      	str	r3, [r4, #4]
 801176e:	6014      	str	r4, [r2, #0]
 8011770:	b003      	add	sp, #12
 8011772:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011776:	f000 bdfb 	b.w	8012370 <__malloc_unlock>
 801177a:	42a3      	cmp	r3, r4
 801177c:	d90b      	bls.n	8011796 <_free_r+0x4e>
 801177e:	6821      	ldr	r1, [r4, #0]
 8011780:	1862      	adds	r2, r4, r1
 8011782:	4293      	cmp	r3, r2
 8011784:	bf04      	itt	eq
 8011786:	681a      	ldreq	r2, [r3, #0]
 8011788:	685b      	ldreq	r3, [r3, #4]
 801178a:	6063      	str	r3, [r4, #4]
 801178c:	bf04      	itt	eq
 801178e:	1852      	addeq	r2, r2, r1
 8011790:	6022      	streq	r2, [r4, #0]
 8011792:	602c      	str	r4, [r5, #0]
 8011794:	e7ec      	b.n	8011770 <_free_r+0x28>
 8011796:	461a      	mov	r2, r3
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	b10b      	cbz	r3, 80117a0 <_free_r+0x58>
 801179c:	42a3      	cmp	r3, r4
 801179e:	d9fa      	bls.n	8011796 <_free_r+0x4e>
 80117a0:	6811      	ldr	r1, [r2, #0]
 80117a2:	1855      	adds	r5, r2, r1
 80117a4:	42a5      	cmp	r5, r4
 80117a6:	d10b      	bne.n	80117c0 <_free_r+0x78>
 80117a8:	6824      	ldr	r4, [r4, #0]
 80117aa:	4421      	add	r1, r4
 80117ac:	1854      	adds	r4, r2, r1
 80117ae:	42a3      	cmp	r3, r4
 80117b0:	6011      	str	r1, [r2, #0]
 80117b2:	d1dd      	bne.n	8011770 <_free_r+0x28>
 80117b4:	681c      	ldr	r4, [r3, #0]
 80117b6:	685b      	ldr	r3, [r3, #4]
 80117b8:	6053      	str	r3, [r2, #4]
 80117ba:	4421      	add	r1, r4
 80117bc:	6011      	str	r1, [r2, #0]
 80117be:	e7d7      	b.n	8011770 <_free_r+0x28>
 80117c0:	d902      	bls.n	80117c8 <_free_r+0x80>
 80117c2:	230c      	movs	r3, #12
 80117c4:	6003      	str	r3, [r0, #0]
 80117c6:	e7d3      	b.n	8011770 <_free_r+0x28>
 80117c8:	6825      	ldr	r5, [r4, #0]
 80117ca:	1961      	adds	r1, r4, r5
 80117cc:	428b      	cmp	r3, r1
 80117ce:	bf04      	itt	eq
 80117d0:	6819      	ldreq	r1, [r3, #0]
 80117d2:	685b      	ldreq	r3, [r3, #4]
 80117d4:	6063      	str	r3, [r4, #4]
 80117d6:	bf04      	itt	eq
 80117d8:	1949      	addeq	r1, r1, r5
 80117da:	6021      	streq	r1, [r4, #0]
 80117dc:	6054      	str	r4, [r2, #4]
 80117de:	e7c7      	b.n	8011770 <_free_r+0x28>
 80117e0:	b003      	add	sp, #12
 80117e2:	bd30      	pop	{r4, r5, pc}
 80117e4:	20000218 	.word	0x20000218

080117e8 <_malloc_r>:
 80117e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ea:	1ccd      	adds	r5, r1, #3
 80117ec:	f025 0503 	bic.w	r5, r5, #3
 80117f0:	3508      	adds	r5, #8
 80117f2:	2d0c      	cmp	r5, #12
 80117f4:	bf38      	it	cc
 80117f6:	250c      	movcc	r5, #12
 80117f8:	2d00      	cmp	r5, #0
 80117fa:	4606      	mov	r6, r0
 80117fc:	db01      	blt.n	8011802 <_malloc_r+0x1a>
 80117fe:	42a9      	cmp	r1, r5
 8011800:	d903      	bls.n	801180a <_malloc_r+0x22>
 8011802:	230c      	movs	r3, #12
 8011804:	6033      	str	r3, [r6, #0]
 8011806:	2000      	movs	r0, #0
 8011808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801180a:	f000 fdab 	bl	8012364 <__malloc_lock>
 801180e:	4921      	ldr	r1, [pc, #132]	; (8011894 <_malloc_r+0xac>)
 8011810:	680a      	ldr	r2, [r1, #0]
 8011812:	4614      	mov	r4, r2
 8011814:	b99c      	cbnz	r4, 801183e <_malloc_r+0x56>
 8011816:	4f20      	ldr	r7, [pc, #128]	; (8011898 <_malloc_r+0xb0>)
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	b923      	cbnz	r3, 8011826 <_malloc_r+0x3e>
 801181c:	4621      	mov	r1, r4
 801181e:	4630      	mov	r0, r6
 8011820:	f000 fb2a 	bl	8011e78 <_sbrk_r>
 8011824:	6038      	str	r0, [r7, #0]
 8011826:	4629      	mov	r1, r5
 8011828:	4630      	mov	r0, r6
 801182a:	f000 fb25 	bl	8011e78 <_sbrk_r>
 801182e:	1c43      	adds	r3, r0, #1
 8011830:	d123      	bne.n	801187a <_malloc_r+0x92>
 8011832:	230c      	movs	r3, #12
 8011834:	6033      	str	r3, [r6, #0]
 8011836:	4630      	mov	r0, r6
 8011838:	f000 fd9a 	bl	8012370 <__malloc_unlock>
 801183c:	e7e3      	b.n	8011806 <_malloc_r+0x1e>
 801183e:	6823      	ldr	r3, [r4, #0]
 8011840:	1b5b      	subs	r3, r3, r5
 8011842:	d417      	bmi.n	8011874 <_malloc_r+0x8c>
 8011844:	2b0b      	cmp	r3, #11
 8011846:	d903      	bls.n	8011850 <_malloc_r+0x68>
 8011848:	6023      	str	r3, [r4, #0]
 801184a:	441c      	add	r4, r3
 801184c:	6025      	str	r5, [r4, #0]
 801184e:	e004      	b.n	801185a <_malloc_r+0x72>
 8011850:	6863      	ldr	r3, [r4, #4]
 8011852:	42a2      	cmp	r2, r4
 8011854:	bf0c      	ite	eq
 8011856:	600b      	streq	r3, [r1, #0]
 8011858:	6053      	strne	r3, [r2, #4]
 801185a:	4630      	mov	r0, r6
 801185c:	f000 fd88 	bl	8012370 <__malloc_unlock>
 8011860:	f104 000b 	add.w	r0, r4, #11
 8011864:	1d23      	adds	r3, r4, #4
 8011866:	f020 0007 	bic.w	r0, r0, #7
 801186a:	1ac2      	subs	r2, r0, r3
 801186c:	d0cc      	beq.n	8011808 <_malloc_r+0x20>
 801186e:	1a1b      	subs	r3, r3, r0
 8011870:	50a3      	str	r3, [r4, r2]
 8011872:	e7c9      	b.n	8011808 <_malloc_r+0x20>
 8011874:	4622      	mov	r2, r4
 8011876:	6864      	ldr	r4, [r4, #4]
 8011878:	e7cc      	b.n	8011814 <_malloc_r+0x2c>
 801187a:	1cc4      	adds	r4, r0, #3
 801187c:	f024 0403 	bic.w	r4, r4, #3
 8011880:	42a0      	cmp	r0, r4
 8011882:	d0e3      	beq.n	801184c <_malloc_r+0x64>
 8011884:	1a21      	subs	r1, r4, r0
 8011886:	4630      	mov	r0, r6
 8011888:	f000 faf6 	bl	8011e78 <_sbrk_r>
 801188c:	3001      	adds	r0, #1
 801188e:	d1dd      	bne.n	801184c <_malloc_r+0x64>
 8011890:	e7cf      	b.n	8011832 <_malloc_r+0x4a>
 8011892:	bf00      	nop
 8011894:	20000218 	.word	0x20000218
 8011898:	2000021c 	.word	0x2000021c

0801189c <__sfputc_r>:
 801189c:	6893      	ldr	r3, [r2, #8]
 801189e:	3b01      	subs	r3, #1
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	b410      	push	{r4}
 80118a4:	6093      	str	r3, [r2, #8]
 80118a6:	da08      	bge.n	80118ba <__sfputc_r+0x1e>
 80118a8:	6994      	ldr	r4, [r2, #24]
 80118aa:	42a3      	cmp	r3, r4
 80118ac:	db01      	blt.n	80118b2 <__sfputc_r+0x16>
 80118ae:	290a      	cmp	r1, #10
 80118b0:	d103      	bne.n	80118ba <__sfputc_r+0x1e>
 80118b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118b6:	f000 bb33 	b.w	8011f20 <__swbuf_r>
 80118ba:	6813      	ldr	r3, [r2, #0]
 80118bc:	1c58      	adds	r0, r3, #1
 80118be:	6010      	str	r0, [r2, #0]
 80118c0:	7019      	strb	r1, [r3, #0]
 80118c2:	4608      	mov	r0, r1
 80118c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118c8:	4770      	bx	lr

080118ca <__sfputs_r>:
 80118ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118cc:	4606      	mov	r6, r0
 80118ce:	460f      	mov	r7, r1
 80118d0:	4614      	mov	r4, r2
 80118d2:	18d5      	adds	r5, r2, r3
 80118d4:	42ac      	cmp	r4, r5
 80118d6:	d101      	bne.n	80118dc <__sfputs_r+0x12>
 80118d8:	2000      	movs	r0, #0
 80118da:	e007      	b.n	80118ec <__sfputs_r+0x22>
 80118dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118e0:	463a      	mov	r2, r7
 80118e2:	4630      	mov	r0, r6
 80118e4:	f7ff ffda 	bl	801189c <__sfputc_r>
 80118e8:	1c43      	adds	r3, r0, #1
 80118ea:	d1f3      	bne.n	80118d4 <__sfputs_r+0xa>
 80118ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080118f0 <_vfiprintf_r>:
 80118f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118f4:	460d      	mov	r5, r1
 80118f6:	b09d      	sub	sp, #116	; 0x74
 80118f8:	4614      	mov	r4, r2
 80118fa:	4698      	mov	r8, r3
 80118fc:	4606      	mov	r6, r0
 80118fe:	b118      	cbz	r0, 8011908 <_vfiprintf_r+0x18>
 8011900:	6983      	ldr	r3, [r0, #24]
 8011902:	b90b      	cbnz	r3, 8011908 <_vfiprintf_r+0x18>
 8011904:	f7ff fe66 	bl	80115d4 <__sinit>
 8011908:	4b89      	ldr	r3, [pc, #548]	; (8011b30 <_vfiprintf_r+0x240>)
 801190a:	429d      	cmp	r5, r3
 801190c:	d11b      	bne.n	8011946 <_vfiprintf_r+0x56>
 801190e:	6875      	ldr	r5, [r6, #4]
 8011910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011912:	07d9      	lsls	r1, r3, #31
 8011914:	d405      	bmi.n	8011922 <_vfiprintf_r+0x32>
 8011916:	89ab      	ldrh	r3, [r5, #12]
 8011918:	059a      	lsls	r2, r3, #22
 801191a:	d402      	bmi.n	8011922 <_vfiprintf_r+0x32>
 801191c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801191e:	f7ff ff09 	bl	8011734 <__retarget_lock_acquire_recursive>
 8011922:	89ab      	ldrh	r3, [r5, #12]
 8011924:	071b      	lsls	r3, r3, #28
 8011926:	d501      	bpl.n	801192c <_vfiprintf_r+0x3c>
 8011928:	692b      	ldr	r3, [r5, #16]
 801192a:	b9eb      	cbnz	r3, 8011968 <_vfiprintf_r+0x78>
 801192c:	4629      	mov	r1, r5
 801192e:	4630      	mov	r0, r6
 8011930:	f000 fb5a 	bl	8011fe8 <__swsetup_r>
 8011934:	b1c0      	cbz	r0, 8011968 <_vfiprintf_r+0x78>
 8011936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011938:	07dc      	lsls	r4, r3, #31
 801193a:	d50e      	bpl.n	801195a <_vfiprintf_r+0x6a>
 801193c:	f04f 30ff 	mov.w	r0, #4294967295
 8011940:	b01d      	add	sp, #116	; 0x74
 8011942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011946:	4b7b      	ldr	r3, [pc, #492]	; (8011b34 <_vfiprintf_r+0x244>)
 8011948:	429d      	cmp	r5, r3
 801194a:	d101      	bne.n	8011950 <_vfiprintf_r+0x60>
 801194c:	68b5      	ldr	r5, [r6, #8]
 801194e:	e7df      	b.n	8011910 <_vfiprintf_r+0x20>
 8011950:	4b79      	ldr	r3, [pc, #484]	; (8011b38 <_vfiprintf_r+0x248>)
 8011952:	429d      	cmp	r5, r3
 8011954:	bf08      	it	eq
 8011956:	68f5      	ldreq	r5, [r6, #12]
 8011958:	e7da      	b.n	8011910 <_vfiprintf_r+0x20>
 801195a:	89ab      	ldrh	r3, [r5, #12]
 801195c:	0598      	lsls	r0, r3, #22
 801195e:	d4ed      	bmi.n	801193c <_vfiprintf_r+0x4c>
 8011960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011962:	f7ff fee8 	bl	8011736 <__retarget_lock_release_recursive>
 8011966:	e7e9      	b.n	801193c <_vfiprintf_r+0x4c>
 8011968:	2300      	movs	r3, #0
 801196a:	9309      	str	r3, [sp, #36]	; 0x24
 801196c:	2320      	movs	r3, #32
 801196e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011972:	f8cd 800c 	str.w	r8, [sp, #12]
 8011976:	2330      	movs	r3, #48	; 0x30
 8011978:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011b3c <_vfiprintf_r+0x24c>
 801197c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011980:	f04f 0901 	mov.w	r9, #1
 8011984:	4623      	mov	r3, r4
 8011986:	469a      	mov	sl, r3
 8011988:	f813 2b01 	ldrb.w	r2, [r3], #1
 801198c:	b10a      	cbz	r2, 8011992 <_vfiprintf_r+0xa2>
 801198e:	2a25      	cmp	r2, #37	; 0x25
 8011990:	d1f9      	bne.n	8011986 <_vfiprintf_r+0x96>
 8011992:	ebba 0b04 	subs.w	fp, sl, r4
 8011996:	d00b      	beq.n	80119b0 <_vfiprintf_r+0xc0>
 8011998:	465b      	mov	r3, fp
 801199a:	4622      	mov	r2, r4
 801199c:	4629      	mov	r1, r5
 801199e:	4630      	mov	r0, r6
 80119a0:	f7ff ff93 	bl	80118ca <__sfputs_r>
 80119a4:	3001      	adds	r0, #1
 80119a6:	f000 80aa 	beq.w	8011afe <_vfiprintf_r+0x20e>
 80119aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119ac:	445a      	add	r2, fp
 80119ae:	9209      	str	r2, [sp, #36]	; 0x24
 80119b0:	f89a 3000 	ldrb.w	r3, [sl]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	f000 80a2 	beq.w	8011afe <_vfiprintf_r+0x20e>
 80119ba:	2300      	movs	r3, #0
 80119bc:	f04f 32ff 	mov.w	r2, #4294967295
 80119c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119c4:	f10a 0a01 	add.w	sl, sl, #1
 80119c8:	9304      	str	r3, [sp, #16]
 80119ca:	9307      	str	r3, [sp, #28]
 80119cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80119d0:	931a      	str	r3, [sp, #104]	; 0x68
 80119d2:	4654      	mov	r4, sl
 80119d4:	2205      	movs	r2, #5
 80119d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119da:	4858      	ldr	r0, [pc, #352]	; (8011b3c <_vfiprintf_r+0x24c>)
 80119dc:	f7ee fc38 	bl	8000250 <memchr>
 80119e0:	9a04      	ldr	r2, [sp, #16]
 80119e2:	b9d8      	cbnz	r0, 8011a1c <_vfiprintf_r+0x12c>
 80119e4:	06d1      	lsls	r1, r2, #27
 80119e6:	bf44      	itt	mi
 80119e8:	2320      	movmi	r3, #32
 80119ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119ee:	0713      	lsls	r3, r2, #28
 80119f0:	bf44      	itt	mi
 80119f2:	232b      	movmi	r3, #43	; 0x2b
 80119f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119f8:	f89a 3000 	ldrb.w	r3, [sl]
 80119fc:	2b2a      	cmp	r3, #42	; 0x2a
 80119fe:	d015      	beq.n	8011a2c <_vfiprintf_r+0x13c>
 8011a00:	9a07      	ldr	r2, [sp, #28]
 8011a02:	4654      	mov	r4, sl
 8011a04:	2000      	movs	r0, #0
 8011a06:	f04f 0c0a 	mov.w	ip, #10
 8011a0a:	4621      	mov	r1, r4
 8011a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a10:	3b30      	subs	r3, #48	; 0x30
 8011a12:	2b09      	cmp	r3, #9
 8011a14:	d94e      	bls.n	8011ab4 <_vfiprintf_r+0x1c4>
 8011a16:	b1b0      	cbz	r0, 8011a46 <_vfiprintf_r+0x156>
 8011a18:	9207      	str	r2, [sp, #28]
 8011a1a:	e014      	b.n	8011a46 <_vfiprintf_r+0x156>
 8011a1c:	eba0 0308 	sub.w	r3, r0, r8
 8011a20:	fa09 f303 	lsl.w	r3, r9, r3
 8011a24:	4313      	orrs	r3, r2
 8011a26:	9304      	str	r3, [sp, #16]
 8011a28:	46a2      	mov	sl, r4
 8011a2a:	e7d2      	b.n	80119d2 <_vfiprintf_r+0xe2>
 8011a2c:	9b03      	ldr	r3, [sp, #12]
 8011a2e:	1d19      	adds	r1, r3, #4
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	9103      	str	r1, [sp, #12]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	bfbb      	ittet	lt
 8011a38:	425b      	neglt	r3, r3
 8011a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8011a3e:	9307      	strge	r3, [sp, #28]
 8011a40:	9307      	strlt	r3, [sp, #28]
 8011a42:	bfb8      	it	lt
 8011a44:	9204      	strlt	r2, [sp, #16]
 8011a46:	7823      	ldrb	r3, [r4, #0]
 8011a48:	2b2e      	cmp	r3, #46	; 0x2e
 8011a4a:	d10c      	bne.n	8011a66 <_vfiprintf_r+0x176>
 8011a4c:	7863      	ldrb	r3, [r4, #1]
 8011a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8011a50:	d135      	bne.n	8011abe <_vfiprintf_r+0x1ce>
 8011a52:	9b03      	ldr	r3, [sp, #12]
 8011a54:	1d1a      	adds	r2, r3, #4
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	9203      	str	r2, [sp, #12]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	bfb8      	it	lt
 8011a5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a62:	3402      	adds	r4, #2
 8011a64:	9305      	str	r3, [sp, #20]
 8011a66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011b4c <_vfiprintf_r+0x25c>
 8011a6a:	7821      	ldrb	r1, [r4, #0]
 8011a6c:	2203      	movs	r2, #3
 8011a6e:	4650      	mov	r0, sl
 8011a70:	f7ee fbee 	bl	8000250 <memchr>
 8011a74:	b140      	cbz	r0, 8011a88 <_vfiprintf_r+0x198>
 8011a76:	2340      	movs	r3, #64	; 0x40
 8011a78:	eba0 000a 	sub.w	r0, r0, sl
 8011a7c:	fa03 f000 	lsl.w	r0, r3, r0
 8011a80:	9b04      	ldr	r3, [sp, #16]
 8011a82:	4303      	orrs	r3, r0
 8011a84:	3401      	adds	r4, #1
 8011a86:	9304      	str	r3, [sp, #16]
 8011a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a8c:	482c      	ldr	r0, [pc, #176]	; (8011b40 <_vfiprintf_r+0x250>)
 8011a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a92:	2206      	movs	r2, #6
 8011a94:	f7ee fbdc 	bl	8000250 <memchr>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	d03f      	beq.n	8011b1c <_vfiprintf_r+0x22c>
 8011a9c:	4b29      	ldr	r3, [pc, #164]	; (8011b44 <_vfiprintf_r+0x254>)
 8011a9e:	bb1b      	cbnz	r3, 8011ae8 <_vfiprintf_r+0x1f8>
 8011aa0:	9b03      	ldr	r3, [sp, #12]
 8011aa2:	3307      	adds	r3, #7
 8011aa4:	f023 0307 	bic.w	r3, r3, #7
 8011aa8:	3308      	adds	r3, #8
 8011aaa:	9303      	str	r3, [sp, #12]
 8011aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011aae:	443b      	add	r3, r7
 8011ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8011ab2:	e767      	b.n	8011984 <_vfiprintf_r+0x94>
 8011ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ab8:	460c      	mov	r4, r1
 8011aba:	2001      	movs	r0, #1
 8011abc:	e7a5      	b.n	8011a0a <_vfiprintf_r+0x11a>
 8011abe:	2300      	movs	r3, #0
 8011ac0:	3401      	adds	r4, #1
 8011ac2:	9305      	str	r3, [sp, #20]
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	f04f 0c0a 	mov.w	ip, #10
 8011aca:	4620      	mov	r0, r4
 8011acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ad0:	3a30      	subs	r2, #48	; 0x30
 8011ad2:	2a09      	cmp	r2, #9
 8011ad4:	d903      	bls.n	8011ade <_vfiprintf_r+0x1ee>
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d0c5      	beq.n	8011a66 <_vfiprintf_r+0x176>
 8011ada:	9105      	str	r1, [sp, #20]
 8011adc:	e7c3      	b.n	8011a66 <_vfiprintf_r+0x176>
 8011ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ae2:	4604      	mov	r4, r0
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	e7f0      	b.n	8011aca <_vfiprintf_r+0x1da>
 8011ae8:	ab03      	add	r3, sp, #12
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	462a      	mov	r2, r5
 8011aee:	4b16      	ldr	r3, [pc, #88]	; (8011b48 <_vfiprintf_r+0x258>)
 8011af0:	a904      	add	r1, sp, #16
 8011af2:	4630      	mov	r0, r6
 8011af4:	f3af 8000 	nop.w
 8011af8:	4607      	mov	r7, r0
 8011afa:	1c78      	adds	r0, r7, #1
 8011afc:	d1d6      	bne.n	8011aac <_vfiprintf_r+0x1bc>
 8011afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b00:	07d9      	lsls	r1, r3, #31
 8011b02:	d405      	bmi.n	8011b10 <_vfiprintf_r+0x220>
 8011b04:	89ab      	ldrh	r3, [r5, #12]
 8011b06:	059a      	lsls	r2, r3, #22
 8011b08:	d402      	bmi.n	8011b10 <_vfiprintf_r+0x220>
 8011b0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b0c:	f7ff fe13 	bl	8011736 <__retarget_lock_release_recursive>
 8011b10:	89ab      	ldrh	r3, [r5, #12]
 8011b12:	065b      	lsls	r3, r3, #25
 8011b14:	f53f af12 	bmi.w	801193c <_vfiprintf_r+0x4c>
 8011b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b1a:	e711      	b.n	8011940 <_vfiprintf_r+0x50>
 8011b1c:	ab03      	add	r3, sp, #12
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	462a      	mov	r2, r5
 8011b22:	4b09      	ldr	r3, [pc, #36]	; (8011b48 <_vfiprintf_r+0x258>)
 8011b24:	a904      	add	r1, sp, #16
 8011b26:	4630      	mov	r0, r6
 8011b28:	f000 f880 	bl	8011c2c <_printf_i>
 8011b2c:	e7e4      	b.n	8011af8 <_vfiprintf_r+0x208>
 8011b2e:	bf00      	nop
 8011b30:	08015418 	.word	0x08015418
 8011b34:	08015438 	.word	0x08015438
 8011b38:	080153f8 	.word	0x080153f8
 8011b3c:	08015458 	.word	0x08015458
 8011b40:	08015462 	.word	0x08015462
 8011b44:	00000000 	.word	0x00000000
 8011b48:	080118cb 	.word	0x080118cb
 8011b4c:	0801545e 	.word	0x0801545e

08011b50 <_printf_common>:
 8011b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b54:	4616      	mov	r6, r2
 8011b56:	4699      	mov	r9, r3
 8011b58:	688a      	ldr	r2, [r1, #8]
 8011b5a:	690b      	ldr	r3, [r1, #16]
 8011b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011b60:	4293      	cmp	r3, r2
 8011b62:	bfb8      	it	lt
 8011b64:	4613      	movlt	r3, r2
 8011b66:	6033      	str	r3, [r6, #0]
 8011b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011b6c:	4607      	mov	r7, r0
 8011b6e:	460c      	mov	r4, r1
 8011b70:	b10a      	cbz	r2, 8011b76 <_printf_common+0x26>
 8011b72:	3301      	adds	r3, #1
 8011b74:	6033      	str	r3, [r6, #0]
 8011b76:	6823      	ldr	r3, [r4, #0]
 8011b78:	0699      	lsls	r1, r3, #26
 8011b7a:	bf42      	ittt	mi
 8011b7c:	6833      	ldrmi	r3, [r6, #0]
 8011b7e:	3302      	addmi	r3, #2
 8011b80:	6033      	strmi	r3, [r6, #0]
 8011b82:	6825      	ldr	r5, [r4, #0]
 8011b84:	f015 0506 	ands.w	r5, r5, #6
 8011b88:	d106      	bne.n	8011b98 <_printf_common+0x48>
 8011b8a:	f104 0a19 	add.w	sl, r4, #25
 8011b8e:	68e3      	ldr	r3, [r4, #12]
 8011b90:	6832      	ldr	r2, [r6, #0]
 8011b92:	1a9b      	subs	r3, r3, r2
 8011b94:	42ab      	cmp	r3, r5
 8011b96:	dc26      	bgt.n	8011be6 <_printf_common+0x96>
 8011b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011b9c:	1e13      	subs	r3, r2, #0
 8011b9e:	6822      	ldr	r2, [r4, #0]
 8011ba0:	bf18      	it	ne
 8011ba2:	2301      	movne	r3, #1
 8011ba4:	0692      	lsls	r2, r2, #26
 8011ba6:	d42b      	bmi.n	8011c00 <_printf_common+0xb0>
 8011ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011bac:	4649      	mov	r1, r9
 8011bae:	4638      	mov	r0, r7
 8011bb0:	47c0      	blx	r8
 8011bb2:	3001      	adds	r0, #1
 8011bb4:	d01e      	beq.n	8011bf4 <_printf_common+0xa4>
 8011bb6:	6823      	ldr	r3, [r4, #0]
 8011bb8:	68e5      	ldr	r5, [r4, #12]
 8011bba:	6832      	ldr	r2, [r6, #0]
 8011bbc:	f003 0306 	and.w	r3, r3, #6
 8011bc0:	2b04      	cmp	r3, #4
 8011bc2:	bf08      	it	eq
 8011bc4:	1aad      	subeq	r5, r5, r2
 8011bc6:	68a3      	ldr	r3, [r4, #8]
 8011bc8:	6922      	ldr	r2, [r4, #16]
 8011bca:	bf0c      	ite	eq
 8011bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011bd0:	2500      	movne	r5, #0
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	bfc4      	itt	gt
 8011bd6:	1a9b      	subgt	r3, r3, r2
 8011bd8:	18ed      	addgt	r5, r5, r3
 8011bda:	2600      	movs	r6, #0
 8011bdc:	341a      	adds	r4, #26
 8011bde:	42b5      	cmp	r5, r6
 8011be0:	d11a      	bne.n	8011c18 <_printf_common+0xc8>
 8011be2:	2000      	movs	r0, #0
 8011be4:	e008      	b.n	8011bf8 <_printf_common+0xa8>
 8011be6:	2301      	movs	r3, #1
 8011be8:	4652      	mov	r2, sl
 8011bea:	4649      	mov	r1, r9
 8011bec:	4638      	mov	r0, r7
 8011bee:	47c0      	blx	r8
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	d103      	bne.n	8011bfc <_printf_common+0xac>
 8011bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8011bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bfc:	3501      	adds	r5, #1
 8011bfe:	e7c6      	b.n	8011b8e <_printf_common+0x3e>
 8011c00:	18e1      	adds	r1, r4, r3
 8011c02:	1c5a      	adds	r2, r3, #1
 8011c04:	2030      	movs	r0, #48	; 0x30
 8011c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c0a:	4422      	add	r2, r4
 8011c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c14:	3302      	adds	r3, #2
 8011c16:	e7c7      	b.n	8011ba8 <_printf_common+0x58>
 8011c18:	2301      	movs	r3, #1
 8011c1a:	4622      	mov	r2, r4
 8011c1c:	4649      	mov	r1, r9
 8011c1e:	4638      	mov	r0, r7
 8011c20:	47c0      	blx	r8
 8011c22:	3001      	adds	r0, #1
 8011c24:	d0e6      	beq.n	8011bf4 <_printf_common+0xa4>
 8011c26:	3601      	adds	r6, #1
 8011c28:	e7d9      	b.n	8011bde <_printf_common+0x8e>
	...

08011c2c <_printf_i>:
 8011c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c30:	460c      	mov	r4, r1
 8011c32:	4691      	mov	r9, r2
 8011c34:	7e27      	ldrb	r7, [r4, #24]
 8011c36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011c38:	2f78      	cmp	r7, #120	; 0x78
 8011c3a:	4680      	mov	r8, r0
 8011c3c:	469a      	mov	sl, r3
 8011c3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c42:	d807      	bhi.n	8011c54 <_printf_i+0x28>
 8011c44:	2f62      	cmp	r7, #98	; 0x62
 8011c46:	d80a      	bhi.n	8011c5e <_printf_i+0x32>
 8011c48:	2f00      	cmp	r7, #0
 8011c4a:	f000 80d8 	beq.w	8011dfe <_printf_i+0x1d2>
 8011c4e:	2f58      	cmp	r7, #88	; 0x58
 8011c50:	f000 80a3 	beq.w	8011d9a <_printf_i+0x16e>
 8011c54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011c5c:	e03a      	b.n	8011cd4 <_printf_i+0xa8>
 8011c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011c62:	2b15      	cmp	r3, #21
 8011c64:	d8f6      	bhi.n	8011c54 <_printf_i+0x28>
 8011c66:	a001      	add	r0, pc, #4	; (adr r0, 8011c6c <_printf_i+0x40>)
 8011c68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011c6c:	08011cc5 	.word	0x08011cc5
 8011c70:	08011cd9 	.word	0x08011cd9
 8011c74:	08011c55 	.word	0x08011c55
 8011c78:	08011c55 	.word	0x08011c55
 8011c7c:	08011c55 	.word	0x08011c55
 8011c80:	08011c55 	.word	0x08011c55
 8011c84:	08011cd9 	.word	0x08011cd9
 8011c88:	08011c55 	.word	0x08011c55
 8011c8c:	08011c55 	.word	0x08011c55
 8011c90:	08011c55 	.word	0x08011c55
 8011c94:	08011c55 	.word	0x08011c55
 8011c98:	08011de5 	.word	0x08011de5
 8011c9c:	08011d09 	.word	0x08011d09
 8011ca0:	08011dc7 	.word	0x08011dc7
 8011ca4:	08011c55 	.word	0x08011c55
 8011ca8:	08011c55 	.word	0x08011c55
 8011cac:	08011e07 	.word	0x08011e07
 8011cb0:	08011c55 	.word	0x08011c55
 8011cb4:	08011d09 	.word	0x08011d09
 8011cb8:	08011c55 	.word	0x08011c55
 8011cbc:	08011c55 	.word	0x08011c55
 8011cc0:	08011dcf 	.word	0x08011dcf
 8011cc4:	680b      	ldr	r3, [r1, #0]
 8011cc6:	1d1a      	adds	r2, r3, #4
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	600a      	str	r2, [r1, #0]
 8011ccc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	e0a3      	b.n	8011e20 <_printf_i+0x1f4>
 8011cd8:	6825      	ldr	r5, [r4, #0]
 8011cda:	6808      	ldr	r0, [r1, #0]
 8011cdc:	062e      	lsls	r6, r5, #24
 8011cde:	f100 0304 	add.w	r3, r0, #4
 8011ce2:	d50a      	bpl.n	8011cfa <_printf_i+0xce>
 8011ce4:	6805      	ldr	r5, [r0, #0]
 8011ce6:	600b      	str	r3, [r1, #0]
 8011ce8:	2d00      	cmp	r5, #0
 8011cea:	da03      	bge.n	8011cf4 <_printf_i+0xc8>
 8011cec:	232d      	movs	r3, #45	; 0x2d
 8011cee:	426d      	negs	r5, r5
 8011cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011cf4:	485e      	ldr	r0, [pc, #376]	; (8011e70 <_printf_i+0x244>)
 8011cf6:	230a      	movs	r3, #10
 8011cf8:	e019      	b.n	8011d2e <_printf_i+0x102>
 8011cfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011cfe:	6805      	ldr	r5, [r0, #0]
 8011d00:	600b      	str	r3, [r1, #0]
 8011d02:	bf18      	it	ne
 8011d04:	b22d      	sxthne	r5, r5
 8011d06:	e7ef      	b.n	8011ce8 <_printf_i+0xbc>
 8011d08:	680b      	ldr	r3, [r1, #0]
 8011d0a:	6825      	ldr	r5, [r4, #0]
 8011d0c:	1d18      	adds	r0, r3, #4
 8011d0e:	6008      	str	r0, [r1, #0]
 8011d10:	0628      	lsls	r0, r5, #24
 8011d12:	d501      	bpl.n	8011d18 <_printf_i+0xec>
 8011d14:	681d      	ldr	r5, [r3, #0]
 8011d16:	e002      	b.n	8011d1e <_printf_i+0xf2>
 8011d18:	0669      	lsls	r1, r5, #25
 8011d1a:	d5fb      	bpl.n	8011d14 <_printf_i+0xe8>
 8011d1c:	881d      	ldrh	r5, [r3, #0]
 8011d1e:	4854      	ldr	r0, [pc, #336]	; (8011e70 <_printf_i+0x244>)
 8011d20:	2f6f      	cmp	r7, #111	; 0x6f
 8011d22:	bf0c      	ite	eq
 8011d24:	2308      	moveq	r3, #8
 8011d26:	230a      	movne	r3, #10
 8011d28:	2100      	movs	r1, #0
 8011d2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011d2e:	6866      	ldr	r6, [r4, #4]
 8011d30:	60a6      	str	r6, [r4, #8]
 8011d32:	2e00      	cmp	r6, #0
 8011d34:	bfa2      	ittt	ge
 8011d36:	6821      	ldrge	r1, [r4, #0]
 8011d38:	f021 0104 	bicge.w	r1, r1, #4
 8011d3c:	6021      	strge	r1, [r4, #0]
 8011d3e:	b90d      	cbnz	r5, 8011d44 <_printf_i+0x118>
 8011d40:	2e00      	cmp	r6, #0
 8011d42:	d04d      	beq.n	8011de0 <_printf_i+0x1b4>
 8011d44:	4616      	mov	r6, r2
 8011d46:	fbb5 f1f3 	udiv	r1, r5, r3
 8011d4a:	fb03 5711 	mls	r7, r3, r1, r5
 8011d4e:	5dc7      	ldrb	r7, [r0, r7]
 8011d50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011d54:	462f      	mov	r7, r5
 8011d56:	42bb      	cmp	r3, r7
 8011d58:	460d      	mov	r5, r1
 8011d5a:	d9f4      	bls.n	8011d46 <_printf_i+0x11a>
 8011d5c:	2b08      	cmp	r3, #8
 8011d5e:	d10b      	bne.n	8011d78 <_printf_i+0x14c>
 8011d60:	6823      	ldr	r3, [r4, #0]
 8011d62:	07df      	lsls	r7, r3, #31
 8011d64:	d508      	bpl.n	8011d78 <_printf_i+0x14c>
 8011d66:	6923      	ldr	r3, [r4, #16]
 8011d68:	6861      	ldr	r1, [r4, #4]
 8011d6a:	4299      	cmp	r1, r3
 8011d6c:	bfde      	ittt	le
 8011d6e:	2330      	movle	r3, #48	; 0x30
 8011d70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011d74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011d78:	1b92      	subs	r2, r2, r6
 8011d7a:	6122      	str	r2, [r4, #16]
 8011d7c:	f8cd a000 	str.w	sl, [sp]
 8011d80:	464b      	mov	r3, r9
 8011d82:	aa03      	add	r2, sp, #12
 8011d84:	4621      	mov	r1, r4
 8011d86:	4640      	mov	r0, r8
 8011d88:	f7ff fee2 	bl	8011b50 <_printf_common>
 8011d8c:	3001      	adds	r0, #1
 8011d8e:	d14c      	bne.n	8011e2a <_printf_i+0x1fe>
 8011d90:	f04f 30ff 	mov.w	r0, #4294967295
 8011d94:	b004      	add	sp, #16
 8011d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d9a:	4835      	ldr	r0, [pc, #212]	; (8011e70 <_printf_i+0x244>)
 8011d9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011da0:	6823      	ldr	r3, [r4, #0]
 8011da2:	680e      	ldr	r6, [r1, #0]
 8011da4:	061f      	lsls	r7, r3, #24
 8011da6:	f856 5b04 	ldr.w	r5, [r6], #4
 8011daa:	600e      	str	r6, [r1, #0]
 8011dac:	d514      	bpl.n	8011dd8 <_printf_i+0x1ac>
 8011dae:	07d9      	lsls	r1, r3, #31
 8011db0:	bf44      	itt	mi
 8011db2:	f043 0320 	orrmi.w	r3, r3, #32
 8011db6:	6023      	strmi	r3, [r4, #0]
 8011db8:	b91d      	cbnz	r5, 8011dc2 <_printf_i+0x196>
 8011dba:	6823      	ldr	r3, [r4, #0]
 8011dbc:	f023 0320 	bic.w	r3, r3, #32
 8011dc0:	6023      	str	r3, [r4, #0]
 8011dc2:	2310      	movs	r3, #16
 8011dc4:	e7b0      	b.n	8011d28 <_printf_i+0xfc>
 8011dc6:	6823      	ldr	r3, [r4, #0]
 8011dc8:	f043 0320 	orr.w	r3, r3, #32
 8011dcc:	6023      	str	r3, [r4, #0]
 8011dce:	2378      	movs	r3, #120	; 0x78
 8011dd0:	4828      	ldr	r0, [pc, #160]	; (8011e74 <_printf_i+0x248>)
 8011dd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011dd6:	e7e3      	b.n	8011da0 <_printf_i+0x174>
 8011dd8:	065e      	lsls	r6, r3, #25
 8011dda:	bf48      	it	mi
 8011ddc:	b2ad      	uxthmi	r5, r5
 8011dde:	e7e6      	b.n	8011dae <_printf_i+0x182>
 8011de0:	4616      	mov	r6, r2
 8011de2:	e7bb      	b.n	8011d5c <_printf_i+0x130>
 8011de4:	680b      	ldr	r3, [r1, #0]
 8011de6:	6826      	ldr	r6, [r4, #0]
 8011de8:	6960      	ldr	r0, [r4, #20]
 8011dea:	1d1d      	adds	r5, r3, #4
 8011dec:	600d      	str	r5, [r1, #0]
 8011dee:	0635      	lsls	r5, r6, #24
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	d501      	bpl.n	8011df8 <_printf_i+0x1cc>
 8011df4:	6018      	str	r0, [r3, #0]
 8011df6:	e002      	b.n	8011dfe <_printf_i+0x1d2>
 8011df8:	0671      	lsls	r1, r6, #25
 8011dfa:	d5fb      	bpl.n	8011df4 <_printf_i+0x1c8>
 8011dfc:	8018      	strh	r0, [r3, #0]
 8011dfe:	2300      	movs	r3, #0
 8011e00:	6123      	str	r3, [r4, #16]
 8011e02:	4616      	mov	r6, r2
 8011e04:	e7ba      	b.n	8011d7c <_printf_i+0x150>
 8011e06:	680b      	ldr	r3, [r1, #0]
 8011e08:	1d1a      	adds	r2, r3, #4
 8011e0a:	600a      	str	r2, [r1, #0]
 8011e0c:	681e      	ldr	r6, [r3, #0]
 8011e0e:	6862      	ldr	r2, [r4, #4]
 8011e10:	2100      	movs	r1, #0
 8011e12:	4630      	mov	r0, r6
 8011e14:	f7ee fa1c 	bl	8000250 <memchr>
 8011e18:	b108      	cbz	r0, 8011e1e <_printf_i+0x1f2>
 8011e1a:	1b80      	subs	r0, r0, r6
 8011e1c:	6060      	str	r0, [r4, #4]
 8011e1e:	6863      	ldr	r3, [r4, #4]
 8011e20:	6123      	str	r3, [r4, #16]
 8011e22:	2300      	movs	r3, #0
 8011e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e28:	e7a8      	b.n	8011d7c <_printf_i+0x150>
 8011e2a:	6923      	ldr	r3, [r4, #16]
 8011e2c:	4632      	mov	r2, r6
 8011e2e:	4649      	mov	r1, r9
 8011e30:	4640      	mov	r0, r8
 8011e32:	47d0      	blx	sl
 8011e34:	3001      	adds	r0, #1
 8011e36:	d0ab      	beq.n	8011d90 <_printf_i+0x164>
 8011e38:	6823      	ldr	r3, [r4, #0]
 8011e3a:	079b      	lsls	r3, r3, #30
 8011e3c:	d413      	bmi.n	8011e66 <_printf_i+0x23a>
 8011e3e:	68e0      	ldr	r0, [r4, #12]
 8011e40:	9b03      	ldr	r3, [sp, #12]
 8011e42:	4298      	cmp	r0, r3
 8011e44:	bfb8      	it	lt
 8011e46:	4618      	movlt	r0, r3
 8011e48:	e7a4      	b.n	8011d94 <_printf_i+0x168>
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	4632      	mov	r2, r6
 8011e4e:	4649      	mov	r1, r9
 8011e50:	4640      	mov	r0, r8
 8011e52:	47d0      	blx	sl
 8011e54:	3001      	adds	r0, #1
 8011e56:	d09b      	beq.n	8011d90 <_printf_i+0x164>
 8011e58:	3501      	adds	r5, #1
 8011e5a:	68e3      	ldr	r3, [r4, #12]
 8011e5c:	9903      	ldr	r1, [sp, #12]
 8011e5e:	1a5b      	subs	r3, r3, r1
 8011e60:	42ab      	cmp	r3, r5
 8011e62:	dcf2      	bgt.n	8011e4a <_printf_i+0x21e>
 8011e64:	e7eb      	b.n	8011e3e <_printf_i+0x212>
 8011e66:	2500      	movs	r5, #0
 8011e68:	f104 0619 	add.w	r6, r4, #25
 8011e6c:	e7f5      	b.n	8011e5a <_printf_i+0x22e>
 8011e6e:	bf00      	nop
 8011e70:	08015469 	.word	0x08015469
 8011e74:	0801547a 	.word	0x0801547a

08011e78 <_sbrk_r>:
 8011e78:	b538      	push	{r3, r4, r5, lr}
 8011e7a:	4d06      	ldr	r5, [pc, #24]	; (8011e94 <_sbrk_r+0x1c>)
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	4604      	mov	r4, r0
 8011e80:	4608      	mov	r0, r1
 8011e82:	602b      	str	r3, [r5, #0]
 8011e84:	f7ef f880 	bl	8000f88 <_sbrk>
 8011e88:	1c43      	adds	r3, r0, #1
 8011e8a:	d102      	bne.n	8011e92 <_sbrk_r+0x1a>
 8011e8c:	682b      	ldr	r3, [r5, #0]
 8011e8e:	b103      	cbz	r3, 8011e92 <_sbrk_r+0x1a>
 8011e90:	6023      	str	r3, [r4, #0]
 8011e92:	bd38      	pop	{r3, r4, r5, pc}
 8011e94:	20006e34 	.word	0x20006e34

08011e98 <__sread>:
 8011e98:	b510      	push	{r4, lr}
 8011e9a:	460c      	mov	r4, r1
 8011e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ea0:	f000 fa6c 	bl	801237c <_read_r>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	bfab      	itete	ge
 8011ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8011eac:	181b      	addge	r3, r3, r0
 8011eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011eb2:	bfac      	ite	ge
 8011eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011eb6:	81a3      	strhlt	r3, [r4, #12]
 8011eb8:	bd10      	pop	{r4, pc}

08011eba <__swrite>:
 8011eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ebe:	461f      	mov	r7, r3
 8011ec0:	898b      	ldrh	r3, [r1, #12]
 8011ec2:	05db      	lsls	r3, r3, #23
 8011ec4:	4605      	mov	r5, r0
 8011ec6:	460c      	mov	r4, r1
 8011ec8:	4616      	mov	r6, r2
 8011eca:	d505      	bpl.n	8011ed8 <__swrite+0x1e>
 8011ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ed0:	2302      	movs	r3, #2
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	f000 f9d0 	bl	8012278 <_lseek_r>
 8011ed8:	89a3      	ldrh	r3, [r4, #12]
 8011eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ee2:	81a3      	strh	r3, [r4, #12]
 8011ee4:	4632      	mov	r2, r6
 8011ee6:	463b      	mov	r3, r7
 8011ee8:	4628      	mov	r0, r5
 8011eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011eee:	f000 b869 	b.w	8011fc4 <_write_r>

08011ef2 <__sseek>:
 8011ef2:	b510      	push	{r4, lr}
 8011ef4:	460c      	mov	r4, r1
 8011ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011efa:	f000 f9bd 	bl	8012278 <_lseek_r>
 8011efe:	1c43      	adds	r3, r0, #1
 8011f00:	89a3      	ldrh	r3, [r4, #12]
 8011f02:	bf15      	itete	ne
 8011f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f0e:	81a3      	strheq	r3, [r4, #12]
 8011f10:	bf18      	it	ne
 8011f12:	81a3      	strhne	r3, [r4, #12]
 8011f14:	bd10      	pop	{r4, pc}

08011f16 <__sclose>:
 8011f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f1a:	f000 b8db 	b.w	80120d4 <_close_r>
	...

08011f20 <__swbuf_r>:
 8011f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f22:	460e      	mov	r6, r1
 8011f24:	4614      	mov	r4, r2
 8011f26:	4605      	mov	r5, r0
 8011f28:	b118      	cbz	r0, 8011f32 <__swbuf_r+0x12>
 8011f2a:	6983      	ldr	r3, [r0, #24]
 8011f2c:	b90b      	cbnz	r3, 8011f32 <__swbuf_r+0x12>
 8011f2e:	f7ff fb51 	bl	80115d4 <__sinit>
 8011f32:	4b21      	ldr	r3, [pc, #132]	; (8011fb8 <__swbuf_r+0x98>)
 8011f34:	429c      	cmp	r4, r3
 8011f36:	d12b      	bne.n	8011f90 <__swbuf_r+0x70>
 8011f38:	686c      	ldr	r4, [r5, #4]
 8011f3a:	69a3      	ldr	r3, [r4, #24]
 8011f3c:	60a3      	str	r3, [r4, #8]
 8011f3e:	89a3      	ldrh	r3, [r4, #12]
 8011f40:	071a      	lsls	r2, r3, #28
 8011f42:	d52f      	bpl.n	8011fa4 <__swbuf_r+0x84>
 8011f44:	6923      	ldr	r3, [r4, #16]
 8011f46:	b36b      	cbz	r3, 8011fa4 <__swbuf_r+0x84>
 8011f48:	6923      	ldr	r3, [r4, #16]
 8011f4a:	6820      	ldr	r0, [r4, #0]
 8011f4c:	1ac0      	subs	r0, r0, r3
 8011f4e:	6963      	ldr	r3, [r4, #20]
 8011f50:	b2f6      	uxtb	r6, r6
 8011f52:	4283      	cmp	r3, r0
 8011f54:	4637      	mov	r7, r6
 8011f56:	dc04      	bgt.n	8011f62 <__swbuf_r+0x42>
 8011f58:	4621      	mov	r1, r4
 8011f5a:	4628      	mov	r0, r5
 8011f5c:	f000 f950 	bl	8012200 <_fflush_r>
 8011f60:	bb30      	cbnz	r0, 8011fb0 <__swbuf_r+0x90>
 8011f62:	68a3      	ldr	r3, [r4, #8]
 8011f64:	3b01      	subs	r3, #1
 8011f66:	60a3      	str	r3, [r4, #8]
 8011f68:	6823      	ldr	r3, [r4, #0]
 8011f6a:	1c5a      	adds	r2, r3, #1
 8011f6c:	6022      	str	r2, [r4, #0]
 8011f6e:	701e      	strb	r6, [r3, #0]
 8011f70:	6963      	ldr	r3, [r4, #20]
 8011f72:	3001      	adds	r0, #1
 8011f74:	4283      	cmp	r3, r0
 8011f76:	d004      	beq.n	8011f82 <__swbuf_r+0x62>
 8011f78:	89a3      	ldrh	r3, [r4, #12]
 8011f7a:	07db      	lsls	r3, r3, #31
 8011f7c:	d506      	bpl.n	8011f8c <__swbuf_r+0x6c>
 8011f7e:	2e0a      	cmp	r6, #10
 8011f80:	d104      	bne.n	8011f8c <__swbuf_r+0x6c>
 8011f82:	4621      	mov	r1, r4
 8011f84:	4628      	mov	r0, r5
 8011f86:	f000 f93b 	bl	8012200 <_fflush_r>
 8011f8a:	b988      	cbnz	r0, 8011fb0 <__swbuf_r+0x90>
 8011f8c:	4638      	mov	r0, r7
 8011f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f90:	4b0a      	ldr	r3, [pc, #40]	; (8011fbc <__swbuf_r+0x9c>)
 8011f92:	429c      	cmp	r4, r3
 8011f94:	d101      	bne.n	8011f9a <__swbuf_r+0x7a>
 8011f96:	68ac      	ldr	r4, [r5, #8]
 8011f98:	e7cf      	b.n	8011f3a <__swbuf_r+0x1a>
 8011f9a:	4b09      	ldr	r3, [pc, #36]	; (8011fc0 <__swbuf_r+0xa0>)
 8011f9c:	429c      	cmp	r4, r3
 8011f9e:	bf08      	it	eq
 8011fa0:	68ec      	ldreq	r4, [r5, #12]
 8011fa2:	e7ca      	b.n	8011f3a <__swbuf_r+0x1a>
 8011fa4:	4621      	mov	r1, r4
 8011fa6:	4628      	mov	r0, r5
 8011fa8:	f000 f81e 	bl	8011fe8 <__swsetup_r>
 8011fac:	2800      	cmp	r0, #0
 8011fae:	d0cb      	beq.n	8011f48 <__swbuf_r+0x28>
 8011fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8011fb4:	e7ea      	b.n	8011f8c <__swbuf_r+0x6c>
 8011fb6:	bf00      	nop
 8011fb8:	08015418 	.word	0x08015418
 8011fbc:	08015438 	.word	0x08015438
 8011fc0:	080153f8 	.word	0x080153f8

08011fc4 <_write_r>:
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	4d07      	ldr	r5, [pc, #28]	; (8011fe4 <_write_r+0x20>)
 8011fc8:	4604      	mov	r4, r0
 8011fca:	4608      	mov	r0, r1
 8011fcc:	4611      	mov	r1, r2
 8011fce:	2200      	movs	r2, #0
 8011fd0:	602a      	str	r2, [r5, #0]
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	f7ee ff87 	bl	8000ee6 <_write>
 8011fd8:	1c43      	adds	r3, r0, #1
 8011fda:	d102      	bne.n	8011fe2 <_write_r+0x1e>
 8011fdc:	682b      	ldr	r3, [r5, #0]
 8011fde:	b103      	cbz	r3, 8011fe2 <_write_r+0x1e>
 8011fe0:	6023      	str	r3, [r4, #0]
 8011fe2:	bd38      	pop	{r3, r4, r5, pc}
 8011fe4:	20006e34 	.word	0x20006e34

08011fe8 <__swsetup_r>:
 8011fe8:	4b32      	ldr	r3, [pc, #200]	; (80120b4 <__swsetup_r+0xcc>)
 8011fea:	b570      	push	{r4, r5, r6, lr}
 8011fec:	681d      	ldr	r5, [r3, #0]
 8011fee:	4606      	mov	r6, r0
 8011ff0:	460c      	mov	r4, r1
 8011ff2:	b125      	cbz	r5, 8011ffe <__swsetup_r+0x16>
 8011ff4:	69ab      	ldr	r3, [r5, #24]
 8011ff6:	b913      	cbnz	r3, 8011ffe <__swsetup_r+0x16>
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	f7ff faeb 	bl	80115d4 <__sinit>
 8011ffe:	4b2e      	ldr	r3, [pc, #184]	; (80120b8 <__swsetup_r+0xd0>)
 8012000:	429c      	cmp	r4, r3
 8012002:	d10f      	bne.n	8012024 <__swsetup_r+0x3c>
 8012004:	686c      	ldr	r4, [r5, #4]
 8012006:	89a3      	ldrh	r3, [r4, #12]
 8012008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801200c:	0719      	lsls	r1, r3, #28
 801200e:	d42c      	bmi.n	801206a <__swsetup_r+0x82>
 8012010:	06dd      	lsls	r5, r3, #27
 8012012:	d411      	bmi.n	8012038 <__swsetup_r+0x50>
 8012014:	2309      	movs	r3, #9
 8012016:	6033      	str	r3, [r6, #0]
 8012018:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801201c:	81a3      	strh	r3, [r4, #12]
 801201e:	f04f 30ff 	mov.w	r0, #4294967295
 8012022:	e03e      	b.n	80120a2 <__swsetup_r+0xba>
 8012024:	4b25      	ldr	r3, [pc, #148]	; (80120bc <__swsetup_r+0xd4>)
 8012026:	429c      	cmp	r4, r3
 8012028:	d101      	bne.n	801202e <__swsetup_r+0x46>
 801202a:	68ac      	ldr	r4, [r5, #8]
 801202c:	e7eb      	b.n	8012006 <__swsetup_r+0x1e>
 801202e:	4b24      	ldr	r3, [pc, #144]	; (80120c0 <__swsetup_r+0xd8>)
 8012030:	429c      	cmp	r4, r3
 8012032:	bf08      	it	eq
 8012034:	68ec      	ldreq	r4, [r5, #12]
 8012036:	e7e6      	b.n	8012006 <__swsetup_r+0x1e>
 8012038:	0758      	lsls	r0, r3, #29
 801203a:	d512      	bpl.n	8012062 <__swsetup_r+0x7a>
 801203c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801203e:	b141      	cbz	r1, 8012052 <__swsetup_r+0x6a>
 8012040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012044:	4299      	cmp	r1, r3
 8012046:	d002      	beq.n	801204e <__swsetup_r+0x66>
 8012048:	4630      	mov	r0, r6
 801204a:	f7ff fb7d 	bl	8011748 <_free_r>
 801204e:	2300      	movs	r3, #0
 8012050:	6363      	str	r3, [r4, #52]	; 0x34
 8012052:	89a3      	ldrh	r3, [r4, #12]
 8012054:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012058:	81a3      	strh	r3, [r4, #12]
 801205a:	2300      	movs	r3, #0
 801205c:	6063      	str	r3, [r4, #4]
 801205e:	6923      	ldr	r3, [r4, #16]
 8012060:	6023      	str	r3, [r4, #0]
 8012062:	89a3      	ldrh	r3, [r4, #12]
 8012064:	f043 0308 	orr.w	r3, r3, #8
 8012068:	81a3      	strh	r3, [r4, #12]
 801206a:	6923      	ldr	r3, [r4, #16]
 801206c:	b94b      	cbnz	r3, 8012082 <__swsetup_r+0x9a>
 801206e:	89a3      	ldrh	r3, [r4, #12]
 8012070:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012078:	d003      	beq.n	8012082 <__swsetup_r+0x9a>
 801207a:	4621      	mov	r1, r4
 801207c:	4630      	mov	r0, r6
 801207e:	f000 f931 	bl	80122e4 <__smakebuf_r>
 8012082:	89a0      	ldrh	r0, [r4, #12]
 8012084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012088:	f010 0301 	ands.w	r3, r0, #1
 801208c:	d00a      	beq.n	80120a4 <__swsetup_r+0xbc>
 801208e:	2300      	movs	r3, #0
 8012090:	60a3      	str	r3, [r4, #8]
 8012092:	6963      	ldr	r3, [r4, #20]
 8012094:	425b      	negs	r3, r3
 8012096:	61a3      	str	r3, [r4, #24]
 8012098:	6923      	ldr	r3, [r4, #16]
 801209a:	b943      	cbnz	r3, 80120ae <__swsetup_r+0xc6>
 801209c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80120a0:	d1ba      	bne.n	8012018 <__swsetup_r+0x30>
 80120a2:	bd70      	pop	{r4, r5, r6, pc}
 80120a4:	0781      	lsls	r1, r0, #30
 80120a6:	bf58      	it	pl
 80120a8:	6963      	ldrpl	r3, [r4, #20]
 80120aa:	60a3      	str	r3, [r4, #8]
 80120ac:	e7f4      	b.n	8012098 <__swsetup_r+0xb0>
 80120ae:	2000      	movs	r0, #0
 80120b0:	e7f7      	b.n	80120a2 <__swsetup_r+0xba>
 80120b2:	bf00      	nop
 80120b4:	20000018 	.word	0x20000018
 80120b8:	08015418 	.word	0x08015418
 80120bc:	08015438 	.word	0x08015438
 80120c0:	080153f8 	.word	0x080153f8

080120c4 <abort>:
 80120c4:	b508      	push	{r3, lr}
 80120c6:	2006      	movs	r0, #6
 80120c8:	f000 f992 	bl	80123f0 <raise>
 80120cc:	2001      	movs	r0, #1
 80120ce:	f7ee fee3 	bl	8000e98 <_exit>
	...

080120d4 <_close_r>:
 80120d4:	b538      	push	{r3, r4, r5, lr}
 80120d6:	4d06      	ldr	r5, [pc, #24]	; (80120f0 <_close_r+0x1c>)
 80120d8:	2300      	movs	r3, #0
 80120da:	4604      	mov	r4, r0
 80120dc:	4608      	mov	r0, r1
 80120de:	602b      	str	r3, [r5, #0]
 80120e0:	f7ee ff1d 	bl	8000f1e <_close>
 80120e4:	1c43      	adds	r3, r0, #1
 80120e6:	d102      	bne.n	80120ee <_close_r+0x1a>
 80120e8:	682b      	ldr	r3, [r5, #0]
 80120ea:	b103      	cbz	r3, 80120ee <_close_r+0x1a>
 80120ec:	6023      	str	r3, [r4, #0]
 80120ee:	bd38      	pop	{r3, r4, r5, pc}
 80120f0:	20006e34 	.word	0x20006e34

080120f4 <__sflush_r>:
 80120f4:	898a      	ldrh	r2, [r1, #12]
 80120f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120fa:	4605      	mov	r5, r0
 80120fc:	0710      	lsls	r0, r2, #28
 80120fe:	460c      	mov	r4, r1
 8012100:	d458      	bmi.n	80121b4 <__sflush_r+0xc0>
 8012102:	684b      	ldr	r3, [r1, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	dc05      	bgt.n	8012114 <__sflush_r+0x20>
 8012108:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801210a:	2b00      	cmp	r3, #0
 801210c:	dc02      	bgt.n	8012114 <__sflush_r+0x20>
 801210e:	2000      	movs	r0, #0
 8012110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012116:	2e00      	cmp	r6, #0
 8012118:	d0f9      	beq.n	801210e <__sflush_r+0x1a>
 801211a:	2300      	movs	r3, #0
 801211c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012120:	682f      	ldr	r7, [r5, #0]
 8012122:	602b      	str	r3, [r5, #0]
 8012124:	d032      	beq.n	801218c <__sflush_r+0x98>
 8012126:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012128:	89a3      	ldrh	r3, [r4, #12]
 801212a:	075a      	lsls	r2, r3, #29
 801212c:	d505      	bpl.n	801213a <__sflush_r+0x46>
 801212e:	6863      	ldr	r3, [r4, #4]
 8012130:	1ac0      	subs	r0, r0, r3
 8012132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012134:	b10b      	cbz	r3, 801213a <__sflush_r+0x46>
 8012136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012138:	1ac0      	subs	r0, r0, r3
 801213a:	2300      	movs	r3, #0
 801213c:	4602      	mov	r2, r0
 801213e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012140:	6a21      	ldr	r1, [r4, #32]
 8012142:	4628      	mov	r0, r5
 8012144:	47b0      	blx	r6
 8012146:	1c43      	adds	r3, r0, #1
 8012148:	89a3      	ldrh	r3, [r4, #12]
 801214a:	d106      	bne.n	801215a <__sflush_r+0x66>
 801214c:	6829      	ldr	r1, [r5, #0]
 801214e:	291d      	cmp	r1, #29
 8012150:	d82c      	bhi.n	80121ac <__sflush_r+0xb8>
 8012152:	4a2a      	ldr	r2, [pc, #168]	; (80121fc <__sflush_r+0x108>)
 8012154:	40ca      	lsrs	r2, r1
 8012156:	07d6      	lsls	r6, r2, #31
 8012158:	d528      	bpl.n	80121ac <__sflush_r+0xb8>
 801215a:	2200      	movs	r2, #0
 801215c:	6062      	str	r2, [r4, #4]
 801215e:	04d9      	lsls	r1, r3, #19
 8012160:	6922      	ldr	r2, [r4, #16]
 8012162:	6022      	str	r2, [r4, #0]
 8012164:	d504      	bpl.n	8012170 <__sflush_r+0x7c>
 8012166:	1c42      	adds	r2, r0, #1
 8012168:	d101      	bne.n	801216e <__sflush_r+0x7a>
 801216a:	682b      	ldr	r3, [r5, #0]
 801216c:	b903      	cbnz	r3, 8012170 <__sflush_r+0x7c>
 801216e:	6560      	str	r0, [r4, #84]	; 0x54
 8012170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012172:	602f      	str	r7, [r5, #0]
 8012174:	2900      	cmp	r1, #0
 8012176:	d0ca      	beq.n	801210e <__sflush_r+0x1a>
 8012178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801217c:	4299      	cmp	r1, r3
 801217e:	d002      	beq.n	8012186 <__sflush_r+0x92>
 8012180:	4628      	mov	r0, r5
 8012182:	f7ff fae1 	bl	8011748 <_free_r>
 8012186:	2000      	movs	r0, #0
 8012188:	6360      	str	r0, [r4, #52]	; 0x34
 801218a:	e7c1      	b.n	8012110 <__sflush_r+0x1c>
 801218c:	6a21      	ldr	r1, [r4, #32]
 801218e:	2301      	movs	r3, #1
 8012190:	4628      	mov	r0, r5
 8012192:	47b0      	blx	r6
 8012194:	1c41      	adds	r1, r0, #1
 8012196:	d1c7      	bne.n	8012128 <__sflush_r+0x34>
 8012198:	682b      	ldr	r3, [r5, #0]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d0c4      	beq.n	8012128 <__sflush_r+0x34>
 801219e:	2b1d      	cmp	r3, #29
 80121a0:	d001      	beq.n	80121a6 <__sflush_r+0xb2>
 80121a2:	2b16      	cmp	r3, #22
 80121a4:	d101      	bne.n	80121aa <__sflush_r+0xb6>
 80121a6:	602f      	str	r7, [r5, #0]
 80121a8:	e7b1      	b.n	801210e <__sflush_r+0x1a>
 80121aa:	89a3      	ldrh	r3, [r4, #12]
 80121ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121b0:	81a3      	strh	r3, [r4, #12]
 80121b2:	e7ad      	b.n	8012110 <__sflush_r+0x1c>
 80121b4:	690f      	ldr	r7, [r1, #16]
 80121b6:	2f00      	cmp	r7, #0
 80121b8:	d0a9      	beq.n	801210e <__sflush_r+0x1a>
 80121ba:	0793      	lsls	r3, r2, #30
 80121bc:	680e      	ldr	r6, [r1, #0]
 80121be:	bf08      	it	eq
 80121c0:	694b      	ldreq	r3, [r1, #20]
 80121c2:	600f      	str	r7, [r1, #0]
 80121c4:	bf18      	it	ne
 80121c6:	2300      	movne	r3, #0
 80121c8:	eba6 0807 	sub.w	r8, r6, r7
 80121cc:	608b      	str	r3, [r1, #8]
 80121ce:	f1b8 0f00 	cmp.w	r8, #0
 80121d2:	dd9c      	ble.n	801210e <__sflush_r+0x1a>
 80121d4:	6a21      	ldr	r1, [r4, #32]
 80121d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80121d8:	4643      	mov	r3, r8
 80121da:	463a      	mov	r2, r7
 80121dc:	4628      	mov	r0, r5
 80121de:	47b0      	blx	r6
 80121e0:	2800      	cmp	r0, #0
 80121e2:	dc06      	bgt.n	80121f2 <__sflush_r+0xfe>
 80121e4:	89a3      	ldrh	r3, [r4, #12]
 80121e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121ea:	81a3      	strh	r3, [r4, #12]
 80121ec:	f04f 30ff 	mov.w	r0, #4294967295
 80121f0:	e78e      	b.n	8012110 <__sflush_r+0x1c>
 80121f2:	4407      	add	r7, r0
 80121f4:	eba8 0800 	sub.w	r8, r8, r0
 80121f8:	e7e9      	b.n	80121ce <__sflush_r+0xda>
 80121fa:	bf00      	nop
 80121fc:	20400001 	.word	0x20400001

08012200 <_fflush_r>:
 8012200:	b538      	push	{r3, r4, r5, lr}
 8012202:	690b      	ldr	r3, [r1, #16]
 8012204:	4605      	mov	r5, r0
 8012206:	460c      	mov	r4, r1
 8012208:	b913      	cbnz	r3, 8012210 <_fflush_r+0x10>
 801220a:	2500      	movs	r5, #0
 801220c:	4628      	mov	r0, r5
 801220e:	bd38      	pop	{r3, r4, r5, pc}
 8012210:	b118      	cbz	r0, 801221a <_fflush_r+0x1a>
 8012212:	6983      	ldr	r3, [r0, #24]
 8012214:	b90b      	cbnz	r3, 801221a <_fflush_r+0x1a>
 8012216:	f7ff f9dd 	bl	80115d4 <__sinit>
 801221a:	4b14      	ldr	r3, [pc, #80]	; (801226c <_fflush_r+0x6c>)
 801221c:	429c      	cmp	r4, r3
 801221e:	d11b      	bne.n	8012258 <_fflush_r+0x58>
 8012220:	686c      	ldr	r4, [r5, #4]
 8012222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d0ef      	beq.n	801220a <_fflush_r+0xa>
 801222a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801222c:	07d0      	lsls	r0, r2, #31
 801222e:	d404      	bmi.n	801223a <_fflush_r+0x3a>
 8012230:	0599      	lsls	r1, r3, #22
 8012232:	d402      	bmi.n	801223a <_fflush_r+0x3a>
 8012234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012236:	f7ff fa7d 	bl	8011734 <__retarget_lock_acquire_recursive>
 801223a:	4628      	mov	r0, r5
 801223c:	4621      	mov	r1, r4
 801223e:	f7ff ff59 	bl	80120f4 <__sflush_r>
 8012242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012244:	07da      	lsls	r2, r3, #31
 8012246:	4605      	mov	r5, r0
 8012248:	d4e0      	bmi.n	801220c <_fflush_r+0xc>
 801224a:	89a3      	ldrh	r3, [r4, #12]
 801224c:	059b      	lsls	r3, r3, #22
 801224e:	d4dd      	bmi.n	801220c <_fflush_r+0xc>
 8012250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012252:	f7ff fa70 	bl	8011736 <__retarget_lock_release_recursive>
 8012256:	e7d9      	b.n	801220c <_fflush_r+0xc>
 8012258:	4b05      	ldr	r3, [pc, #20]	; (8012270 <_fflush_r+0x70>)
 801225a:	429c      	cmp	r4, r3
 801225c:	d101      	bne.n	8012262 <_fflush_r+0x62>
 801225e:	68ac      	ldr	r4, [r5, #8]
 8012260:	e7df      	b.n	8012222 <_fflush_r+0x22>
 8012262:	4b04      	ldr	r3, [pc, #16]	; (8012274 <_fflush_r+0x74>)
 8012264:	429c      	cmp	r4, r3
 8012266:	bf08      	it	eq
 8012268:	68ec      	ldreq	r4, [r5, #12]
 801226a:	e7da      	b.n	8012222 <_fflush_r+0x22>
 801226c:	08015418 	.word	0x08015418
 8012270:	08015438 	.word	0x08015438
 8012274:	080153f8 	.word	0x080153f8

08012278 <_lseek_r>:
 8012278:	b538      	push	{r3, r4, r5, lr}
 801227a:	4d07      	ldr	r5, [pc, #28]	; (8012298 <_lseek_r+0x20>)
 801227c:	4604      	mov	r4, r0
 801227e:	4608      	mov	r0, r1
 8012280:	4611      	mov	r1, r2
 8012282:	2200      	movs	r2, #0
 8012284:	602a      	str	r2, [r5, #0]
 8012286:	461a      	mov	r2, r3
 8012288:	f7ee fe70 	bl	8000f6c <_lseek>
 801228c:	1c43      	adds	r3, r0, #1
 801228e:	d102      	bne.n	8012296 <_lseek_r+0x1e>
 8012290:	682b      	ldr	r3, [r5, #0]
 8012292:	b103      	cbz	r3, 8012296 <_lseek_r+0x1e>
 8012294:	6023      	str	r3, [r4, #0]
 8012296:	bd38      	pop	{r3, r4, r5, pc}
 8012298:	20006e34 	.word	0x20006e34

0801229c <__swhatbuf_r>:
 801229c:	b570      	push	{r4, r5, r6, lr}
 801229e:	460e      	mov	r6, r1
 80122a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122a4:	2900      	cmp	r1, #0
 80122a6:	b096      	sub	sp, #88	; 0x58
 80122a8:	4614      	mov	r4, r2
 80122aa:	461d      	mov	r5, r3
 80122ac:	da07      	bge.n	80122be <__swhatbuf_r+0x22>
 80122ae:	2300      	movs	r3, #0
 80122b0:	602b      	str	r3, [r5, #0]
 80122b2:	89b3      	ldrh	r3, [r6, #12]
 80122b4:	061a      	lsls	r2, r3, #24
 80122b6:	d410      	bmi.n	80122da <__swhatbuf_r+0x3e>
 80122b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122bc:	e00e      	b.n	80122dc <__swhatbuf_r+0x40>
 80122be:	466a      	mov	r2, sp
 80122c0:	f000 f8b2 	bl	8012428 <_fstat_r>
 80122c4:	2800      	cmp	r0, #0
 80122c6:	dbf2      	blt.n	80122ae <__swhatbuf_r+0x12>
 80122c8:	9a01      	ldr	r2, [sp, #4]
 80122ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80122ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80122d2:	425a      	negs	r2, r3
 80122d4:	415a      	adcs	r2, r3
 80122d6:	602a      	str	r2, [r5, #0]
 80122d8:	e7ee      	b.n	80122b8 <__swhatbuf_r+0x1c>
 80122da:	2340      	movs	r3, #64	; 0x40
 80122dc:	2000      	movs	r0, #0
 80122de:	6023      	str	r3, [r4, #0]
 80122e0:	b016      	add	sp, #88	; 0x58
 80122e2:	bd70      	pop	{r4, r5, r6, pc}

080122e4 <__smakebuf_r>:
 80122e4:	898b      	ldrh	r3, [r1, #12]
 80122e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122e8:	079d      	lsls	r5, r3, #30
 80122ea:	4606      	mov	r6, r0
 80122ec:	460c      	mov	r4, r1
 80122ee:	d507      	bpl.n	8012300 <__smakebuf_r+0x1c>
 80122f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80122f4:	6023      	str	r3, [r4, #0]
 80122f6:	6123      	str	r3, [r4, #16]
 80122f8:	2301      	movs	r3, #1
 80122fa:	6163      	str	r3, [r4, #20]
 80122fc:	b002      	add	sp, #8
 80122fe:	bd70      	pop	{r4, r5, r6, pc}
 8012300:	ab01      	add	r3, sp, #4
 8012302:	466a      	mov	r2, sp
 8012304:	f7ff ffca 	bl	801229c <__swhatbuf_r>
 8012308:	9900      	ldr	r1, [sp, #0]
 801230a:	4605      	mov	r5, r0
 801230c:	4630      	mov	r0, r6
 801230e:	f7ff fa6b 	bl	80117e8 <_malloc_r>
 8012312:	b948      	cbnz	r0, 8012328 <__smakebuf_r+0x44>
 8012314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012318:	059a      	lsls	r2, r3, #22
 801231a:	d4ef      	bmi.n	80122fc <__smakebuf_r+0x18>
 801231c:	f023 0303 	bic.w	r3, r3, #3
 8012320:	f043 0302 	orr.w	r3, r3, #2
 8012324:	81a3      	strh	r3, [r4, #12]
 8012326:	e7e3      	b.n	80122f0 <__smakebuf_r+0xc>
 8012328:	4b0d      	ldr	r3, [pc, #52]	; (8012360 <__smakebuf_r+0x7c>)
 801232a:	62b3      	str	r3, [r6, #40]	; 0x28
 801232c:	89a3      	ldrh	r3, [r4, #12]
 801232e:	6020      	str	r0, [r4, #0]
 8012330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012334:	81a3      	strh	r3, [r4, #12]
 8012336:	9b00      	ldr	r3, [sp, #0]
 8012338:	6163      	str	r3, [r4, #20]
 801233a:	9b01      	ldr	r3, [sp, #4]
 801233c:	6120      	str	r0, [r4, #16]
 801233e:	b15b      	cbz	r3, 8012358 <__smakebuf_r+0x74>
 8012340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012344:	4630      	mov	r0, r6
 8012346:	f000 f881 	bl	801244c <_isatty_r>
 801234a:	b128      	cbz	r0, 8012358 <__smakebuf_r+0x74>
 801234c:	89a3      	ldrh	r3, [r4, #12]
 801234e:	f023 0303 	bic.w	r3, r3, #3
 8012352:	f043 0301 	orr.w	r3, r3, #1
 8012356:	81a3      	strh	r3, [r4, #12]
 8012358:	89a0      	ldrh	r0, [r4, #12]
 801235a:	4305      	orrs	r5, r0
 801235c:	81a5      	strh	r5, [r4, #12]
 801235e:	e7cd      	b.n	80122fc <__smakebuf_r+0x18>
 8012360:	0801156d 	.word	0x0801156d

08012364 <__malloc_lock>:
 8012364:	4801      	ldr	r0, [pc, #4]	; (801236c <__malloc_lock+0x8>)
 8012366:	f7ff b9e5 	b.w	8011734 <__retarget_lock_acquire_recursive>
 801236a:	bf00      	nop
 801236c:	20006e3c 	.word	0x20006e3c

08012370 <__malloc_unlock>:
 8012370:	4801      	ldr	r0, [pc, #4]	; (8012378 <__malloc_unlock+0x8>)
 8012372:	f7ff b9e0 	b.w	8011736 <__retarget_lock_release_recursive>
 8012376:	bf00      	nop
 8012378:	20006e3c 	.word	0x20006e3c

0801237c <_read_r>:
 801237c:	b538      	push	{r3, r4, r5, lr}
 801237e:	4d07      	ldr	r5, [pc, #28]	; (801239c <_read_r+0x20>)
 8012380:	4604      	mov	r4, r0
 8012382:	4608      	mov	r0, r1
 8012384:	4611      	mov	r1, r2
 8012386:	2200      	movs	r2, #0
 8012388:	602a      	str	r2, [r5, #0]
 801238a:	461a      	mov	r2, r3
 801238c:	f7ee fd8e 	bl	8000eac <_read>
 8012390:	1c43      	adds	r3, r0, #1
 8012392:	d102      	bne.n	801239a <_read_r+0x1e>
 8012394:	682b      	ldr	r3, [r5, #0]
 8012396:	b103      	cbz	r3, 801239a <_read_r+0x1e>
 8012398:	6023      	str	r3, [r4, #0]
 801239a:	bd38      	pop	{r3, r4, r5, pc}
 801239c:	20006e34 	.word	0x20006e34

080123a0 <_raise_r>:
 80123a0:	291f      	cmp	r1, #31
 80123a2:	b538      	push	{r3, r4, r5, lr}
 80123a4:	4604      	mov	r4, r0
 80123a6:	460d      	mov	r5, r1
 80123a8:	d904      	bls.n	80123b4 <_raise_r+0x14>
 80123aa:	2316      	movs	r3, #22
 80123ac:	6003      	str	r3, [r0, #0]
 80123ae:	f04f 30ff 	mov.w	r0, #4294967295
 80123b2:	bd38      	pop	{r3, r4, r5, pc}
 80123b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80123b6:	b112      	cbz	r2, 80123be <_raise_r+0x1e>
 80123b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80123bc:	b94b      	cbnz	r3, 80123d2 <_raise_r+0x32>
 80123be:	4620      	mov	r0, r4
 80123c0:	f000 f830 	bl	8012424 <_getpid_r>
 80123c4:	462a      	mov	r2, r5
 80123c6:	4601      	mov	r1, r0
 80123c8:	4620      	mov	r0, r4
 80123ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123ce:	f000 b817 	b.w	8012400 <_kill_r>
 80123d2:	2b01      	cmp	r3, #1
 80123d4:	d00a      	beq.n	80123ec <_raise_r+0x4c>
 80123d6:	1c59      	adds	r1, r3, #1
 80123d8:	d103      	bne.n	80123e2 <_raise_r+0x42>
 80123da:	2316      	movs	r3, #22
 80123dc:	6003      	str	r3, [r0, #0]
 80123de:	2001      	movs	r0, #1
 80123e0:	e7e7      	b.n	80123b2 <_raise_r+0x12>
 80123e2:	2400      	movs	r4, #0
 80123e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80123e8:	4628      	mov	r0, r5
 80123ea:	4798      	blx	r3
 80123ec:	2000      	movs	r0, #0
 80123ee:	e7e0      	b.n	80123b2 <_raise_r+0x12>

080123f0 <raise>:
 80123f0:	4b02      	ldr	r3, [pc, #8]	; (80123fc <raise+0xc>)
 80123f2:	4601      	mov	r1, r0
 80123f4:	6818      	ldr	r0, [r3, #0]
 80123f6:	f7ff bfd3 	b.w	80123a0 <_raise_r>
 80123fa:	bf00      	nop
 80123fc:	20000018 	.word	0x20000018

08012400 <_kill_r>:
 8012400:	b538      	push	{r3, r4, r5, lr}
 8012402:	4d07      	ldr	r5, [pc, #28]	; (8012420 <_kill_r+0x20>)
 8012404:	2300      	movs	r3, #0
 8012406:	4604      	mov	r4, r0
 8012408:	4608      	mov	r0, r1
 801240a:	4611      	mov	r1, r2
 801240c:	602b      	str	r3, [r5, #0]
 801240e:	f7ee fd31 	bl	8000e74 <_kill>
 8012412:	1c43      	adds	r3, r0, #1
 8012414:	d102      	bne.n	801241c <_kill_r+0x1c>
 8012416:	682b      	ldr	r3, [r5, #0]
 8012418:	b103      	cbz	r3, 801241c <_kill_r+0x1c>
 801241a:	6023      	str	r3, [r4, #0]
 801241c:	bd38      	pop	{r3, r4, r5, pc}
 801241e:	bf00      	nop
 8012420:	20006e34 	.word	0x20006e34

08012424 <_getpid_r>:
 8012424:	f7ee bd1e 	b.w	8000e64 <_getpid>

08012428 <_fstat_r>:
 8012428:	b538      	push	{r3, r4, r5, lr}
 801242a:	4d07      	ldr	r5, [pc, #28]	; (8012448 <_fstat_r+0x20>)
 801242c:	2300      	movs	r3, #0
 801242e:	4604      	mov	r4, r0
 8012430:	4608      	mov	r0, r1
 8012432:	4611      	mov	r1, r2
 8012434:	602b      	str	r3, [r5, #0]
 8012436:	f7ee fd7e 	bl	8000f36 <_fstat>
 801243a:	1c43      	adds	r3, r0, #1
 801243c:	d102      	bne.n	8012444 <_fstat_r+0x1c>
 801243e:	682b      	ldr	r3, [r5, #0]
 8012440:	b103      	cbz	r3, 8012444 <_fstat_r+0x1c>
 8012442:	6023      	str	r3, [r4, #0]
 8012444:	bd38      	pop	{r3, r4, r5, pc}
 8012446:	bf00      	nop
 8012448:	20006e34 	.word	0x20006e34

0801244c <_isatty_r>:
 801244c:	b538      	push	{r3, r4, r5, lr}
 801244e:	4d06      	ldr	r5, [pc, #24]	; (8012468 <_isatty_r+0x1c>)
 8012450:	2300      	movs	r3, #0
 8012452:	4604      	mov	r4, r0
 8012454:	4608      	mov	r0, r1
 8012456:	602b      	str	r3, [r5, #0]
 8012458:	f7ee fd7d 	bl	8000f56 <_isatty>
 801245c:	1c43      	adds	r3, r0, #1
 801245e:	d102      	bne.n	8012466 <_isatty_r+0x1a>
 8012460:	682b      	ldr	r3, [r5, #0]
 8012462:	b103      	cbz	r3, 8012466 <_isatty_r+0x1a>
 8012464:	6023      	str	r3, [r4, #0]
 8012466:	bd38      	pop	{r3, r4, r5, pc}
 8012468:	20006e34 	.word	0x20006e34

0801246c <_init>:
 801246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801246e:	bf00      	nop
 8012470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012472:	bc08      	pop	{r3}
 8012474:	469e      	mov	lr, r3
 8012476:	4770      	bx	lr

08012478 <_fini>:
 8012478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801247a:	bf00      	nop
 801247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801247e:	bc08      	pop	{r3}
 8012480:	469e      	mov	lr, r3
 8012482:	4770      	bx	lr
